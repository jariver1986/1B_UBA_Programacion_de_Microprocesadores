
Practica_5_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003050  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003310  08003310  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003318  08003318  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003390  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003390  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009255  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194c  00000000  00000000  000292f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021409  00000000  00000000  0002ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa3b  00000000  00000000  0004ce99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c88bc  00000000  00000000  000578d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000209c  00000000  00000000  001201e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003208 	.word	0x08003208

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003208 	.word	0x08003208

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  Punto de entrada de la aplicación.
  * @retval int Código de retorno del programa.
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
    HAL_Init(); /**< Inicializa los periféricos y la interfaz de memoria Flash. */
 80005ca:	f000 fbff 	bl	8000dcc <HAL_Init>
    SystemClock_Config(); /**< Configura el reloj del sistema. */
 80005ce:	f000 f853 	bl	8000678 <SystemClock_Config>
    MX_GPIO_Init(); /**< Inicializa los pines GPIO. */
 80005d2:	f000 f8e9 	bl	80007a8 <MX_GPIO_Init>
    MX_USART2_UART_Init(); /**< Inicializa la UART2. */
 80005d6:	f000 f8bd 	bl	8000754 <MX_USART2_UART_Init>

    /**
     * @brief Variable de retardo.
     */
    delay_t myDelay;
    delayInit(&myDelay, 500); /**< Configura un retardo inicial de 500 ms. */
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fbb0 	bl	8000d48 <delayInit>
     * Las constantes que se utilizan en el código no están hardcodeadas
     */
	#define CANTIDAD_TIEMPOS 4
    const uint32_t TIEMPOS[CANTIDAD_TIEMPOS] = {100, 100, 100, 100};

    uint8_t index = 0; /**< Índice de la secuencia de tiempos. */
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool estadoEncendido = true;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     * @brief Inicializa la máquina de estados finita (MEF) para el manejo de anti-rebotes.
     *
     * Esta función debe llamarse una sola vez al inicio del programa para establecer
     * el estado inicial de la MEF (BUTTON_UP) y configurar el retardo interno de 40 ms.
     */
    debounceFSM_init();
 80005f4:	f000 fac6 	bl	8000b84 <debounceFSM_init>
    /**
     * @brief Duración inicial del parpadeo del LED en milisegundos.
     *
     * Se establece en 500 ms como valor por defecto, para evitar un segmento de codigo hardcodeado.
     */
    tick_t blinkTime = 500;
 80005f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005fc:	623b      	str	r3, [r7, #32]
    /**
     * @brief Inicializa el retardo no bloqueante `blinkDelay` con el valor definido en `blinkTime`.
     *
     * Esta configuración permite alternar el estado del LED cada cierto intervalo de tiempo.
     */
    delayInit(&blinkDelay, blinkTime);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	6a39      	ldr	r1, [r7, #32]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fba0 	bl	8000d48 <delayInit>

    uint8_t rx;
    uartInit(&huart2);
 8000608:	4817      	ldr	r0, [pc, #92]	; (8000668 <main+0xa4>)
 800060a:	f000 fa4d 	bl	8000aa8 <uartInit>
    uartSendString(&huart2, (uint8_t *)"Hola CESE\r\n");
 800060e:	4917      	ldr	r1, [pc, #92]	; (800066c <main+0xa8>)
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <main+0xa4>)
 8000612:	f000 fa79 	bl	8000b08 <uartSendString>
		 * Esta función debe llamarse periódicamente dentro del bucle principal.
		 * Se encarga de leer el estado del pulsador, gestionar las transiciones
		 * de estado según el flanco detectado (ascendente o descendente) y ejecutar
		 * las acciones correspondientes como encender o apagar el LED.
		 */
		debounceFSM_update();
 8000616:	f000 fac5 	bl	8000ba4 <debounceFSM_update>
		if (detectFall()) {
 800061a:	f000 fb73 	bl	8000d04 <detectFall>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d003      	beq.n	800062c <main+0x68>
		    uartSendString(&huart2, (uint8_t *)"Flanco descendente detectado\r\n");
 8000624:	4912      	ldr	r1, [pc, #72]	; (8000670 <main+0xac>)
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <main+0xa4>)
 8000628:	f000 fa6e 	bl	8000b08 <uartSendString>
		}

		if (detectRise()) {
 800062c:	f000 fb56 	bl	8000cdc <detectRise>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <main+0x7a>
		    uartSendString(&huart2, (uint8_t *)"Flanco ascendente detectado\r\n");
 8000636:	490f      	ldr	r1, [pc, #60]	; (8000674 <main+0xb0>)
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <main+0xa4>)
 800063a:	f000 fa65 	bl	8000b08 <uartSendString>
			delayWrite(&blinkDelay, currentBlink);
			uartSendString(&huart2, (uint8_t *)"Botón presionado\r\n"); //Mensaje enviado por Uart al ser presionado

		}*/

		if (HAL_UART_Receive(&huart2, &rx, 1, 10) == HAL_OK && rx == 'c') {  //recibe caracter "c" y responde
 800063e:	1cf9      	adds	r1, r7, #3
 8000640:	230a      	movs	r3, #10
 8000642:	2201      	movs	r2, #1
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0xa4>)
 8000646:	f001 fda6 	bl	8002196 <HAL_UART_Receive>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1e2      	bne.n	8000616 <main+0x52>
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b63      	cmp	r3, #99	; 0x63
 8000654:	d1df      	bne.n	8000616 <main+0x52>
		    //uartSendString(&huart2, (uint8_t *)"Configuración: Baudrate=115200, 8N1\r\n");
			char *configStr = uartGetConfigString(&huart2);
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <main+0xa4>)
 8000658:	f000 fa74 	bl	8000b44 <uartGetConfigString>
 800065c:	61f8      	str	r0, [r7, #28]
			uartSendString(&huart2, (uint8_t *)configStr);
 800065e:	69f9      	ldr	r1, [r7, #28]
 8000660:	4801      	ldr	r0, [pc, #4]	; (8000668 <main+0xa4>)
 8000662:	f000 fa51 	bl	8000b08 <uartSendString>
		debounceFSM_update();
 8000666:	e7d6      	b.n	8000616 <main+0x52>
 8000668:	2000008c 	.word	0x2000008c
 800066c:	08003220 	.word	0x08003220
 8000670:	0800322c 	.word	0x0800322c
 8000674:	0800324c 	.word	0x0800324c

08000678 <SystemClock_Config>:
/**
  * @brief Configuración del reloj del sistema.
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
    // Configuración del reloj del sistema basada en HSI y PLL.
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f934 	bl	80028f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a22      	ldr	r2, [pc, #136]	; (8000750 <SystemClock_Config+0xd8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f9c8 	bl	8001a9c <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9e>
    {
        Error_Handler();
 8000712:	f000 f8b7 	bl	8000884 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fe68 	bl	8001408 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xca>
    {
        Error_Handler();
 800073e:	f000 f8a1 	bl	8000884 <Error_Handler>
    }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:
/**
  * @brief Inicialización de la UART2 pero no se usa en esta practica
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fc24 	bl	8001fd8 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8000796:	f000 f875 	bl	8000884 <Error_Handler>
    }
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
/**
  * @brief Inicialización de los pines GPIO como entrada el boton.
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <MX_GPIO_Init+0xd0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <MX_GPIO_Init+0xd0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0xd4>)
 8000834:	f000 fdce 	bl	80013d4 <HAL_GPIO_WritePin>

    //GPIO_InitStruct.Pin = B1_Pin;
    //GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pin = B1_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0xd8>)
 800084e:	f000 fc15 	bl	800107c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LD2_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0xd4>)
 800086a:	f000 fc07 	bl	800107c <HAL_GPIO_Init>
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <Error_Handler>:
/**
  * @brief Manejo de errores del sistema importante para  la programacion defensiva.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
    __disable_irq();
    while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 fba0 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_UART_MspInit+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12b      	bne.n	800095a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x88>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093a:	230c      	movs	r3, #12
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x8c>)
 8000956:	f000 fb91 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fa58 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f001 ff54 	bl	80028a0 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20020000 	.word	0x20020000
 8000a24:	00000400 	.word	0x00000400
 8000a28:	200000d0 	.word	0x200000d0
 8000a2c:	20000140 	.word	0x20000140

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f001 ff13 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd9d 	bl	80005c4 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a98:	08003320 	.word	0x08003320
  ldr r2, =_sbss
 8000a9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa0:	20000140 	.word	0x20000140

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <uartInit>:
 *
 * @param huartx Puntero al manejador de la UART a inicializar.
 * @retval true si la UART fue inicializada y se transmitió el mensaje correctamente.
 * @retval false si ocurrió un error en la inicialización o transmisión.
 */
bool uartInit(UART_HandleTypeDef *huartx) {
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    if (HAL_UART_Init(huartx) != HAL_OK) {
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f001 fa91 	bl	8001fd8 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <uartInit+0x18>
        return false;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e01c      	b.n	8000afa <uartInit+0x52>
    }

    char msg[] = "UART Inicializada: 115200 8N1\r\n";
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <uartInit+0x5c>)
 8000ac2:	f107 0408 	add.w	r4, r7, #8
 8000ac6:	461d      	mov	r5, r3
 8000ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000acc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (HAL_UART_Transmit(huartx, (uint8_t *)msg, strlen(msg), UART_TIMEOUT) != HAL_OK) {
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fb99 	bl	8000210 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f001 fac2 	bl	8002072 <HAL_UART_Transmit>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <uartInit+0x50>
        return false;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e000      	b.n	8000afa <uartInit+0x52>
    }

    return true;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bdb0      	pop	{r4, r5, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	0800326c 	.word	0x0800326c

08000b08 <uartSendString>:
 * para evitar errores y desbordamientos.
 *
 * @param huartx Puntero al manejador de UART.
 * @param pstring Puntero a la cadena de texto terminada en NULL.
 */
void uartSendString(UART_HandleTypeDef *huartx, uint8_t * pstring) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    if (pstring == NULL) return;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00f      	beq.n	8000b38 <uartSendString+0x30>
    uint16_t len = strlen((char *)pstring);
 8000b18:	6838      	ldr	r0, [r7, #0]
 8000b1a:	f7ff fb79 	bl	8000210 <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	81fb      	strh	r3, [r7, #14]
    if (len > MAX_SIZE) return;
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b28:	d808      	bhi.n	8000b3c <uartSendString+0x34>

    HAL_UART_Transmit(huartx, pstring, len, UART_TIMEOUT);
 8000b2a:	89fa      	ldrh	r2, [r7, #14]
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f001 fa9e 	bl	8002072 <HAL_UART_Transmit>
 8000b36:	e002      	b.n	8000b3e <uartSendString+0x36>
    if (pstring == NULL) return;
 8000b38:	bf00      	nop
 8000b3a:	e000      	b.n	8000b3e <uartSendString+0x36>
    if (len > MAX_SIZE) return;
 8000b3c:	bf00      	nop
}
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <uartGetConfigString>:
/**
 * @brief Lee la configuracion de Uart Baudrate y la concatena en
 * msg
 *
 */
char* uartGetConfigString(UART_HandleTypeDef *huartx) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    static char msg[64];

    if (huartx == NULL) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d106      	bne.n	8000b60 <uartGetConfigString+0x1c>
        snprintf(msg, sizeof(msg), "UART inválida\r\n");
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <uartGetConfigString+0x34>)
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	4809      	ldr	r0, [pc, #36]	; (8000b7c <uartGetConfigString+0x38>)
 8000b58:	f001 fed4 	bl	8002904 <sniprintf>
        return msg;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <uartGetConfigString+0x38>)
 8000b5e:	e007      	b.n	8000b70 <uartGetConfigString+0x2c>
    }

    snprintf(msg, sizeof(msg),
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <uartGetConfigString+0x3c>)
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <uartGetConfigString+0x38>)
 8000b6a:	f001 fecb 	bl	8002904 <sniprintf>
             "Configuracion: Baudrate=%lu, 8N1\r\n",
             huartx->Init.BaudRate);

    return msg;
 8000b6e:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <uartGetConfigString+0x38>)
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	0800328c 	.word	0x0800328c
 8000b7c:	200000d4 	.word	0x200000d4
 8000b80:	080032a0 	.word	0x080032a0

08000b84 <debounceFSM_init>:
//Variable para detectar flancos
static bool flagRise = false;
static bool flagFall = false;

void debounceFSM_init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    estadoActual = BUTTON_UP;                  // Estado inicial
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <debounceFSM_init+0x18>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
    delayInit(&delayDebounce, DEBOUNCE_TIME_MS);             // Configura retardo de 40 ms
 8000b8e:	2128      	movs	r1, #40	; 0x28
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <debounceFSM_init+0x1c>)
 8000b92:	f000 f8d9 	bl	8000d48 <delayInit>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000114 	.word	0x20000114
 8000ba0:	20000118 	.word	0x20000118

08000ba4 <debounceFSM_update>:

void debounceFSM_update(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
    switch (estadoActual) {
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <debounceFSM_update+0xf0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d864      	bhi.n	8000c7a <debounceFSM_update+0xd6>
 8000bb0:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <debounceFSM_update+0x14>)
 8000bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb6:	bf00      	nop
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000be9 	.word	0x08000be9
 8000bc0:	08000c25 	.word	0x08000c25
 8000bc4:	08000c45 	.word	0x08000c45
        case BUTTON_UP:
            if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Botón presionado
 8000bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bcc:	4832      	ldr	r0, [pc, #200]	; (8000c98 <debounceFSM_update+0xf4>)
 8000bce:	f000 fbe9 	bl	80013a4 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d153      	bne.n	8000c80 <debounceFSM_update+0xdc>
                estadoActual = BUTTON_FALLING;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <debounceFSM_update+0xf0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
                delayInit(&delayDebounce, DEBOUNCE_TIME_MS);
 8000bde:	2128      	movs	r1, #40	; 0x28
 8000be0:	482e      	ldr	r0, [pc, #184]	; (8000c9c <debounceFSM_update+0xf8>)
 8000be2:	f000 f8b1 	bl	8000d48 <delayInit>
            }
            break;
 8000be6:	e04b      	b.n	8000c80 <debounceFSM_update+0xdc>
        case BUTTON_FALLING:
            if (delayRead(&delayDebounce)) {	//Retardo no bloqueante
 8000be8:	482c      	ldr	r0, [pc, #176]	; (8000c9c <debounceFSM_update+0xf8>)
 8000bea:	f000 f8c4 	bl	8000d76 <delayRead>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d047      	beq.n	8000c84 <debounceFSM_update+0xe0>
                if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf8:	4827      	ldr	r0, [pc, #156]	; (8000c98 <debounceFSM_update+0xf4>)
 8000bfa:	f000 fbd3 	bl	80013a4 <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10b      	bne.n	8000c1c <debounceFSM_update+0x78>
                    estadoActual = BUTTON_DOWN;
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <debounceFSM_update+0xf0>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	701a      	strb	r2, [r3, #0]
                    flagFall = true;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <debounceFSM_update+0xfc>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
                    teclaPresionada = true;     // Marca flanco descendente
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <debounceFSM_update+0x100>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
                    buttonPressed();            // Enciende el LED
 8000c16:	f000 f849 	bl	8000cac <buttonPressed>
                } else {
                    estadoActual = BUTTON_UP;   // Rebote descartado
                }
            }
            break;
 8000c1a:	e033      	b.n	8000c84 <debounceFSM_update+0xe0>
                    estadoActual = BUTTON_UP;   // Rebote descartado
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <debounceFSM_update+0xf0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
            break;
 8000c22:	e02f      	b.n	8000c84 <debounceFSM_update+0xe0>
        case BUTTON_DOWN:
            if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // Botón soltado
 8000c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c28:	481b      	ldr	r0, [pc, #108]	; (8000c98 <debounceFSM_update+0xf4>)
 8000c2a:	f000 fbbb 	bl	80013a4 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d129      	bne.n	8000c88 <debounceFSM_update+0xe4>
                estadoActual = BUTTON_RAISING;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <debounceFSM_update+0xf0>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	701a      	strb	r2, [r3, #0]
                delayInit(&delayDebounce, DEBOUNCE_TIME_MS);
 8000c3a:	2128      	movs	r1, #40	; 0x28
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <debounceFSM_update+0xf8>)
 8000c3e:	f000 f883 	bl	8000d48 <delayInit>
            }
            break;
 8000c42:	e021      	b.n	8000c88 <debounceFSM_update+0xe4>
        case BUTTON_RAISING:
            if (delayRead(&delayDebounce)) {		//Retardo no bloqueante
 8000c44:	4815      	ldr	r0, [pc, #84]	; (8000c9c <debounceFSM_update+0xf8>)
 8000c46:	f000 f896 	bl	8000d76 <delayRead>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d01d      	beq.n	8000c8c <debounceFSM_update+0xe8>
                if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c54:	4810      	ldr	r0, [pc, #64]	; (8000c98 <debounceFSM_update+0xf4>)
 8000c56:	f000 fba5 	bl	80013a4 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d108      	bne.n	8000c72 <debounceFSM_update+0xce>
                    estadoActual = BUTTON_UP;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <debounceFSM_update+0xf0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
                    flagRise = true;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <debounceFSM_update+0x104>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
                    buttonReleased();           // Apaga el LED
 8000c6c:	f000 f82a 	bl	8000cc4 <buttonReleased>
                } else {
                    estadoActual = BUTTON_DOWN; // Rebote descartado
                }
            }
            break;
 8000c70:	e00c      	b.n	8000c8c <debounceFSM_update+0xe8>
                    estadoActual = BUTTON_DOWN; // Rebote descartado
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <debounceFSM_update+0xf0>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	701a      	strb	r2, [r3, #0]
            break;
 8000c78:	e008      	b.n	8000c8c <debounceFSM_update+0xe8>
        default:
            debounceFSM_init();                 // Reinicia en caso de error
 8000c7a:	f7ff ff83 	bl	8000b84 <debounceFSM_init>
            break;
 8000c7e:	e006      	b.n	8000c8e <debounceFSM_update+0xea>
            break;
 8000c80:	bf00      	nop
 8000c82:	e004      	b.n	8000c8e <debounceFSM_update+0xea>
            break;
 8000c84:	bf00      	nop
 8000c86:	e002      	b.n	8000c8e <debounceFSM_update+0xea>
            break;
 8000c88:	bf00      	nop
 8000c8a:	e000      	b.n	8000c8e <debounceFSM_update+0xea>
            break;
 8000c8c:	bf00      	nop
    }
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000114 	.word	0x20000114
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	20000118 	.word	0x20000118
 8000ca0:	20000126 	.word	0x20000126
 8000ca4:	20000124 	.word	0x20000124
 8000ca8:	20000125 	.word	0x20000125

08000cac <buttonPressed>:
        return true;
    }
    return false;
}

static void buttonPressed(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Enciende LED (LD2)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <buttonPressed+0x14>)
 8000cb6:	f000 fb8d 	bl	80013d4 <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <buttonReleased>:

static void buttonReleased(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Apaga LED (LD2)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <buttonReleased+0x14>)
 8000cce:	f000 fb81 	bl	80013d4 <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40020000 	.word	0x40020000

08000cdc <detectRise>:


bool detectRise(void) {
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
    if (flagRise) {
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <detectRise+0x24>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <detectRise+0x16>
        flagRise = false;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <detectRise+0x24>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
        return true;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <detectRise+0x18>
    }
    return false;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000125 	.word	0x20000125

08000d04 <detectFall>:


bool detectFall(void) {
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
    if (flagFall) {
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <detectFall+0x24>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d004      	beq.n	8000d1a <detectFall+0x16>
        flagFall = false;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <detectFall+0x24>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
        return true;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <detectFall+0x18>
    }
    return false;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000126 	.word	0x20000126

08000d2c <incrementarContador>:

// Variable privada: solo visible dentro de este archivo .c
static uint32_t retardoCompletadoContador = 0;

// Función privada: solo se usa internamente
static void incrementarContador(void) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    retardoCompletadoContador++;
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <incrementarContador+0x18>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <incrementarContador+0x18>)
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	20000128 	.word	0x20000128

08000d48 <delayInit>:
 * @param duration Duración del retardo en milisegundos.
 *
 * @return Ninguno.
 */
void delayInit(delay_t *delay, tick_t duration)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
    delay->duration = duration;  /**< Asigna la duración del retardo. */
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	605a      	str	r2, [r3, #4]
    delay->running = false;      /**< Inicializa el estado del retardo como inactivo. */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	721a      	strb	r2, [r3, #8]
    if (delay == NULL)			/**< control de los parámetros. */
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <delayInit+0x22>
    	return;
    if (duration == 0)			/**< control de los parámetros. */
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	e000      	b.n	8000d6c <delayInit+0x24>
    	return;
 8000d6a:	bf00      	nop
    	return;
}
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <delayRead>:
 * @param delay Puntero a la estructura @c delay_t que representa el retardo.
 *
 * @return @c true si el retardo ha terminado, @c false en caso contrario.
 */
bool_t delayRead(delay_t *delay)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
    if (!delay->running) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7a1b      	ldrb	r3, [r3, #8]
 8000d82:	f083 0301 	eor.w	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d009      	beq.n	8000da0 <delayRead+0x2a>
        delay->startTime = HAL_GetTick(); /**< Captura el tiempo de inicio. */
 8000d8c:	f000 f884 	bl	8000e98 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]
        delay->running = true;           /**< Marca el retardo como activo. */
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	721a      	strb	r2, [r3, #8]
        return false;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e011      	b.n	8000dc4 <delayRead+0x4e>
    }

    if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 8000da0:	f000 f87a 	bl	8000e98 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1ad2      	subs	r2, r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d306      	bcc.n	8000dc2 <delayRead+0x4c>
        delay->running = false; /**< Finaliza el retardo. */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	721a      	strb	r2, [r3, #8]
        incrementarContador();  // 🔄 Se llama la función privada
 8000dba:	f7ff ffb7 	bl	8000d2c <incrementarContador>
        return true;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <delayRead+0x4e>
    }


    return false; /**< El retardo aún no ha finalizado. */
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f90d 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fd46 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f917 	bl	8001062 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f8ed 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	2000012c 	.word	0x2000012c

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000012c 	.word	0x2000012c

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff47 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5c 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e165      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8154 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80ae 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_GPIO_Init+0x300>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5c      	ldr	r2, [pc, #368]	; (800137c <HAL_GPIO_Init+0x300>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_GPIO_Init+0x300>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x30c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x310>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x20a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x206>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x202>
 800127a:	2306      	movs	r3, #6
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800127e:	2307      	movs	r3, #7
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae96 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f0:	e003      	b.n	80013fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0cc      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d90c      	bls.n	8001444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	494d      	ldr	r1, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d044      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d119      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e067      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4934      	ldr	r1, [pc, #208]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff fcce 	bl	8000e98 <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff fcca 	bl	8000e98 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e04f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d20c      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e032      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f855 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8001592:	4602      	mov	r2, r0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	5ccb      	ldrb	r3, [r1, r3]
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc2e 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	080032c4 	.word	0x080032c4
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000

080015ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4903      	ldr	r1, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	080032d4 	.word	0x080032d4

08001614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001618:	f7ff ffdc 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	0b5b      	lsrs	r3, r3, #13
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	4903      	ldr	r1, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	080032d4 	.word	0x080032d4

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001640:	b0ae      	sub	sp, #184	; 0xb8
 8001642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001662:	4bcb      	ldr	r3, [pc, #812]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b0c      	cmp	r3, #12
 800166c:	f200 8206 	bhi.w	8001a7c <HAL_RCC_GetSysClockFreq+0x440>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	080016ad 	.word	0x080016ad
 800167c:	08001a7d 	.word	0x08001a7d
 8001680:	08001a7d 	.word	0x08001a7d
 8001684:	08001a7d 	.word	0x08001a7d
 8001688:	080016b5 	.word	0x080016b5
 800168c:	08001a7d 	.word	0x08001a7d
 8001690:	08001a7d 	.word	0x08001a7d
 8001694:	08001a7d 	.word	0x08001a7d
 8001698:	080016bd 	.word	0x080016bd
 800169c:	08001a7d 	.word	0x08001a7d
 80016a0:	08001a7d 	.word	0x08001a7d
 80016a4:	08001a7d 	.word	0x08001a7d
 80016a8:	080018ad 	.word	0x080018ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4bb9      	ldr	r3, [pc, #740]	; (8001994 <HAL_RCC_GetSysClockFreq+0x358>)
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016b2:	e1e7      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016b4:	4bb8      	ldr	r3, [pc, #736]	; (8001998 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ba:	e1e3      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016bc:	4bb4      	ldr	r3, [pc, #720]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c8:	4bb1      	ldr	r3, [pc, #708]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d071      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	4bae      	ldr	r3, [pc, #696]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016fa:	4622      	mov	r2, r4
 80016fc:	462b      	mov	r3, r5
 80016fe:	f04f 0000 	mov.w	r0, #0
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	0159      	lsls	r1, r3, #5
 8001708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170c:	0150      	lsls	r0, r2, #5
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4621      	mov	r1, r4
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	6439      	str	r1, [r7, #64]	; 0x40
 8001718:	4629      	mov	r1, r5
 800171a:	eb63 0301 	sbc.w	r3, r3, r1
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800172c:	4649      	mov	r1, r9
 800172e:	018b      	lsls	r3, r1, #6
 8001730:	4641      	mov	r1, r8
 8001732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001736:	4641      	mov	r1, r8
 8001738:	018a      	lsls	r2, r1, #6
 800173a:	4641      	mov	r1, r8
 800173c:	1a51      	subs	r1, r2, r1
 800173e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001740:	4649      	mov	r1, r9
 8001742:	eb63 0301 	sbc.w	r3, r3, r1
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001754:	4649      	mov	r1, r9
 8001756:	00cb      	lsls	r3, r1, #3
 8001758:	4641      	mov	r1, r8
 800175a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800175e:	4641      	mov	r1, r8
 8001760:	00ca      	lsls	r2, r1, #3
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	4603      	mov	r3, r0
 8001768:	4622      	mov	r2, r4
 800176a:	189b      	adds	r3, r3, r2
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
 800176e:	462b      	mov	r3, r5
 8001770:	460a      	mov	r2, r1
 8001772:	eb42 0303 	adc.w	r3, r2, r3
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001784:	4629      	mov	r1, r5
 8001786:	024b      	lsls	r3, r1, #9
 8001788:	4621      	mov	r1, r4
 800178a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800178e:	4621      	mov	r1, r4
 8001790:	024a      	lsls	r2, r1, #9
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800179a:	2200      	movs	r2, #0
 800179c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017a8:	f7fe fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4613      	mov	r3, r2
 80017b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017b6:	e067      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	2200      	movs	r2, #0
 80017c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017d2:	2300      	movs	r3, #0
 80017d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017da:	4622      	mov	r2, r4
 80017dc:	462b      	mov	r3, r5
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	0159      	lsls	r1, r3, #5
 80017e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ec:	0150      	lsls	r0, r2, #5
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4621      	mov	r1, r4
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80017f8:	4629      	mov	r1, r5
 80017fa:	eb63 0301 	sbc.w	r3, r3, r1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800180c:	4649      	mov	r1, r9
 800180e:	018b      	lsls	r3, r1, #6
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001816:	4641      	mov	r1, r8
 8001818:	018a      	lsls	r2, r1, #6
 800181a:	4641      	mov	r1, r8
 800181c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001820:	4649      	mov	r1, r9
 8001822:	eb63 0b01 	sbc.w	fp, r3, r1
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001832:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800183a:	4692      	mov	sl, r2
 800183c:	469b      	mov	fp, r3
 800183e:	4623      	mov	r3, r4
 8001840:	eb1a 0303 	adds.w	r3, sl, r3
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	462b      	mov	r3, r5
 8001848:	eb4b 0303 	adc.w	r3, fp, r3
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800185a:	4629      	mov	r1, r5
 800185c:	028b      	lsls	r3, r1, #10
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001864:	4621      	mov	r1, r4
 8001866:	028a      	lsls	r2, r1, #10
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001870:	2200      	movs	r2, #0
 8001872:	673b      	str	r3, [r7, #112]	; 0x70
 8001874:	677a      	str	r2, [r7, #116]	; 0x74
 8001876:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800187a:	f7fe fd21 	bl	80002c0 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	3301      	adds	r3, #1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800189a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800189e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018aa:	e0eb      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d06b      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_GetSysClockFreq+0x354>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	2200      	movs	r2, #0
 80018cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80018ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d6:	663b      	str	r3, [r7, #96]	; 0x60
 80018d8:	2300      	movs	r3, #0
 80018da:	667b      	str	r3, [r7, #100]	; 0x64
 80018dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018e0:	4622      	mov	r2, r4
 80018e2:	462b      	mov	r3, r5
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	0159      	lsls	r1, r3, #5
 80018ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f2:	0150      	lsls	r0, r2, #5
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4621      	mov	r1, r4
 80018fa:	1a51      	subs	r1, r2, r1
 80018fc:	61b9      	str	r1, [r7, #24]
 80018fe:	4629      	mov	r1, r5
 8001900:	eb63 0301 	sbc.w	r3, r3, r1
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001912:	4659      	mov	r1, fp
 8001914:	018b      	lsls	r3, r1, #6
 8001916:	4651      	mov	r1, sl
 8001918:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191c:	4651      	mov	r1, sl
 800191e:	018a      	lsls	r2, r1, #6
 8001920:	4651      	mov	r1, sl
 8001922:	ebb2 0801 	subs.w	r8, r2, r1
 8001926:	4659      	mov	r1, fp
 8001928:	eb63 0901 	sbc.w	r9, r3, r1
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001938:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001940:	4690      	mov	r8, r2
 8001942:	4699      	mov	r9, r3
 8001944:	4623      	mov	r3, r4
 8001946:	eb18 0303 	adds.w	r3, r8, r3
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	462b      	mov	r3, r5
 800194e:	eb49 0303 	adc.w	r3, r9, r3
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001960:	4629      	mov	r1, r5
 8001962:	024b      	lsls	r3, r1, #9
 8001964:	4621      	mov	r1, r4
 8001966:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800196a:	4621      	mov	r1, r4
 800196c:	024a      	lsls	r2, r1, #9
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001976:	2200      	movs	r2, #0
 8001978:	65bb      	str	r3, [r7, #88]	; 0x58
 800197a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800197c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001980:	f7fe fc9e 	bl	80002c0 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800198e:	e065      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x420>
 8001990:	40023800 	.word	0x40023800
 8001994:	00f42400 	.word	0x00f42400
 8001998:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x458>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	2200      	movs	r2, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	4611      	mov	r1, r2
 80019a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ac:	653b      	str	r3, [r7, #80]	; 0x50
 80019ae:	2300      	movs	r3, #0
 80019b0:	657b      	str	r3, [r7, #84]	; 0x54
 80019b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019b6:	4642      	mov	r2, r8
 80019b8:	464b      	mov	r3, r9
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4641      	mov	r1, r8
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	4649      	mov	r1, r9
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019e8:	4659      	mov	r1, fp
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	4651      	mov	r1, sl
 80019ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f2:	4651      	mov	r1, sl
 80019f4:	018a      	lsls	r2, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	1a54      	subs	r4, r2, r1
 80019fa:	4659      	mov	r1, fp
 80019fc:	eb63 0501 	sbc.w	r5, r3, r1
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	00eb      	lsls	r3, r5, #3
 8001a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0e:	00e2      	lsls	r2, r4, #3
 8001a10:	4614      	mov	r4, r2
 8001a12:	461d      	mov	r5, r3
 8001a14:	4643      	mov	r3, r8
 8001a16:	18e3      	adds	r3, r4, r3
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	eb45 0303 	adc.w	r3, r5, r3
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	028b      	lsls	r3, r1, #10
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a38:	4621      	mov	r1, r4
 8001a3a:	028a      	lsls	r2, r1, #10
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a44:	2200      	movs	r2, #0
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a4e:	f7fe fc37 	bl	80002c0 <__aeabi_uldivmod>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4613      	mov	r3, r2
 8001a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0f1b      	lsrs	r3, r3, #28
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a7a:	e003      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	37b8      	adds	r7, #184	; 0xb8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400

08001a9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e28d      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8083 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001abc:	4b94      	ldr	r3, [pc, #592]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d019      	beq.n	8001afc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac8:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae0:	d00c      	beq.n	8001afc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d112      	bne.n	8001b14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aee:	4b88      	ldr	r3, [pc, #544]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afa:	d10b      	bne.n	8001b14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05b      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x124>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d157      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e25a      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d106      	bne.n	8001b2c <HAL_RCC_OscConfig+0x90>
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7b      	ldr	r2, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xcc>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0xb4>
 8001b36:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a75      	ldr	r2, [pc, #468]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a72      	ldr	r2, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xcc>
 8001b50:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b6c      	ldr	r3, [pc, #432]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6b      	ldr	r2, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f992 	bl	8000e98 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f98e 	bl	8000e98 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e21f      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xdc>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff f97e 	bl	8000e98 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f97a 	bl	8000e98 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e20b      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x104>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d06f      	beq.n	8001cae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bce:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d017      	beq.n	8001c0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d11c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x186>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e1d3      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4937      	ldr	r1, [pc, #220]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	e03a      	b.n	8001cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_RCC_OscConfig+0x278>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f927 	bl	8000e98 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f923 	bl	8000e98 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1b4      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4925      	ldr	r1, [pc, #148]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_OscConfig+0x278>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f906 	bl	8000e98 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff f902 	bl	8000e98 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e193      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d036      	beq.n	8001d28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f8e6 	bl	8000e98 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff f8e2 	bl	8000e98 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e173      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x234>
 8001cee:	e01b      	b.n	8001d28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f8cf 	bl	8000e98 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	e00e      	b.n	8001d1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f8cb 	bl	8000e98 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d907      	bls.n	8001d1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e15c      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470000 	.word	0x42470000
 8001d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ea      	bne.n	8001cfe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8097 	beq.w	8001e64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a7e      	ldr	r2, [pc, #504]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b7c      	ldr	r3, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b79      	ldr	r3, [pc, #484]	; (8001f4c <HAL_RCC_OscConfig+0x4b0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d118      	bne.n	8001da4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b76      	ldr	r3, [pc, #472]	; (8001f4c <HAL_RCC_OscConfig+0x4b0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a75      	ldr	r2, [pc, #468]	; (8001f4c <HAL_RCC_OscConfig+0x4b0>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f88b 	bl	8000e98 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d86:	f7ff f887 	bl	8000e98 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e118      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	4b6c      	ldr	r3, [pc, #432]	; (8001f4c <HAL_RCC_OscConfig+0x4b0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x31e>
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a65      	ldr	r2, [pc, #404]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x358>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x340>
 8001dc2:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	4a5d      	ldr	r2, [pc, #372]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x358>
 8001ddc:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a59      	ldr	r2, [pc, #356]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a56      	ldr	r2, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f84c 	bl	8000e98 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7ff f848 	bl	8000e98 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0d7      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ee      	beq.n	8001e04 <HAL_RCC_OscConfig+0x368>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f836 	bl	8000e98 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff f832 	bl	8000e98 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0c1      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80ad 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d060      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d145      	bne.n	8001f0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCC_OscConfig+0x4b4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f806 	bl	8000e98 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff f802 	bl	8000e98 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e093      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	061b      	lsls	r3, r3, #24
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	071b      	lsls	r3, r3, #28
 8001eda:	491b      	ldr	r1, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x4b4>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7fe ffd7 	bl	8000e98 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe ffd3 	bl	8000e98 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e064      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x452>
 8001f0c:	e05c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x4b4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ffc0 	bl	8000e98 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ffbc 	bl	8000e98 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e04d      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x480>
 8001f3a:	e045      	b.n	8001fc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e040      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_RCC_OscConfig+0x538>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d030      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d129      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d122      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d119      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e03f      	b.n	800206a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fc6e 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f9cb 	bl	80023b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b08a      	sub	sp, #40	; 0x28
 8002076:	af02      	add	r7, sp, #8
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b20      	cmp	r3, #32
 8002090:	d17c      	bne.n	800218c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_UART_Transmit+0x2c>
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e075      	b.n	800218e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_UART_Transmit+0x3e>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e06e      	b.n	800218e <HAL_UART_Transmit+0x11c>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2221      	movs	r2, #33	; 0x21
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020c6:	f7fe fee7 	bl	8000e98 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	88fa      	ldrh	r2, [r7, #6]
 80020d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	88fa      	ldrh	r2, [r7, #6]
 80020d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e0:	d108      	bne.n	80020f4 <HAL_UART_Transmit+0x82>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d104      	bne.n	80020f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e003      	b.n	80020fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002104:	e02a      	b.n	800215c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f8e2 	bl	80022da <UART_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e036      	b.n	800218e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	3302      	adds	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e007      	b.n	800214e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1cf      	bne.n	8002106 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2200      	movs	r2, #0
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f8b2 	bl	80022da <UART_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e006      	b.n	800218e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b08a      	sub	sp, #40	; 0x28
 800219a:	af02      	add	r7, sp, #8
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	f040 808c 	bne.w	80022d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_UART_Receive+0x2e>
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e084      	b.n	80022d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Receive+0x40>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e07d      	b.n	80022d2 <HAL_UART_Receive+0x13c>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2222      	movs	r2, #34	; 0x22
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fe51 	bl	8000e98 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220c:	d108      	bne.n	8002220 <HAL_UART_Receive+0x8a>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e003      	b.n	8002228 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002230:	e043      	b.n	80022ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	2120      	movs	r1, #32
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f84c 	bl	80022da <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e042      	b.n	80022d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225e:	b29a      	uxth	r2, r3
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	3302      	adds	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	e01f      	b.n	80022ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002274:	d007      	beq.n	8002286 <HAL_UART_Receive+0xf0>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_UART_Receive+0xfe>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e008      	b.n	80022a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1b6      	bne.n	8002232 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b090      	sub	sp, #64	; 0x40
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ea:	e050      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d04c      	beq.n	800238e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <UART_WaitOnFlagUntilTimeout+0x30>
 80022fa:	f7fe fdcd 	bl	8000e98 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002306:	429a      	cmp	r2, r3
 8002308:	d241      	bcs.n	800238e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	330c      	adds	r3, #12
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232a:	637a      	str	r2, [r7, #52]	; 0x34
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e5      	bne.n	800230a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3314      	adds	r3, #20
 8002344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	e853 3f00 	ldrex	r3, [r3]
 800234c:	613b      	str	r3, [r7, #16]
   return(result);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3314      	adds	r3, #20
 800235c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800235e:	623a      	str	r2, [r7, #32]
 8002360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002362:	69f9      	ldr	r1, [r7, #28]
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	e841 2300 	strex	r3, r2, [r1]
 800236a:	61bb      	str	r3, [r7, #24]
   return(result);
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e5      	bne.n	800233e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e00f      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4013      	ands	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d09f      	beq.n	80022ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3740      	adds	r7, #64	; 0x40
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b0c0      	sub	sp, #256	; 0x100
 80023be:	af00      	add	r7, sp, #0
 80023c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	68d9      	ldr	r1, [r3, #12]
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	ea40 0301 	orr.w	r3, r0, r1
 80023e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002410:	f021 010c 	bic.w	r1, r1, #12
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800241e:	430b      	orrs	r3, r1
 8002420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002432:	6999      	ldr	r1, [r3, #24]
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	ea40 0301 	orr.w	r3, r0, r1
 800243e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4b8f      	ldr	r3, [pc, #572]	; (8002684 <UART_SetConfig+0x2cc>)
 8002448:	429a      	cmp	r2, r3
 800244a:	d005      	beq.n	8002458 <UART_SetConfig+0xa0>
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b8d      	ldr	r3, [pc, #564]	; (8002688 <UART_SetConfig+0x2d0>)
 8002454:	429a      	cmp	r2, r3
 8002456:	d104      	bne.n	8002462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002458:	f7ff f8dc 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 800245c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002460:	e003      	b.n	800246a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002462:	f7ff f8c3 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002474:	f040 810c 	bne.w	8002690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800247c:	2200      	movs	r2, #0
 800247e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	1891      	adds	r1, r2, r2
 8002490:	65b9      	str	r1, [r7, #88]	; 0x58
 8002492:	415b      	adcs	r3, r3
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800249a:	4621      	mov	r1, r4
 800249c:	eb12 0801 	adds.w	r8, r2, r1
 80024a0:	4629      	mov	r1, r5
 80024a2:	eb43 0901 	adc.w	r9, r3, r1
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ba:	4690      	mov	r8, r2
 80024bc:	4699      	mov	r9, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	eb18 0303 	adds.w	r3, r8, r3
 80024c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024c8:	462b      	mov	r3, r5
 80024ca:	eb49 0303 	adc.w	r3, r9, r3
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024e6:	460b      	mov	r3, r1
 80024e8:	18db      	adds	r3, r3, r3
 80024ea:	653b      	str	r3, [r7, #80]	; 0x50
 80024ec:	4613      	mov	r3, r2
 80024ee:	eb42 0303 	adc.w	r3, r2, r3
 80024f2:	657b      	str	r3, [r7, #84]	; 0x54
 80024f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024fc:	f7fd fee0 	bl	80002c0 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4b61      	ldr	r3, [pc, #388]	; (800268c <UART_SetConfig+0x2d4>)
 8002506:	fba3 2302 	umull	r2, r3, r3, r2
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	011c      	lsls	r4, r3, #4
 800250e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002512:	2200      	movs	r2, #0
 8002514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800251c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002520:	4642      	mov	r2, r8
 8002522:	464b      	mov	r3, r9
 8002524:	1891      	adds	r1, r2, r2
 8002526:	64b9      	str	r1, [r7, #72]	; 0x48
 8002528:	415b      	adcs	r3, r3
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800252c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002530:	4641      	mov	r1, r8
 8002532:	eb12 0a01 	adds.w	sl, r2, r1
 8002536:	4649      	mov	r1, r9
 8002538:	eb43 0b01 	adc.w	fp, r3, r1
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800254c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002550:	4692      	mov	sl, r2
 8002552:	469b      	mov	fp, r3
 8002554:	4643      	mov	r3, r8
 8002556:	eb1a 0303 	adds.w	r3, sl, r3
 800255a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800255e:	464b      	mov	r3, r9
 8002560:	eb4b 0303 	adc.w	r3, fp, r3
 8002564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800257c:	460b      	mov	r3, r1
 800257e:	18db      	adds	r3, r3, r3
 8002580:	643b      	str	r3, [r7, #64]	; 0x40
 8002582:	4613      	mov	r3, r2
 8002584:	eb42 0303 	adc.w	r3, r2, r3
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
 800258a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800258e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002592:	f7fd fe95 	bl	80002c0 <__aeabi_uldivmod>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4611      	mov	r1, r2
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <UART_SetConfig+0x2d4>)
 800259e:	fba3 2301 	umull	r2, r3, r3, r1
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2264      	movs	r2, #100	; 0x64
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	1acb      	subs	r3, r1, r3
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <UART_SetConfig+0x2d4>)
 80025b4:	fba3 2302 	umull	r2, r3, r3, r2
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025c0:	441c      	add	r4, r3
 80025c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025d4:	4642      	mov	r2, r8
 80025d6:	464b      	mov	r3, r9
 80025d8:	1891      	adds	r1, r2, r2
 80025da:	63b9      	str	r1, [r7, #56]	; 0x38
 80025dc:	415b      	adcs	r3, r3
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025e4:	4641      	mov	r1, r8
 80025e6:	1851      	adds	r1, r2, r1
 80025e8:	6339      	str	r1, [r7, #48]	; 0x30
 80025ea:	4649      	mov	r1, r9
 80025ec:	414b      	adcs	r3, r1
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025fc:	4659      	mov	r1, fp
 80025fe:	00cb      	lsls	r3, r1, #3
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002606:	4651      	mov	r1, sl
 8002608:	00ca      	lsls	r2, r1, #3
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	4603      	mov	r3, r0
 8002610:	4642      	mov	r2, r8
 8002612:	189b      	adds	r3, r3, r2
 8002614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002618:	464b      	mov	r3, r9
 800261a:	460a      	mov	r2, r1
 800261c:	eb42 0303 	adc.w	r3, r2, r3
 8002620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002638:	460b      	mov	r3, r1
 800263a:	18db      	adds	r3, r3, r3
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
 800263e:	4613      	mov	r3, r2
 8002640:	eb42 0303 	adc.w	r3, r2, r3
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800264a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800264e:	f7fd fe37 	bl	80002c0 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <UART_SetConfig+0x2d4>)
 8002658:	fba3 1302 	umull	r1, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2164      	movs	r1, #100	; 0x64
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <UART_SetConfig+0x2d4>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	f003 0207 	and.w	r2, r3, #7
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4422      	add	r2, r4
 800267e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002680:	e105      	b.n	800288e <UART_SetConfig+0x4d6>
 8002682:	bf00      	nop
 8002684:	40011000 	.word	0x40011000
 8002688:	40011400 	.word	0x40011400
 800268c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002694:	2200      	movs	r2, #0
 8002696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800269a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800269e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026a2:	4642      	mov	r2, r8
 80026a4:	464b      	mov	r3, r9
 80026a6:	1891      	adds	r1, r2, r2
 80026a8:	6239      	str	r1, [r7, #32]
 80026aa:	415b      	adcs	r3, r3
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026b2:	4641      	mov	r1, r8
 80026b4:	1854      	adds	r4, r2, r1
 80026b6:	4649      	mov	r1, r9
 80026b8:	eb43 0501 	adc.w	r5, r3, r1
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	00eb      	lsls	r3, r5, #3
 80026c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ca:	00e2      	lsls	r2, r4, #3
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	18e3      	adds	r3, r4, r3
 80026d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026d8:	464b      	mov	r3, r9
 80026da:	eb45 0303 	adc.w	r3, r5, r3
 80026de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026fe:	4629      	mov	r1, r5
 8002700:	008b      	lsls	r3, r1, #2
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002708:	4621      	mov	r1, r4
 800270a:	008a      	lsls	r2, r1, #2
 800270c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002710:	f7fd fdd6 	bl	80002c0 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <UART_SetConfig+0x4e4>)
 800271a:	fba3 2302 	umull	r2, r3, r3, r2
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	011c      	lsls	r4, r3, #4
 8002722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002726:	2200      	movs	r2, #0
 8002728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800272c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002734:	4642      	mov	r2, r8
 8002736:	464b      	mov	r3, r9
 8002738:	1891      	adds	r1, r2, r2
 800273a:	61b9      	str	r1, [r7, #24]
 800273c:	415b      	adcs	r3, r3
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002744:	4641      	mov	r1, r8
 8002746:	1851      	adds	r1, r2, r1
 8002748:	6139      	str	r1, [r7, #16]
 800274a:	4649      	mov	r1, r9
 800274c:	414b      	adcs	r3, r1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800275c:	4659      	mov	r1, fp
 800275e:	00cb      	lsls	r3, r1, #3
 8002760:	4651      	mov	r1, sl
 8002762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002766:	4651      	mov	r1, sl
 8002768:	00ca      	lsls	r2, r1, #3
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	4603      	mov	r3, r0
 8002770:	4642      	mov	r2, r8
 8002772:	189b      	adds	r3, r3, r2
 8002774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002778:	464b      	mov	r3, r9
 800277a:	460a      	mov	r2, r1
 800277c:	eb42 0303 	adc.w	r3, r2, r3
 8002780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	67bb      	str	r3, [r7, #120]	; 0x78
 800278e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800279c:	4649      	mov	r1, r9
 800279e:	008b      	lsls	r3, r1, #2
 80027a0:	4641      	mov	r1, r8
 80027a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a6:	4641      	mov	r1, r8
 80027a8:	008a      	lsls	r2, r1, #2
 80027aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ae:	f7fd fd87 	bl	80002c0 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <UART_SetConfig+0x4e4>)
 80027b8:	fba3 1302 	umull	r1, r3, r3, r2
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	2164      	movs	r1, #100	; 0x64
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	3332      	adds	r3, #50	; 0x32
 80027ca:	4a34      	ldr	r2, [pc, #208]	; (800289c <UART_SetConfig+0x4e4>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d6:	441c      	add	r4, r3
 80027d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027dc:	2200      	movs	r2, #0
 80027de:	673b      	str	r3, [r7, #112]	; 0x70
 80027e0:	677a      	str	r2, [r7, #116]	; 0x74
 80027e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	415b      	adcs	r3, r3
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027f6:	4641      	mov	r1, r8
 80027f8:	1851      	adds	r1, r2, r1
 80027fa:	6039      	str	r1, [r7, #0]
 80027fc:	4649      	mov	r1, r9
 80027fe:	414b      	adcs	r3, r1
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800280e:	4659      	mov	r1, fp
 8002810:	00cb      	lsls	r3, r1, #3
 8002812:	4651      	mov	r1, sl
 8002814:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002818:	4651      	mov	r1, sl
 800281a:	00ca      	lsls	r2, r1, #3
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	4603      	mov	r3, r0
 8002822:	4642      	mov	r2, r8
 8002824:	189b      	adds	r3, r3, r2
 8002826:	66bb      	str	r3, [r7, #104]	; 0x68
 8002828:	464b      	mov	r3, r9
 800282a:	460a      	mov	r2, r1
 800282c:	eb42 0303 	adc.w	r3, r2, r3
 8002830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	663b      	str	r3, [r7, #96]	; 0x60
 800283c:	667a      	str	r2, [r7, #100]	; 0x64
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800284a:	4649      	mov	r1, r9
 800284c:	008b      	lsls	r3, r1, #2
 800284e:	4641      	mov	r1, r8
 8002850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002854:	4641      	mov	r1, r8
 8002856:	008a      	lsls	r2, r1, #2
 8002858:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800285c:	f7fd fd30 	bl	80002c0 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <UART_SetConfig+0x4e4>)
 8002866:	fba3 1302 	umull	r1, r3, r3, r2
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2164      	movs	r1, #100	; 0x64
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	3332      	adds	r3, #50	; 0x32
 8002878:	4a08      	ldr	r2, [pc, #32]	; (800289c <UART_SetConfig+0x4e4>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4422      	add	r2, r4
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002894:	46bd      	mov	sp, r7
 8002896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289a:	bf00      	nop
 800289c:	51eb851f 	.word	0x51eb851f

080028a0 <__errno>:
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <__errno+0x8>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2000000c 	.word	0x2000000c

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4d0d      	ldr	r5, [pc, #52]	; (80028e4 <__libc_init_array+0x38>)
 80028b0:	4c0d      	ldr	r4, [pc, #52]	; (80028e8 <__libc_init_array+0x3c>)
 80028b2:	1b64      	subs	r4, r4, r5
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	2600      	movs	r6, #0
 80028b8:	42a6      	cmp	r6, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	4d0b      	ldr	r5, [pc, #44]	; (80028ec <__libc_init_array+0x40>)
 80028be:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <__libc_init_array+0x44>)
 80028c0:	f000 fca2 	bl	8003208 <_init>
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	2600      	movs	r6, #0
 80028ca:	42a6      	cmp	r6, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d4:	4798      	blx	r3
 80028d6:	3601      	adds	r6, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	f855 3b04 	ldr.w	r3, [r5], #4
 80028de:	4798      	blx	r3
 80028e0:	3601      	adds	r6, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	08003318 	.word	0x08003318
 80028e8:	08003318 	.word	0x08003318
 80028ec:	08003318 	.word	0x08003318
 80028f0:	0800331c 	.word	0x0800331c

080028f4 <memset>:
 80028f4:	4402      	add	r2, r0
 80028f6:	4603      	mov	r3, r0
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <sniprintf>:
 8002904:	b40c      	push	{r2, r3}
 8002906:	b530      	push	{r4, r5, lr}
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <sniprintf+0x64>)
 800290a:	1e0c      	subs	r4, r1, #0
 800290c:	681d      	ldr	r5, [r3, #0]
 800290e:	b09d      	sub	sp, #116	; 0x74
 8002910:	da08      	bge.n	8002924 <sniprintf+0x20>
 8002912:	238b      	movs	r3, #139	; 0x8b
 8002914:	602b      	str	r3, [r5, #0]
 8002916:	f04f 30ff 	mov.w	r0, #4294967295
 800291a:	b01d      	add	sp, #116	; 0x74
 800291c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002920:	b002      	add	sp, #8
 8002922:	4770      	bx	lr
 8002924:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002928:	f8ad 3014 	strh.w	r3, [sp, #20]
 800292c:	bf14      	ite	ne
 800292e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002932:	4623      	moveq	r3, r4
 8002934:	9304      	str	r3, [sp, #16]
 8002936:	9307      	str	r3, [sp, #28]
 8002938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800293c:	9002      	str	r0, [sp, #8]
 800293e:	9006      	str	r0, [sp, #24]
 8002940:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002944:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002946:	ab21      	add	r3, sp, #132	; 0x84
 8002948:	a902      	add	r1, sp, #8
 800294a:	4628      	mov	r0, r5
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	f000 f869 	bl	8002a24 <_svfiprintf_r>
 8002952:	1c43      	adds	r3, r0, #1
 8002954:	bfbc      	itt	lt
 8002956:	238b      	movlt	r3, #139	; 0x8b
 8002958:	602b      	strlt	r3, [r5, #0]
 800295a:	2c00      	cmp	r4, #0
 800295c:	d0dd      	beq.n	800291a <sniprintf+0x16>
 800295e:	9b02      	ldr	r3, [sp, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e7d9      	b.n	800291a <sniprintf+0x16>
 8002966:	bf00      	nop
 8002968:	2000000c 	.word	0x2000000c

0800296c <__ssputs_r>:
 800296c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002970:	688e      	ldr	r6, [r1, #8]
 8002972:	429e      	cmp	r6, r3
 8002974:	4682      	mov	sl, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4690      	mov	r8, r2
 800297a:	461f      	mov	r7, r3
 800297c:	d838      	bhi.n	80029f0 <__ssputs_r+0x84>
 800297e:	898a      	ldrh	r2, [r1, #12]
 8002980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002984:	d032      	beq.n	80029ec <__ssputs_r+0x80>
 8002986:	6825      	ldr	r5, [r4, #0]
 8002988:	6909      	ldr	r1, [r1, #16]
 800298a:	eba5 0901 	sub.w	r9, r5, r1
 800298e:	6965      	ldr	r5, [r4, #20]
 8002990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002998:	3301      	adds	r3, #1
 800299a:	444b      	add	r3, r9
 800299c:	106d      	asrs	r5, r5, #1
 800299e:	429d      	cmp	r5, r3
 80029a0:	bf38      	it	cc
 80029a2:	461d      	movcc	r5, r3
 80029a4:	0553      	lsls	r3, r2, #21
 80029a6:	d531      	bpl.n	8002a0c <__ssputs_r+0xa0>
 80029a8:	4629      	mov	r1, r5
 80029aa:	f000 fb63 	bl	8003074 <_malloc_r>
 80029ae:	4606      	mov	r6, r0
 80029b0:	b950      	cbnz	r0, 80029c8 <__ssputs_r+0x5c>
 80029b2:	230c      	movs	r3, #12
 80029b4:	f8ca 3000 	str.w	r3, [sl]
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029be:	81a3      	strh	r3, [r4, #12]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c8:	6921      	ldr	r1, [r4, #16]
 80029ca:	464a      	mov	r2, r9
 80029cc:	f000 fabe 	bl	8002f4c <memcpy>
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029da:	81a3      	strh	r3, [r4, #12]
 80029dc:	6126      	str	r6, [r4, #16]
 80029de:	6165      	str	r5, [r4, #20]
 80029e0:	444e      	add	r6, r9
 80029e2:	eba5 0509 	sub.w	r5, r5, r9
 80029e6:	6026      	str	r6, [r4, #0]
 80029e8:	60a5      	str	r5, [r4, #8]
 80029ea:	463e      	mov	r6, r7
 80029ec:	42be      	cmp	r6, r7
 80029ee:	d900      	bls.n	80029f2 <__ssputs_r+0x86>
 80029f0:	463e      	mov	r6, r7
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	4632      	mov	r2, r6
 80029f6:	4641      	mov	r1, r8
 80029f8:	f000 fab6 	bl	8002f68 <memmove>
 80029fc:	68a3      	ldr	r3, [r4, #8]
 80029fe:	1b9b      	subs	r3, r3, r6
 8002a00:	60a3      	str	r3, [r4, #8]
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	4433      	add	r3, r6
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e7db      	b.n	80029c4 <__ssputs_r+0x58>
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	f000 fba5 	bl	800315c <_realloc_r>
 8002a12:	4606      	mov	r6, r0
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d1e1      	bne.n	80029dc <__ssputs_r+0x70>
 8002a18:	6921      	ldr	r1, [r4, #16]
 8002a1a:	4650      	mov	r0, sl
 8002a1c:	f000 fabe 	bl	8002f9c <_free_r>
 8002a20:	e7c7      	b.n	80029b2 <__ssputs_r+0x46>
	...

08002a24 <_svfiprintf_r>:
 8002a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a28:	4698      	mov	r8, r3
 8002a2a:	898b      	ldrh	r3, [r1, #12]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	b09d      	sub	sp, #116	; 0x74
 8002a30:	4607      	mov	r7, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	4614      	mov	r4, r2
 8002a36:	d50e      	bpl.n	8002a56 <_svfiprintf_r+0x32>
 8002a38:	690b      	ldr	r3, [r1, #16]
 8002a3a:	b963      	cbnz	r3, 8002a56 <_svfiprintf_r+0x32>
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	f000 fb19 	bl	8003074 <_malloc_r>
 8002a42:	6028      	str	r0, [r5, #0]
 8002a44:	6128      	str	r0, [r5, #16]
 8002a46:	b920      	cbnz	r0, 8002a52 <_svfiprintf_r+0x2e>
 8002a48:	230c      	movs	r3, #12
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	e0d1      	b.n	8002bf6 <_svfiprintf_r+0x1d2>
 8002a52:	2340      	movs	r3, #64	; 0x40
 8002a54:	616b      	str	r3, [r5, #20]
 8002a56:	2300      	movs	r3, #0
 8002a58:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a60:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a64:	2330      	movs	r3, #48	; 0x30
 8002a66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c10 <_svfiprintf_r+0x1ec>
 8002a6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a6e:	f04f 0901 	mov.w	r9, #1
 8002a72:	4623      	mov	r3, r4
 8002a74:	469a      	mov	sl, r3
 8002a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a7a:	b10a      	cbz	r2, 8002a80 <_svfiprintf_r+0x5c>
 8002a7c:	2a25      	cmp	r2, #37	; 0x25
 8002a7e:	d1f9      	bne.n	8002a74 <_svfiprintf_r+0x50>
 8002a80:	ebba 0b04 	subs.w	fp, sl, r4
 8002a84:	d00b      	beq.n	8002a9e <_svfiprintf_r+0x7a>
 8002a86:	465b      	mov	r3, fp
 8002a88:	4622      	mov	r2, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	f7ff ff6d 	bl	800296c <__ssputs_r>
 8002a92:	3001      	adds	r0, #1
 8002a94:	f000 80aa 	beq.w	8002bec <_svfiprintf_r+0x1c8>
 8002a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a9a:	445a      	add	r2, fp
 8002a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8002a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80a2 	beq.w	8002bec <_svfiprintf_r+0x1c8>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ab2:	f10a 0a01 	add.w	sl, sl, #1
 8002ab6:	9304      	str	r3, [sp, #16]
 8002ab8:	9307      	str	r3, [sp, #28]
 8002aba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002abe:	931a      	str	r3, [sp, #104]	; 0x68
 8002ac0:	4654      	mov	r4, sl
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac8:	4851      	ldr	r0, [pc, #324]	; (8002c10 <_svfiprintf_r+0x1ec>)
 8002aca:	f7fd fba9 	bl	8000220 <memchr>
 8002ace:	9a04      	ldr	r2, [sp, #16]
 8002ad0:	b9d8      	cbnz	r0, 8002b0a <_svfiprintf_r+0xe6>
 8002ad2:	06d0      	lsls	r0, r2, #27
 8002ad4:	bf44      	itt	mi
 8002ad6:	2320      	movmi	r3, #32
 8002ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002adc:	0711      	lsls	r1, r2, #28
 8002ade:	bf44      	itt	mi
 8002ae0:	232b      	movmi	r3, #43	; 0x2b
 8002ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8002aea:	2b2a      	cmp	r3, #42	; 0x2a
 8002aec:	d015      	beq.n	8002b1a <_svfiprintf_r+0xf6>
 8002aee:	9a07      	ldr	r2, [sp, #28]
 8002af0:	4654      	mov	r4, sl
 8002af2:	2000      	movs	r0, #0
 8002af4:	f04f 0c0a 	mov.w	ip, #10
 8002af8:	4621      	mov	r1, r4
 8002afa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002afe:	3b30      	subs	r3, #48	; 0x30
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d94e      	bls.n	8002ba2 <_svfiprintf_r+0x17e>
 8002b04:	b1b0      	cbz	r0, 8002b34 <_svfiprintf_r+0x110>
 8002b06:	9207      	str	r2, [sp, #28]
 8002b08:	e014      	b.n	8002b34 <_svfiprintf_r+0x110>
 8002b0a:	eba0 0308 	sub.w	r3, r0, r8
 8002b0e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	9304      	str	r3, [sp, #16]
 8002b16:	46a2      	mov	sl, r4
 8002b18:	e7d2      	b.n	8002ac0 <_svfiprintf_r+0x9c>
 8002b1a:	9b03      	ldr	r3, [sp, #12]
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	9103      	str	r1, [sp, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bfbb      	ittet	lt
 8002b26:	425b      	neglt	r3, r3
 8002b28:	f042 0202 	orrlt.w	r2, r2, #2
 8002b2c:	9307      	strge	r3, [sp, #28]
 8002b2e:	9307      	strlt	r3, [sp, #28]
 8002b30:	bfb8      	it	lt
 8002b32:	9204      	strlt	r2, [sp, #16]
 8002b34:	7823      	ldrb	r3, [r4, #0]
 8002b36:	2b2e      	cmp	r3, #46	; 0x2e
 8002b38:	d10c      	bne.n	8002b54 <_svfiprintf_r+0x130>
 8002b3a:	7863      	ldrb	r3, [r4, #1]
 8002b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b3e:	d135      	bne.n	8002bac <_svfiprintf_r+0x188>
 8002b40:	9b03      	ldr	r3, [sp, #12]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	9203      	str	r2, [sp, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bfb8      	it	lt
 8002b4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b50:	3402      	adds	r4, #2
 8002b52:	9305      	str	r3, [sp, #20]
 8002b54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c20 <_svfiprintf_r+0x1fc>
 8002b58:	7821      	ldrb	r1, [r4, #0]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4650      	mov	r0, sl
 8002b5e:	f7fd fb5f 	bl	8000220 <memchr>
 8002b62:	b140      	cbz	r0, 8002b76 <_svfiprintf_r+0x152>
 8002b64:	2340      	movs	r3, #64	; 0x40
 8002b66:	eba0 000a 	sub.w	r0, r0, sl
 8002b6a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b6e:	9b04      	ldr	r3, [sp, #16]
 8002b70:	4303      	orrs	r3, r0
 8002b72:	3401      	adds	r4, #1
 8002b74:	9304      	str	r3, [sp, #16]
 8002b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b7a:	4826      	ldr	r0, [pc, #152]	; (8002c14 <_svfiprintf_r+0x1f0>)
 8002b7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b80:	2206      	movs	r2, #6
 8002b82:	f7fd fb4d 	bl	8000220 <memchr>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d038      	beq.n	8002bfc <_svfiprintf_r+0x1d8>
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <_svfiprintf_r+0x1f4>)
 8002b8c:	bb1b      	cbnz	r3, 8002bd6 <_svfiprintf_r+0x1b2>
 8002b8e:	9b03      	ldr	r3, [sp, #12]
 8002b90:	3307      	adds	r3, #7
 8002b92:	f023 0307 	bic.w	r3, r3, #7
 8002b96:	3308      	adds	r3, #8
 8002b98:	9303      	str	r3, [sp, #12]
 8002b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b9c:	4433      	add	r3, r6
 8002b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002ba0:	e767      	b.n	8002a72 <_svfiprintf_r+0x4e>
 8002ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	2001      	movs	r0, #1
 8002baa:	e7a5      	b.n	8002af8 <_svfiprintf_r+0xd4>
 8002bac:	2300      	movs	r3, #0
 8002bae:	3401      	adds	r4, #1
 8002bb0:	9305      	str	r3, [sp, #20]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f04f 0c0a 	mov.w	ip, #10
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bbe:	3a30      	subs	r2, #48	; 0x30
 8002bc0:	2a09      	cmp	r2, #9
 8002bc2:	d903      	bls.n	8002bcc <_svfiprintf_r+0x1a8>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0c5      	beq.n	8002b54 <_svfiprintf_r+0x130>
 8002bc8:	9105      	str	r1, [sp, #20]
 8002bca:	e7c3      	b.n	8002b54 <_svfiprintf_r+0x130>
 8002bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e7f0      	b.n	8002bb8 <_svfiprintf_r+0x194>
 8002bd6:	ab03      	add	r3, sp, #12
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	462a      	mov	r2, r5
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <_svfiprintf_r+0x1f8>)
 8002bde:	a904      	add	r1, sp, #16
 8002be0:	4638      	mov	r0, r7
 8002be2:	f3af 8000 	nop.w
 8002be6:	1c42      	adds	r2, r0, #1
 8002be8:	4606      	mov	r6, r0
 8002bea:	d1d6      	bne.n	8002b9a <_svfiprintf_r+0x176>
 8002bec:	89ab      	ldrh	r3, [r5, #12]
 8002bee:	065b      	lsls	r3, r3, #25
 8002bf0:	f53f af2c 	bmi.w	8002a4c <_svfiprintf_r+0x28>
 8002bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bf6:	b01d      	add	sp, #116	; 0x74
 8002bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bfc:	ab03      	add	r3, sp, #12
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	462a      	mov	r2, r5
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <_svfiprintf_r+0x1f8>)
 8002c04:	a904      	add	r1, sp, #16
 8002c06:	4638      	mov	r0, r7
 8002c08:	f000 f87a 	bl	8002d00 <_printf_i>
 8002c0c:	e7eb      	b.n	8002be6 <_svfiprintf_r+0x1c2>
 8002c0e:	bf00      	nop
 8002c10:	080032dc 	.word	0x080032dc
 8002c14:	080032e6 	.word	0x080032e6
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	0800296d 	.word	0x0800296d
 8002c20:	080032e2 	.word	0x080032e2

08002c24 <_printf_common>:
 8002c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c28:	4616      	mov	r6, r2
 8002c2a:	4699      	mov	r9, r3
 8002c2c:	688a      	ldr	r2, [r1, #8]
 8002c2e:	690b      	ldr	r3, [r1, #16]
 8002c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bfb8      	it	lt
 8002c38:	4613      	movlt	r3, r2
 8002c3a:	6033      	str	r3, [r6, #0]
 8002c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c40:	4607      	mov	r7, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	b10a      	cbz	r2, 8002c4a <_printf_common+0x26>
 8002c46:	3301      	adds	r3, #1
 8002c48:	6033      	str	r3, [r6, #0]
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	0699      	lsls	r1, r3, #26
 8002c4e:	bf42      	ittt	mi
 8002c50:	6833      	ldrmi	r3, [r6, #0]
 8002c52:	3302      	addmi	r3, #2
 8002c54:	6033      	strmi	r3, [r6, #0]
 8002c56:	6825      	ldr	r5, [r4, #0]
 8002c58:	f015 0506 	ands.w	r5, r5, #6
 8002c5c:	d106      	bne.n	8002c6c <_printf_common+0x48>
 8002c5e:	f104 0a19 	add.w	sl, r4, #25
 8002c62:	68e3      	ldr	r3, [r4, #12]
 8002c64:	6832      	ldr	r2, [r6, #0]
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	42ab      	cmp	r3, r5
 8002c6a:	dc26      	bgt.n	8002cba <_printf_common+0x96>
 8002c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c70:	1e13      	subs	r3, r2, #0
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	bf18      	it	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	0692      	lsls	r2, r2, #26
 8002c7a:	d42b      	bmi.n	8002cd4 <_printf_common+0xb0>
 8002c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c80:	4649      	mov	r1, r9
 8002c82:	4638      	mov	r0, r7
 8002c84:	47c0      	blx	r8
 8002c86:	3001      	adds	r0, #1
 8002c88:	d01e      	beq.n	8002cc8 <_printf_common+0xa4>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	68e5      	ldr	r5, [r4, #12]
 8002c8e:	6832      	ldr	r2, [r6, #0]
 8002c90:	f003 0306 	and.w	r3, r3, #6
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	bf08      	it	eq
 8002c98:	1aad      	subeq	r5, r5, r2
 8002c9a:	68a3      	ldr	r3, [r4, #8]
 8002c9c:	6922      	ldr	r2, [r4, #16]
 8002c9e:	bf0c      	ite	eq
 8002ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ca4:	2500      	movne	r5, #0
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	bfc4      	itt	gt
 8002caa:	1a9b      	subgt	r3, r3, r2
 8002cac:	18ed      	addgt	r5, r5, r3
 8002cae:	2600      	movs	r6, #0
 8002cb0:	341a      	adds	r4, #26
 8002cb2:	42b5      	cmp	r5, r6
 8002cb4:	d11a      	bne.n	8002cec <_printf_common+0xc8>
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	e008      	b.n	8002ccc <_printf_common+0xa8>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4652      	mov	r2, sl
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	47c0      	blx	r8
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d103      	bne.n	8002cd0 <_printf_common+0xac>
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd0:	3501      	adds	r5, #1
 8002cd2:	e7c6      	b.n	8002c62 <_printf_common+0x3e>
 8002cd4:	18e1      	adds	r1, r4, r3
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	2030      	movs	r0, #48	; 0x30
 8002cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cde:	4422      	add	r2, r4
 8002ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ce8:	3302      	adds	r3, #2
 8002cea:	e7c7      	b.n	8002c7c <_printf_common+0x58>
 8002cec:	2301      	movs	r3, #1
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	47c0      	blx	r8
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d0e6      	beq.n	8002cc8 <_printf_common+0xa4>
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7d9      	b.n	8002cb2 <_printf_common+0x8e>
	...

08002d00 <_printf_i>:
 8002d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	7e0f      	ldrb	r7, [r1, #24]
 8002d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d08:	2f78      	cmp	r7, #120	; 0x78
 8002d0a:	4691      	mov	r9, r2
 8002d0c:	4680      	mov	r8, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	469a      	mov	sl, r3
 8002d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d16:	d807      	bhi.n	8002d28 <_printf_i+0x28>
 8002d18:	2f62      	cmp	r7, #98	; 0x62
 8002d1a:	d80a      	bhi.n	8002d32 <_printf_i+0x32>
 8002d1c:	2f00      	cmp	r7, #0
 8002d1e:	f000 80d8 	beq.w	8002ed2 <_printf_i+0x1d2>
 8002d22:	2f58      	cmp	r7, #88	; 0x58
 8002d24:	f000 80a3 	beq.w	8002e6e <_printf_i+0x16e>
 8002d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d30:	e03a      	b.n	8002da8 <_printf_i+0xa8>
 8002d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d36:	2b15      	cmp	r3, #21
 8002d38:	d8f6      	bhi.n	8002d28 <_printf_i+0x28>
 8002d3a:	a101      	add	r1, pc, #4	; (adr r1, 8002d40 <_printf_i+0x40>)
 8002d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002dad 	.word	0x08002dad
 8002d48:	08002d29 	.word	0x08002d29
 8002d4c:	08002d29 	.word	0x08002d29
 8002d50:	08002d29 	.word	0x08002d29
 8002d54:	08002d29 	.word	0x08002d29
 8002d58:	08002dad 	.word	0x08002dad
 8002d5c:	08002d29 	.word	0x08002d29
 8002d60:	08002d29 	.word	0x08002d29
 8002d64:	08002d29 	.word	0x08002d29
 8002d68:	08002d29 	.word	0x08002d29
 8002d6c:	08002eb9 	.word	0x08002eb9
 8002d70:	08002ddd 	.word	0x08002ddd
 8002d74:	08002e9b 	.word	0x08002e9b
 8002d78:	08002d29 	.word	0x08002d29
 8002d7c:	08002d29 	.word	0x08002d29
 8002d80:	08002edb 	.word	0x08002edb
 8002d84:	08002d29 	.word	0x08002d29
 8002d88:	08002ddd 	.word	0x08002ddd
 8002d8c:	08002d29 	.word	0x08002d29
 8002d90:	08002d29 	.word	0x08002d29
 8002d94:	08002ea3 	.word	0x08002ea3
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	602a      	str	r2, [r5, #0]
 8002da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0a3      	b.n	8002ef4 <_printf_i+0x1f4>
 8002dac:	6820      	ldr	r0, [r4, #0]
 8002dae:	6829      	ldr	r1, [r5, #0]
 8002db0:	0606      	lsls	r6, r0, #24
 8002db2:	f101 0304 	add.w	r3, r1, #4
 8002db6:	d50a      	bpl.n	8002dce <_printf_i+0xce>
 8002db8:	680e      	ldr	r6, [r1, #0]
 8002dba:	602b      	str	r3, [r5, #0]
 8002dbc:	2e00      	cmp	r6, #0
 8002dbe:	da03      	bge.n	8002dc8 <_printf_i+0xc8>
 8002dc0:	232d      	movs	r3, #45	; 0x2d
 8002dc2:	4276      	negs	r6, r6
 8002dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc8:	485e      	ldr	r0, [pc, #376]	; (8002f44 <_printf_i+0x244>)
 8002dca:	230a      	movs	r3, #10
 8002dcc:	e019      	b.n	8002e02 <_printf_i+0x102>
 8002dce:	680e      	ldr	r6, [r1, #0]
 8002dd0:	602b      	str	r3, [r5, #0]
 8002dd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dd6:	bf18      	it	ne
 8002dd8:	b236      	sxthne	r6, r6
 8002dda:	e7ef      	b.n	8002dbc <_printf_i+0xbc>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	1d19      	adds	r1, r3, #4
 8002de2:	6029      	str	r1, [r5, #0]
 8002de4:	0601      	lsls	r1, r0, #24
 8002de6:	d501      	bpl.n	8002dec <_printf_i+0xec>
 8002de8:	681e      	ldr	r6, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <_printf_i+0xf2>
 8002dec:	0646      	lsls	r6, r0, #25
 8002dee:	d5fb      	bpl.n	8002de8 <_printf_i+0xe8>
 8002df0:	881e      	ldrh	r6, [r3, #0]
 8002df2:	4854      	ldr	r0, [pc, #336]	; (8002f44 <_printf_i+0x244>)
 8002df4:	2f6f      	cmp	r7, #111	; 0x6f
 8002df6:	bf0c      	ite	eq
 8002df8:	2308      	moveq	r3, #8
 8002dfa:	230a      	movne	r3, #10
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e02:	6865      	ldr	r5, [r4, #4]
 8002e04:	60a5      	str	r5, [r4, #8]
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	bfa2      	ittt	ge
 8002e0a:	6821      	ldrge	r1, [r4, #0]
 8002e0c:	f021 0104 	bicge.w	r1, r1, #4
 8002e10:	6021      	strge	r1, [r4, #0]
 8002e12:	b90e      	cbnz	r6, 8002e18 <_printf_i+0x118>
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	d04d      	beq.n	8002eb4 <_printf_i+0x1b4>
 8002e18:	4615      	mov	r5, r2
 8002e1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e1e:	fb03 6711 	mls	r7, r3, r1, r6
 8002e22:	5dc7      	ldrb	r7, [r0, r7]
 8002e24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e28:	4637      	mov	r7, r6
 8002e2a:	42bb      	cmp	r3, r7
 8002e2c:	460e      	mov	r6, r1
 8002e2e:	d9f4      	bls.n	8002e1a <_printf_i+0x11a>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d10b      	bne.n	8002e4c <_printf_i+0x14c>
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	07de      	lsls	r6, r3, #31
 8002e38:	d508      	bpl.n	8002e4c <_printf_i+0x14c>
 8002e3a:	6923      	ldr	r3, [r4, #16]
 8002e3c:	6861      	ldr	r1, [r4, #4]
 8002e3e:	4299      	cmp	r1, r3
 8002e40:	bfde      	ittt	le
 8002e42:	2330      	movle	r3, #48	; 0x30
 8002e44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e4c:	1b52      	subs	r2, r2, r5
 8002e4e:	6122      	str	r2, [r4, #16]
 8002e50:	f8cd a000 	str.w	sl, [sp]
 8002e54:	464b      	mov	r3, r9
 8002e56:	aa03      	add	r2, sp, #12
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4640      	mov	r0, r8
 8002e5c:	f7ff fee2 	bl	8002c24 <_printf_common>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d14c      	bne.n	8002efe <_printf_i+0x1fe>
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	b004      	add	sp, #16
 8002e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e6e:	4835      	ldr	r0, [pc, #212]	; (8002f44 <_printf_i+0x244>)
 8002e70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e74:	6829      	ldr	r1, [r5, #0]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e7c:	6029      	str	r1, [r5, #0]
 8002e7e:	061d      	lsls	r5, r3, #24
 8002e80:	d514      	bpl.n	8002eac <_printf_i+0x1ac>
 8002e82:	07df      	lsls	r7, r3, #31
 8002e84:	bf44      	itt	mi
 8002e86:	f043 0320 	orrmi.w	r3, r3, #32
 8002e8a:	6023      	strmi	r3, [r4, #0]
 8002e8c:	b91e      	cbnz	r6, 8002e96 <_printf_i+0x196>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	f023 0320 	bic.w	r3, r3, #32
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	2310      	movs	r3, #16
 8002e98:	e7b0      	b.n	8002dfc <_printf_i+0xfc>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	f043 0320 	orr.w	r3, r3, #32
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	2378      	movs	r3, #120	; 0x78
 8002ea4:	4828      	ldr	r0, [pc, #160]	; (8002f48 <_printf_i+0x248>)
 8002ea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eaa:	e7e3      	b.n	8002e74 <_printf_i+0x174>
 8002eac:	0659      	lsls	r1, r3, #25
 8002eae:	bf48      	it	mi
 8002eb0:	b2b6      	uxthmi	r6, r6
 8002eb2:	e7e6      	b.n	8002e82 <_printf_i+0x182>
 8002eb4:	4615      	mov	r5, r2
 8002eb6:	e7bb      	b.n	8002e30 <_printf_i+0x130>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	6826      	ldr	r6, [r4, #0]
 8002ebc:	6961      	ldr	r1, [r4, #20]
 8002ebe:	1d18      	adds	r0, r3, #4
 8002ec0:	6028      	str	r0, [r5, #0]
 8002ec2:	0635      	lsls	r5, r6, #24
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	d501      	bpl.n	8002ecc <_printf_i+0x1cc>
 8002ec8:	6019      	str	r1, [r3, #0]
 8002eca:	e002      	b.n	8002ed2 <_printf_i+0x1d2>
 8002ecc:	0670      	lsls	r0, r6, #25
 8002ece:	d5fb      	bpl.n	8002ec8 <_printf_i+0x1c8>
 8002ed0:	8019      	strh	r1, [r3, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	6123      	str	r3, [r4, #16]
 8002ed6:	4615      	mov	r5, r2
 8002ed8:	e7ba      	b.n	8002e50 <_printf_i+0x150>
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	1d1a      	adds	r2, r3, #4
 8002ede:	602a      	str	r2, [r5, #0]
 8002ee0:	681d      	ldr	r5, [r3, #0]
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f7fd f99a 	bl	8000220 <memchr>
 8002eec:	b108      	cbz	r0, 8002ef2 <_printf_i+0x1f2>
 8002eee:	1b40      	subs	r0, r0, r5
 8002ef0:	6060      	str	r0, [r4, #4]
 8002ef2:	6863      	ldr	r3, [r4, #4]
 8002ef4:	6123      	str	r3, [r4, #16]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002efc:	e7a8      	b.n	8002e50 <_printf_i+0x150>
 8002efe:	6923      	ldr	r3, [r4, #16]
 8002f00:	462a      	mov	r2, r5
 8002f02:	4649      	mov	r1, r9
 8002f04:	4640      	mov	r0, r8
 8002f06:	47d0      	blx	sl
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d0ab      	beq.n	8002e64 <_printf_i+0x164>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	079b      	lsls	r3, r3, #30
 8002f10:	d413      	bmi.n	8002f3a <_printf_i+0x23a>
 8002f12:	68e0      	ldr	r0, [r4, #12]
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	4298      	cmp	r0, r3
 8002f18:	bfb8      	it	lt
 8002f1a:	4618      	movlt	r0, r3
 8002f1c:	e7a4      	b.n	8002e68 <_printf_i+0x168>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	4632      	mov	r2, r6
 8002f22:	4649      	mov	r1, r9
 8002f24:	4640      	mov	r0, r8
 8002f26:	47d0      	blx	sl
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d09b      	beq.n	8002e64 <_printf_i+0x164>
 8002f2c:	3501      	adds	r5, #1
 8002f2e:	68e3      	ldr	r3, [r4, #12]
 8002f30:	9903      	ldr	r1, [sp, #12]
 8002f32:	1a5b      	subs	r3, r3, r1
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	dcf2      	bgt.n	8002f1e <_printf_i+0x21e>
 8002f38:	e7eb      	b.n	8002f12 <_printf_i+0x212>
 8002f3a:	2500      	movs	r5, #0
 8002f3c:	f104 0619 	add.w	r6, r4, #25
 8002f40:	e7f5      	b.n	8002f2e <_printf_i+0x22e>
 8002f42:	bf00      	nop
 8002f44:	080032ed 	.word	0x080032ed
 8002f48:	080032fe 	.word	0x080032fe

08002f4c <memcpy>:
 8002f4c:	440a      	add	r2, r1
 8002f4e:	4291      	cmp	r1, r2
 8002f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f54:	d100      	bne.n	8002f58 <memcpy+0xc>
 8002f56:	4770      	bx	lr
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f62:	4291      	cmp	r1, r2
 8002f64:	d1f9      	bne.n	8002f5a <memcpy+0xe>
 8002f66:	bd10      	pop	{r4, pc}

08002f68 <memmove>:
 8002f68:	4288      	cmp	r0, r1
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	eb01 0402 	add.w	r4, r1, r2
 8002f70:	d902      	bls.n	8002f78 <memmove+0x10>
 8002f72:	4284      	cmp	r4, r0
 8002f74:	4623      	mov	r3, r4
 8002f76:	d807      	bhi.n	8002f88 <memmove+0x20>
 8002f78:	1e43      	subs	r3, r0, #1
 8002f7a:	42a1      	cmp	r1, r4
 8002f7c:	d008      	beq.n	8002f90 <memmove+0x28>
 8002f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f86:	e7f8      	b.n	8002f7a <memmove+0x12>
 8002f88:	4402      	add	r2, r0
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	428a      	cmp	r2, r1
 8002f8e:	d100      	bne.n	8002f92 <memmove+0x2a>
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f9a:	e7f7      	b.n	8002f8c <memmove+0x24>

08002f9c <_free_r>:
 8002f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	d044      	beq.n	800302c <_free_r+0x90>
 8002fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa6:	9001      	str	r0, [sp, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f1a1 0404 	sub.w	r4, r1, #4
 8002fae:	bfb8      	it	lt
 8002fb0:	18e4      	addlt	r4, r4, r3
 8002fb2:	f000 f913 	bl	80031dc <__malloc_lock>
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <_free_r+0x94>)
 8002fb8:	9801      	ldr	r0, [sp, #4]
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	b933      	cbnz	r3, 8002fcc <_free_r+0x30>
 8002fbe:	6063      	str	r3, [r4, #4]
 8002fc0:	6014      	str	r4, [r2, #0]
 8002fc2:	b003      	add	sp, #12
 8002fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fc8:	f000 b90e 	b.w	80031e8 <__malloc_unlock>
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d908      	bls.n	8002fe2 <_free_r+0x46>
 8002fd0:	6825      	ldr	r5, [r4, #0]
 8002fd2:	1961      	adds	r1, r4, r5
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	bf01      	itttt	eq
 8002fd8:	6819      	ldreq	r1, [r3, #0]
 8002fda:	685b      	ldreq	r3, [r3, #4]
 8002fdc:	1949      	addeq	r1, r1, r5
 8002fde:	6021      	streq	r1, [r4, #0]
 8002fe0:	e7ed      	b.n	8002fbe <_free_r+0x22>
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	b10b      	cbz	r3, 8002fec <_free_r+0x50>
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	d9fa      	bls.n	8002fe2 <_free_r+0x46>
 8002fec:	6811      	ldr	r1, [r2, #0]
 8002fee:	1855      	adds	r5, r2, r1
 8002ff0:	42a5      	cmp	r5, r4
 8002ff2:	d10b      	bne.n	800300c <_free_r+0x70>
 8002ff4:	6824      	ldr	r4, [r4, #0]
 8002ff6:	4421      	add	r1, r4
 8002ff8:	1854      	adds	r4, r2, r1
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	6011      	str	r1, [r2, #0]
 8002ffe:	d1e0      	bne.n	8002fc2 <_free_r+0x26>
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	6053      	str	r3, [r2, #4]
 8003006:	4421      	add	r1, r4
 8003008:	6011      	str	r1, [r2, #0]
 800300a:	e7da      	b.n	8002fc2 <_free_r+0x26>
 800300c:	d902      	bls.n	8003014 <_free_r+0x78>
 800300e:	230c      	movs	r3, #12
 8003010:	6003      	str	r3, [r0, #0]
 8003012:	e7d6      	b.n	8002fc2 <_free_r+0x26>
 8003014:	6825      	ldr	r5, [r4, #0]
 8003016:	1961      	adds	r1, r4, r5
 8003018:	428b      	cmp	r3, r1
 800301a:	bf04      	itt	eq
 800301c:	6819      	ldreq	r1, [r3, #0]
 800301e:	685b      	ldreq	r3, [r3, #4]
 8003020:	6063      	str	r3, [r4, #4]
 8003022:	bf04      	itt	eq
 8003024:	1949      	addeq	r1, r1, r5
 8003026:	6021      	streq	r1, [r4, #0]
 8003028:	6054      	str	r4, [r2, #4]
 800302a:	e7ca      	b.n	8002fc2 <_free_r+0x26>
 800302c:	b003      	add	sp, #12
 800302e:	bd30      	pop	{r4, r5, pc}
 8003030:	20000130 	.word	0x20000130

08003034 <sbrk_aligned>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	4e0e      	ldr	r6, [pc, #56]	; (8003070 <sbrk_aligned+0x3c>)
 8003038:	460c      	mov	r4, r1
 800303a:	6831      	ldr	r1, [r6, #0]
 800303c:	4605      	mov	r5, r0
 800303e:	b911      	cbnz	r1, 8003046 <sbrk_aligned+0x12>
 8003040:	f000 f8bc 	bl	80031bc <_sbrk_r>
 8003044:	6030      	str	r0, [r6, #0]
 8003046:	4621      	mov	r1, r4
 8003048:	4628      	mov	r0, r5
 800304a:	f000 f8b7 	bl	80031bc <_sbrk_r>
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	d00a      	beq.n	8003068 <sbrk_aligned+0x34>
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d007      	beq.n	800306c <sbrk_aligned+0x38>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f000 f8ac 	bl	80031bc <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d101      	bne.n	800306c <sbrk_aligned+0x38>
 8003068:	f04f 34ff 	mov.w	r4, #4294967295
 800306c:	4620      	mov	r0, r4
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	20000134 	.word	0x20000134

08003074 <_malloc_r>:
 8003074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003078:	1ccd      	adds	r5, r1, #3
 800307a:	f025 0503 	bic.w	r5, r5, #3
 800307e:	3508      	adds	r5, #8
 8003080:	2d0c      	cmp	r5, #12
 8003082:	bf38      	it	cc
 8003084:	250c      	movcc	r5, #12
 8003086:	2d00      	cmp	r5, #0
 8003088:	4607      	mov	r7, r0
 800308a:	db01      	blt.n	8003090 <_malloc_r+0x1c>
 800308c:	42a9      	cmp	r1, r5
 800308e:	d905      	bls.n	800309c <_malloc_r+0x28>
 8003090:	230c      	movs	r3, #12
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	2600      	movs	r6, #0
 8003096:	4630      	mov	r0, r6
 8003098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800309c:	4e2e      	ldr	r6, [pc, #184]	; (8003158 <_malloc_r+0xe4>)
 800309e:	f000 f89d 	bl	80031dc <__malloc_lock>
 80030a2:	6833      	ldr	r3, [r6, #0]
 80030a4:	461c      	mov	r4, r3
 80030a6:	bb34      	cbnz	r4, 80030f6 <_malloc_r+0x82>
 80030a8:	4629      	mov	r1, r5
 80030aa:	4638      	mov	r0, r7
 80030ac:	f7ff ffc2 	bl	8003034 <sbrk_aligned>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	4604      	mov	r4, r0
 80030b4:	d14d      	bne.n	8003152 <_malloc_r+0xde>
 80030b6:	6834      	ldr	r4, [r6, #0]
 80030b8:	4626      	mov	r6, r4
 80030ba:	2e00      	cmp	r6, #0
 80030bc:	d140      	bne.n	8003140 <_malloc_r+0xcc>
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	4631      	mov	r1, r6
 80030c2:	4638      	mov	r0, r7
 80030c4:	eb04 0803 	add.w	r8, r4, r3
 80030c8:	f000 f878 	bl	80031bc <_sbrk_r>
 80030cc:	4580      	cmp	r8, r0
 80030ce:	d13a      	bne.n	8003146 <_malloc_r+0xd2>
 80030d0:	6821      	ldr	r1, [r4, #0]
 80030d2:	3503      	adds	r5, #3
 80030d4:	1a6d      	subs	r5, r5, r1
 80030d6:	f025 0503 	bic.w	r5, r5, #3
 80030da:	3508      	adds	r5, #8
 80030dc:	2d0c      	cmp	r5, #12
 80030de:	bf38      	it	cc
 80030e0:	250c      	movcc	r5, #12
 80030e2:	4629      	mov	r1, r5
 80030e4:	4638      	mov	r0, r7
 80030e6:	f7ff ffa5 	bl	8003034 <sbrk_aligned>
 80030ea:	3001      	adds	r0, #1
 80030ec:	d02b      	beq.n	8003146 <_malloc_r+0xd2>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	442b      	add	r3, r5
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	e00e      	b.n	8003114 <_malloc_r+0xa0>
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	1b52      	subs	r2, r2, r5
 80030fa:	d41e      	bmi.n	800313a <_malloc_r+0xc6>
 80030fc:	2a0b      	cmp	r2, #11
 80030fe:	d916      	bls.n	800312e <_malloc_r+0xba>
 8003100:	1961      	adds	r1, r4, r5
 8003102:	42a3      	cmp	r3, r4
 8003104:	6025      	str	r5, [r4, #0]
 8003106:	bf18      	it	ne
 8003108:	6059      	strne	r1, [r3, #4]
 800310a:	6863      	ldr	r3, [r4, #4]
 800310c:	bf08      	it	eq
 800310e:	6031      	streq	r1, [r6, #0]
 8003110:	5162      	str	r2, [r4, r5]
 8003112:	604b      	str	r3, [r1, #4]
 8003114:	4638      	mov	r0, r7
 8003116:	f104 060b 	add.w	r6, r4, #11
 800311a:	f000 f865 	bl	80031e8 <__malloc_unlock>
 800311e:	f026 0607 	bic.w	r6, r6, #7
 8003122:	1d23      	adds	r3, r4, #4
 8003124:	1af2      	subs	r2, r6, r3
 8003126:	d0b6      	beq.n	8003096 <_malloc_r+0x22>
 8003128:	1b9b      	subs	r3, r3, r6
 800312a:	50a3      	str	r3, [r4, r2]
 800312c:	e7b3      	b.n	8003096 <_malloc_r+0x22>
 800312e:	6862      	ldr	r2, [r4, #4]
 8003130:	42a3      	cmp	r3, r4
 8003132:	bf0c      	ite	eq
 8003134:	6032      	streq	r2, [r6, #0]
 8003136:	605a      	strne	r2, [r3, #4]
 8003138:	e7ec      	b.n	8003114 <_malloc_r+0xa0>
 800313a:	4623      	mov	r3, r4
 800313c:	6864      	ldr	r4, [r4, #4]
 800313e:	e7b2      	b.n	80030a6 <_malloc_r+0x32>
 8003140:	4634      	mov	r4, r6
 8003142:	6876      	ldr	r6, [r6, #4]
 8003144:	e7b9      	b.n	80030ba <_malloc_r+0x46>
 8003146:	230c      	movs	r3, #12
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4638      	mov	r0, r7
 800314c:	f000 f84c 	bl	80031e8 <__malloc_unlock>
 8003150:	e7a1      	b.n	8003096 <_malloc_r+0x22>
 8003152:	6025      	str	r5, [r4, #0]
 8003154:	e7de      	b.n	8003114 <_malloc_r+0xa0>
 8003156:	bf00      	nop
 8003158:	20000130 	.word	0x20000130

0800315c <_realloc_r>:
 800315c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003160:	4680      	mov	r8, r0
 8003162:	4614      	mov	r4, r2
 8003164:	460e      	mov	r6, r1
 8003166:	b921      	cbnz	r1, 8003172 <_realloc_r+0x16>
 8003168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800316c:	4611      	mov	r1, r2
 800316e:	f7ff bf81 	b.w	8003074 <_malloc_r>
 8003172:	b92a      	cbnz	r2, 8003180 <_realloc_r+0x24>
 8003174:	f7ff ff12 	bl	8002f9c <_free_r>
 8003178:	4625      	mov	r5, r4
 800317a:	4628      	mov	r0, r5
 800317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003180:	f000 f838 	bl	80031f4 <_malloc_usable_size_r>
 8003184:	4284      	cmp	r4, r0
 8003186:	4607      	mov	r7, r0
 8003188:	d802      	bhi.n	8003190 <_realloc_r+0x34>
 800318a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800318e:	d812      	bhi.n	80031b6 <_realloc_r+0x5a>
 8003190:	4621      	mov	r1, r4
 8003192:	4640      	mov	r0, r8
 8003194:	f7ff ff6e 	bl	8003074 <_malloc_r>
 8003198:	4605      	mov	r5, r0
 800319a:	2800      	cmp	r0, #0
 800319c:	d0ed      	beq.n	800317a <_realloc_r+0x1e>
 800319e:	42bc      	cmp	r4, r7
 80031a0:	4622      	mov	r2, r4
 80031a2:	4631      	mov	r1, r6
 80031a4:	bf28      	it	cs
 80031a6:	463a      	movcs	r2, r7
 80031a8:	f7ff fed0 	bl	8002f4c <memcpy>
 80031ac:	4631      	mov	r1, r6
 80031ae:	4640      	mov	r0, r8
 80031b0:	f7ff fef4 	bl	8002f9c <_free_r>
 80031b4:	e7e1      	b.n	800317a <_realloc_r+0x1e>
 80031b6:	4635      	mov	r5, r6
 80031b8:	e7df      	b.n	800317a <_realloc_r+0x1e>
	...

080031bc <_sbrk_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4d06      	ldr	r5, [pc, #24]	; (80031d8 <_sbrk_r+0x1c>)
 80031c0:	2300      	movs	r3, #0
 80031c2:	4604      	mov	r4, r0
 80031c4:	4608      	mov	r0, r1
 80031c6:	602b      	str	r3, [r5, #0]
 80031c8:	f7fd fbfc 	bl	80009c4 <_sbrk>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d102      	bne.n	80031d6 <_sbrk_r+0x1a>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	b103      	cbz	r3, 80031d6 <_sbrk_r+0x1a>
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
 80031d8:	20000138 	.word	0x20000138

080031dc <__malloc_lock>:
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <__malloc_lock+0x8>)
 80031de:	f000 b811 	b.w	8003204 <__retarget_lock_acquire_recursive>
 80031e2:	bf00      	nop
 80031e4:	2000013c 	.word	0x2000013c

080031e8 <__malloc_unlock>:
 80031e8:	4801      	ldr	r0, [pc, #4]	; (80031f0 <__malloc_unlock+0x8>)
 80031ea:	f000 b80c 	b.w	8003206 <__retarget_lock_release_recursive>
 80031ee:	bf00      	nop
 80031f0:	2000013c 	.word	0x2000013c

080031f4 <_malloc_usable_size_r>:
 80031f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f8:	1f18      	subs	r0, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bfbc      	itt	lt
 80031fe:	580b      	ldrlt	r3, [r1, r0]
 8003200:	18c0      	addlt	r0, r0, r3
 8003202:	4770      	bx	lr

08003204 <__retarget_lock_acquire_recursive>:
 8003204:	4770      	bx	lr

08003206 <__retarget_lock_release_recursive>:
 8003206:	4770      	bx	lr

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
