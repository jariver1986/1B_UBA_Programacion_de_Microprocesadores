/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

// ===============================
//   INTERCONEXIONES STM32F446RE
// ===============================
//
// --- MPU6050 (I2C1) ---
// VCC   -> 3.3V                  // Alimentación del sensor
// GND   -> GND                   // Tierra
// SDA   -> PB7                   // I2C1_SDA (requiere pull-up 4.7kΩ)
// SCL   -> PB6                   // I2C1_SCL (requiere pull-up 4.7kΩ)
// AD0   -> GND                   // Dirección I2C = 0x68
// INT   -> (no conectado)        // Interrupción opcional
//
//
// --- Tarjeta SD (SPI2) ---
// VCC   -> 3.3V                  // Alimentación (¡no usar 5V!)
// GND   -> GND                   // Tierra
// CS    -> PA4                   // GPIO Output, Chip Select manual
// SCK   -> PB10                  // SPI2_SCK
// MISO  -> PC2                  // SPI2_MISO
// MOSI  -> PC1                  // SPI2_MOSI
//
//====================== INTERCONEXIÓN ADXL345 - STM32F446RE ======================//
// ADXL345        ->  STM32F446RE                // DESCRIPCIÓN
// ----------------------------------------------------------------------------- //
/* VCC           ->  3.3V                        // Alimentación del sensor     */
/* GND           ->  GND                         // Tierra común                */
/* CS            ->  PA9                         // Chip Select (CS) manual     */
/* SCL (CLK)     ->  PA5                         // SPI1_SCK - reloj SPI        */
/* SDA (MOSI)    ->  PA7                         // SPI1_MOSI - datos al sensor */
/* SDO (MISO)    ->  PA6                         // SPI1_MISO - datos al STM32  */
//================================================================================//

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include "stm32f4xx_hal.h"
#include "fatfs.h"
#include <string.h>
#include <stdint.h>
#include "adxl345.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// === DEFINICIONES MPU6050 ===
#define MPU6050_ADDR  (0x68 << 1)
#define MPU6050_PWR_MGMT_1  0x6B
#define MPU6050_ACCEL_XOUT_H  0x3B

//extern I2C_HandleTypeDef hi2c1;
//extern UART_HandleTypeDef huart2;
//extern DMA_HandleTypeDef hdma_i2c1_rx;
int16_t AccX, AccY, AccZ, Temp, GyroX, GyroY, GyroZ;
float Ax, Ay, Az, Gx, Gy, Gz, TempC;
char msg[128];
char msg2[128];
char msg3[128];

// FATFS
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer[128];
uint8_t rxChar;
char mensajeRoca[] = "La Roca dice: No te rindas, campeon\n";

int16_t x, y, z;          /**< Variables enteras para datos crudos de aceleración. */
double xg, yg, zg;        /**< Variables para datos de aceleración en g. */
uint8_t data_rec[6];      /**< Arreglo para almacenar los 6 bytes de datos del ADXL345. */

/* USER CODE END PV */
/* USER CODE BEGIN 0 */
void MPU6050_Init(void);
void MPU6050_Read_All(void);

void MPU6050_Init(void)
{
  uint8_t data = 0x00;
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1,
                    I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}

void MPU6050_Read_All(void)
{
  uint8_t raw_data[14];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H,
                       I2C_MEMADD_SIZE_8BIT, raw_data, 14, HAL_MAX_DELAY);

    AccX = (raw_data[0] << 8) | raw_data[1];
    AccY = (raw_data[2] << 8) | raw_data[3];
    AccZ = (raw_data[4] << 8) | raw_data[5];
    Temp = (raw_data[6] << 8) | raw_data[7];
    GyroX = (raw_data[8] << 8) | raw_data[9];
    GyroY = (raw_data[10] << 8) | raw_data[11];
    GyroZ = (raw_data[12] << 8) | raw_data[13];

    Ax = AccX / 16384.0f;
    Ay = AccY / 16384.0f;
    Az = AccZ / 16384.0f;
    TempC = Temp / 340.0f + 36.53f;
    Gx = GyroX / 131.0f;
    Gy = GyroY / 131.0f;
    Gz = GyroZ / 131.0f;

}
/* USER CODE END 0 */


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI2_Init(void);
void MX_FATFS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/


/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI2_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
  adxl_init();  /**< Inicializa el acelerómetro ADXL345. */
  HAL_Delay(100);

    if(f_mount(&fs, "", 0) != FR_OK) Error_Handler();
    if(f_open(&fil, "la_roca.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK) Error_Handler();
    if(f_getfree("", &fre_clust, &pfs) != FR_OK) Error_Handler();

    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
    if(freeSpace < 1) Error_Handler();

    f_puts("CESE\n", &fil);
    f_puts("STM32F446RE SD Card via SPI2\n", &fil);
    f_puts("Cristo la Roca!!!\r\n", &fil);
    if(f_close(&fil) != FR_OK) Error_Handler();

    if(f_open(&fil, "la_roca.txt", FA_READ) != FR_OK) Error_Handler();
    while(f_gets(buffer, sizeof(buffer), &fil)) printf("%s", buffer);
    if(f_close(&fil) != FR_OK) Error_Handler();
    if(f_mount(NULL, "", 1) != FR_OK) Error_Handler();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {

		  if (HAL_UART_Receive(&huart2, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK)
		  {
			if (rxChar == 'p' || rxChar == 'P')
			{
			  MPU6050_Read_All();
			  // Formatear los datos
			  snprintf(msg, sizeof(msg), "MPU Acelerometro[g]:  X=%.4f  Y=%.4f  Z=%.4f\r\n", Ax, Ay, Az);
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

			  snprintf(msg2, sizeof(msg2), "MPU Giroscopio[gr/s]: X=%.4f  Y=%.4f  Z=%.4f\r\n", Gx, Gy, Gz);
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);

			  snprintf(msg3, sizeof(msg3), "MPU Temperatura[C]:   %.2f\r\n\r\n", TempC);
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
			}
			else if (rxChar == 'a' || rxChar == 'A')
			{
			  adxl_read(DATA_START_ADDR, data_rec); /**< Lee los datos de aceleración desde el ADXL345. */

			  x = ((data_rec[1] << 8) | data_rec[0]); /**< Combina los bytes para obtener el valor en X. */
			  y = ((data_rec[3] << 8) | data_rec[2]); /**< Combina los bytes para obtener el valor en Y. */
			  z = ((data_rec[5] << 8) | data_rec[4]); /**< Combina los bytes para obtener el valor en Z. */

			  xg = (x * 0.0078); /**< Convierte el valor crudo a "g" para el eje X. */
			  yg = (y * 0.0078); /**< Convierte el valor crudo a "g" para el eje Y. */
			  zg = (z * 0.0078); /**< Convierte el valor crudo a "g" para el eje Z. */

			  char msgAdxl[128];
			  snprintf(msgAdxl, sizeof(msgAdxl),"ADXL345[g]: X=%.4f  Y=%.4f  Z=%.4f\r\n\r\n", xg, yg, zg);
			  HAL_UART_Transmit(&huart2, (uint8_t*)msgAdxl, strlen(msgAdxl), HAL_MAX_DELAY);
			}
			else if (rxChar == 'g' || rxChar == 'G')
			{
			  if(f_mount(&fs, "", 0) != FR_OK) Error_Handler();
			  if(f_open(&fil, "la_roca.txt", FA_OPEN_APPEND | FA_WRITE) != FR_OK) Error_Handler();
			  //f_puts(mensajeRoca, &fil);
			  f_puts(msg, &fil);
			  f_puts(msg2, &fil);
			  f_puts(msg3, &fil);
			  if(f_close(&fil) != FR_OK) Error_Handler();
			  if(f_mount(NULL, "", 1) != FR_OK) Error_Handler();
			  char confirmacion[] = "Mensaje guardado en SD.\r\n\r\n";
			  HAL_UART_Transmit(&huart2, (uint8_t*)confirmacion, strlen(confirmacion), HAL_MAX_DELAY);
			}
			else if (rxChar == 'b' || rxChar == 'B')
			{
			  if(f_mount(&fs, "", 0) != FR_OK) Error_Handler();
			  if(f_open(&fil, "la_roca.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) Error_Handler();
			  if(f_close(&fil) != FR_OK) Error_Handler();
			  if(f_mount(NULL, "", 1) != FR_OK) Error_Handler();
			  char confirmacion[] = "Archivo borrado.\r\n\r\n";
			  HAL_UART_Transmit(&huart2, (uint8_t*)confirmacion, strlen(confirmacion), HAL_MAX_DELAY);
			}
			else if (rxChar == 'r' || rxChar == 'R')
			{
			  if(f_mount(&fs, "", 0) != FR_OK) Error_Handler();
			  if(f_open(&fil, "la_roca.txt", FA_READ) != FR_OK)
			  {
				char errorMsg[] = "Error al abrir el archivo para lectura.\r\n";
				HAL_UART_Transmit(&huart2, (uint8_t*)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);
				Error_Handler();
			  }
			  while(f_gets(buffer, sizeof(buffer), &fil))
			  {
				HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
			  }
			  if(f_close(&fil) != FR_OK) Error_Handler();
			  if(f_mount(NULL, "", 1) != FR_OK) Error_Handler();
			  char confirmacion[] = "Fin de la lectura de archivo\r\n\r\n";
			  HAL_UART_Transmit(&huart2, (uint8_t*)confirmacion, strlen(confirmacion), HAL_MAX_DELAY);
			}
			else
			{
			  char mensaje[] = "Comando no reconocido. Usa G, B o R.\r\n";
			  HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), HAL_MAX_DELAY);
			}
		  }

    }
  /* USER CODE END 3 */
}






/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  //Configure GPIO pin Output Level
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  //Configure GPIO pin : PA4
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  // Configure SPI2 GPIOs: PB13=SCK, PB14=MISO, PB15=MOSI
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Si tu módulo SD no tiene pull-up en MISO, considera PULLUP aquí
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
