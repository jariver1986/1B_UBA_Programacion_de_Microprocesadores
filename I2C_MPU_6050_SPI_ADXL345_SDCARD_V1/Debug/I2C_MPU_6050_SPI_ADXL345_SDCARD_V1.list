
I2C_MPU_6050_SPI_ADXL345_SDCARD_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800bd90  0800bd90  0001bd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c4  0800c3c4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3c4  0800c3c4  0001c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3cc  0800c3cc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3d0  0800c3d0  0001c3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  200001f8  0800c5c8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800c5c8  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013040  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5f  00000000  00000000  00033264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ad2  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c1f  00000000  00000000  0005ca1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfdc7  00000000  00000000  00074639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144400  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00144450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bd78 	.word	0x0800bd78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800bd78 	.word	0x0800bd78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <incrementarContador>:

// Variable privada: solo visible dentro de este archivo .c
static uint32_t retardoCompletadoContador = 0;

// Función privada: solo se usa internamente
static void incrementarContador(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
    retardoCompletadoContador++;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <incrementarContador+0x18>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <incrementarContador+0x18>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	20000214 	.word	0x20000214

08000f48 <delayInit>:
 * @param duration Duración del retardo en milisegundos.
 *
 * @return Ninguno.
 */
void delayInit(delay_t *delay, tick_t duration)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    delay->duration = duration;  /**< Asigna la duración del retardo. */
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	605a      	str	r2, [r3, #4]
    delay->running = false;      /**< Inicializa el estado del retardo como inactivo. */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	721a      	strb	r2, [r3, #8]
    if (delay == NULL)			/**< control de los parámetros. */
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <delayInit+0x22>
    	return;
    if (duration == 0)			/**< control de los parámetros. */
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	e000      	b.n	8000f6c <delayInit+0x24>
    	return;
 8000f6a:	bf00      	nop
    	return;
}
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <delayRead>:
 * @param delay Puntero a la estructura @c delay_t que representa el retardo.
 *
 * @return @c true si el retardo ha terminado, @c false en caso contrario.
 */
bool_t delayRead(delay_t *delay)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
    if (!delay->running) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7a1b      	ldrb	r3, [r3, #8]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d009      	beq.n	8000fa0 <delayRead+0x2a>
        delay->startTime = HAL_GetTick(); /**< Captura el tiempo de inicio. */
 8000f8c:	f002 f84c 	bl	8003028 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
        delay->running = true;           /**< Marca el retardo como activo. */
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	721a      	strb	r2, [r3, #8]
        return false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e011      	b.n	8000fc4 <delayRead+0x4e>
    }

    if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 8000fa0:	f002 f842 	bl	8003028 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1ad2      	subs	r2, r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d306      	bcc.n	8000fc2 <delayRead+0x4c>
        delay->running = false; /**< Finaliza el retardo. */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	721a      	strb	r2, [r3, #8]
        incrementarContador();  // 🔄 Se llama la función privada
 8000fba:	f7ff ffb7 	bl	8000f2c <incrementarContador>
        return true;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <delayRead+0x4e>
    }


    return false; /**< El retardo aún no ha finalizado. */
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <adxl_read>:

#define MULTI_BYTE_EN   0x40
#define READ_OPERATION  0x80

void adxl_read(uint8_t address, uint8_t *rxdata)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
    /* Set read operation */
    address |= READ_OPERATION;
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	71fb      	strb	r3, [r7, #7]

    /* Enable multi-byte */
    address |= MULTI_BYTE_EN;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	71fb      	strb	r3, [r7, #7]

    /* Pull cs line low to enable slave */
    cs_enable();
 8000fec:	f001 fd3a 	bl	8002a64 <cs_enable>

    /* Send address */
    spi1_transmit(&address, 1);
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fcd7 	bl	80029a8 <spi1_transmit>

    /* Read 6 bytes */
    spi1_receive(rxdata, 6);
 8000ffa:	2106      	movs	r1, #6
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f001 fd0b 	bl	8002a18 <spi1_receive>

    /* Pull cs line high to disable slave */
    cs_disable();
 8001002:	f001 fd3f 	bl	8002a84 <cs_disable>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <adxl_write>:


void adxl_write(uint8_t address, uint8_t value)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	460a      	mov	r2, r1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	4613      	mov	r3, r2
 800101c:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];

    /* Enable multi-byte, place address into buffer */
    data[0] = address | MULTI_BYTE_EN;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	b2db      	uxtb	r3, r3
 8001026:	733b      	strb	r3, [r7, #12]

    /* Place data into buffer */
    data[1] = value;
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	737b      	strb	r3, [r7, #13]

    /* Pull cs line low to enable slave */
    cs_enable();
 800102c:	f001 fd1a 	bl	8002a64 <cs_enable>

    /* Transmit data and address */
    spi1_transmit(data, 2);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fcb6 	bl	80029a8 <spi1_transmit>

    /* Pull cs line high to disable slave */
    cs_disable();
 800103c:	f001 fd22 	bl	8002a84 <cs_disable>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <adxl_init>:


void adxl_init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    /* Enable SPI gpio */
    spi_gpio_init();
 800104c:	f001 fbc8 	bl	80027e0 <spi_gpio_init>

    /* Config SPI */
    spi1_config();
 8001050:	f001 fc50 	bl	80028f4 <spi1_config>

    /* Set data format range to +-4g */
    adxl_write(DATA_FORMAT_R, FOUR_G);
 8001054:	2101      	movs	r1, #1
 8001056:	2031      	movs	r0, #49	; 0x31
 8001058:	f7ff ffd9 	bl	800100e <adxl_write>

    /* Reset all bits */
    adxl_write(POWER_CTL_R, RESET);
 800105c:	2100      	movs	r1, #0
 800105e:	202d      	movs	r0, #45	; 0x2d
 8001060:	f7ff ffd5 	bl	800100e <adxl_write>

    /* Configure power control measure bit */
    adxl_write(POWER_CTL_R, SET_MEASURE_B);
 8001064:	2108      	movs	r1, #8
 8001066:	202d      	movs	r0, #45	; 0x2d
 8001068:	f7ff ffd1 	bl	800100e <adxl_write>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <SELECT+0x18>)
 800107a:	f002 fa7f 	bl	800357c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f001 ffde 	bl	8003040 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020000 	.word	0x40020000

0800108c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <DESELECT+0x18>)
 8001096:	f002 fa71 	bl	800357c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f001 ffd0 	bl	8003040 <HAL_Delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000

080010a8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010b2:	bf00      	nop
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <SPI_TxByte+0x30>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d1f8      	bne.n	80010b4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80010c2:	1df9      	adds	r1, r7, #7
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <SPI_TxByte+0x30>)
 80010ca:	f004 fa22 	bl	8005512 <HAL_SPI_Transmit>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000274 	.word	0x20000274

080010dc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010e8:	bf00      	nop
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <SPI_TxBuffer+0x30>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d1f8      	bne.n	80010ea <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80010f8:	887a      	ldrh	r2, [r7, #2]
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <SPI_TxBuffer+0x30>)
 8001100:	f004 fa07 	bl	8005512 <HAL_SPI_Transmit>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000274 	.word	0x20000274

08001110 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800111a:	bf00      	nop
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <SPI_RxByte+0x34>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b02      	cmp	r3, #2
 8001128:	d1f8      	bne.n	800111c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800112a:	1dba      	adds	r2, r7, #6
 800112c:	1df9      	adds	r1, r7, #7
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <SPI_RxByte+0x34>)
 8001136:	f004 fb28 	bl	800578a <HAL_SPI_TransmitReceive>

	return data;
 800113a:	79bb      	ldrb	r3, [r7, #6]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000274 	.word	0x20000274

08001148 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001150:	f7ff ffde 	bl	8001110 <SPI_RxByte>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <SD_ReadyWait+0x30>)
 800116c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001170:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001172:	f7ff ffcd 	bl	8001110 <SPI_RxByte>
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2bff      	cmp	r3, #255	; 0xff
 800117e:	d003      	beq.n	8001188 <SD_ReadyWait+0x24>
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SD_ReadyWait+0x30>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f4      	bne.n	8001172 <SD_ReadyWait+0xe>

	return res;
 8001188:	79fb      	ldrb	r3, [r7, #7]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000021a 	.word	0x2000021a

08001198 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800119e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80011a2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80011a4:	f7ff ff72 	bl	800108c <DESELECT>
	for(int i = 0; i < 10; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	e005      	b.n	80011ba <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80011ae:	20ff      	movs	r0, #255	; 0xff
 80011b0:	f7ff ff7a 	bl	80010a8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	ddf6      	ble.n	80011ae <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80011c0:	f7ff ff56 	bl	8001070 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80011d8:	2395      	movs	r3, #149	; 0x95
 80011da:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80011dc:	463b      	mov	r3, r7
 80011de:	2106      	movs	r1, #6
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff7b 	bl	80010dc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80011e6:	e002      	b.n	80011ee <SD_PowerOn+0x56>
	{
		cnt--;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80011ee:	f7ff ff8f 	bl	8001110 <SPI_RxByte>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d002      	beq.n	80011fe <SD_PowerOn+0x66>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f4      	bne.n	80011e8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80011fe:	f7ff ff45 	bl	800108c <DESELECT>
	SPI_TxByte(0XFF);
 8001202:	20ff      	movs	r0, #255	; 0xff
 8001204:	f7ff ff50 	bl	80010a8 <SPI_TxByte>

	PowerFlag = 1;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <SD_PowerOn+0x80>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000021d 	.word	0x2000021d

0800121c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <SD_PowerOff+0x14>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	2000021d 	.word	0x2000021d

08001234 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <SD_CheckPower+0x14>)
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000021d 	.word	0x2000021d

0800124c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <SD_RxDataBlock+0x58>)
 8001258:	22c8      	movs	r2, #200	; 0xc8
 800125a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800125c:	f7ff ff58 	bl	8001110 <SPI_RxByte>
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d103      	bne.n	8001272 <SD_RxDataBlock+0x26>
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <SD_RxDataBlock+0x58>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f4      	bne.n	800125c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2bfe      	cmp	r3, #254	; 0xfe
 8001276:	d001      	beq.n	800127c <SD_RxDataBlock+0x30>
 8001278:	2300      	movs	r3, #0
 800127a:	e00f      	b.n	800129c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff60 	bl	8001148 <SPI_RxBytePtr>
	} while(len--);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	1e5a      	subs	r2, r3, #1
 800128c:	603a      	str	r2, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f4      	bne.n	800127c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001292:	f7ff ff3d 	bl	8001110 <SPI_RxByte>
	SPI_RxByte();
 8001296:	f7ff ff3b 	bl	8001110 <SPI_RxByte>

	return TRUE;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000218 	.word	0x20000218

080012a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80012b8:	f7ff ff54 	bl	8001164 <SD_ReadyWait>
 80012bc:	4603      	mov	r3, r0
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	d001      	beq.n	80012c6 <SD_TxDataBlock+0x1e>
 80012c2:	2300      	movs	r3, #0
 80012c4:	e02f      	b.n	8001326 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff feed 	bl	80010a8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	2bfd      	cmp	r3, #253	; 0xfd
 80012d2:	d020      	beq.n	8001316 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff feff 	bl	80010dc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80012de:	f7ff ff17 	bl	8001110 <SPI_RxByte>
		SPI_RxByte();
 80012e2:	f7ff ff15 	bl	8001110 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80012e6:	e00b      	b.n	8001300 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80012e8:	f7ff ff12 	bl	8001110 <SPI_RxByte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d006      	beq.n	8001308 <SD_TxDataBlock+0x60>
			i++;
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	2b40      	cmp	r3, #64	; 0x40
 8001304:	d9f0      	bls.n	80012e8 <SD_TxDataBlock+0x40>
 8001306:	e000      	b.n	800130a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001308:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800130a:	bf00      	nop
 800130c:	f7ff ff00 	bl	8001110 <SPI_RxByte>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0fa      	beq.n	800130c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	2b05      	cmp	r3, #5
 800131e:	d101      	bne.n	8001324 <SD_TxDataBlock+0x7c>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	6039      	str	r1, [r7, #0]
 8001338:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800133a:	f7ff ff13 	bl	8001164 <SD_ReadyWait>
 800133e:	4603      	mov	r3, r0
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d001      	beq.n	8001348 <SD_SendCmd+0x1a>
 8001344:	23ff      	movs	r3, #255	; 0xff
 8001346:	e042      	b.n	80013ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff feac 	bl	80010a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	0e1b      	lsrs	r3, r3, #24
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fea6 	bl	80010a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fea0 	bl	80010a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe9a 	bl	80010a8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe95 	bl	80010a8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b40      	cmp	r3, #64	; 0x40
 8001382:	d102      	bne.n	800138a <SD_SendCmd+0x5c>
 8001384:	2395      	movs	r3, #149	; 0x95
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e007      	b.n	800139a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b48      	cmp	r3, #72	; 0x48
 800138e:	d102      	bne.n	8001396 <SD_SendCmd+0x68>
 8001390:	2387      	movs	r3, #135	; 0x87
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <SD_SendCmd+0x6c>
	else crc = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe83 	bl	80010a8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b4c      	cmp	r3, #76	; 0x4c
 80013a6:	d101      	bne.n	80013ac <SD_SendCmd+0x7e>
 80013a8:	f7ff feb2 	bl	8001110 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80013ac:	230a      	movs	r3, #10
 80013ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80013b0:	f7ff feae 	bl	8001110 <SPI_RxByte>
 80013b4:	4603      	mov	r3, r0
 80013b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80013b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da05      	bge.n	80013cc <SD_SendCmd+0x9e>
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f1      	bne.n	80013b0 <SD_SendCmd+0x82>

	return res;
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SD_disk_initialize+0x14>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0d1      	b.n	8001590 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <SD_disk_initialize+0x1c0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <SD_disk_initialize+0x2a>
 80013fa:	4b67      	ldr	r3, [pc, #412]	; (8001598 <SD_disk_initialize+0x1c0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	e0c6      	b.n	8001590 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001402:	f7ff fec9 	bl	8001198 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001406:	f7ff fe33 	bl	8001070 <SELECT>

	/* check disk type */
	type = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800140e:	2100      	movs	r1, #0
 8001410:	2040      	movs	r0, #64	; 0x40
 8001412:	f7ff ff8c 	bl	800132e <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	f040 80a1 	bne.w	8001560 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <SD_disk_initialize+0x1c4>)
 8001420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001424:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001426:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800142a:	2048      	movs	r0, #72	; 0x48
 800142c:	f7ff ff7f 	bl	800132e <SD_SendCmd>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d155      	bne.n	80014e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e00c      	b.n	8001456 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800143c:	7bfc      	ldrb	r4, [r7, #15]
 800143e:	f7ff fe67 	bl	8001110 <SPI_RxByte>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	f104 0310 	add.w	r3, r4, #16
 800144a:	443b      	add	r3, r7
 800144c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d9ef      	bls.n	800143c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800145c:	7abb      	ldrb	r3, [r7, #10]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d17e      	bne.n	8001560 <SD_disk_initialize+0x188>
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	2baa      	cmp	r3, #170	; 0xaa
 8001466:	d17b      	bne.n	8001560 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001468:	2100      	movs	r1, #0
 800146a:	2077      	movs	r0, #119	; 0x77
 800146c:	f7ff ff5f 	bl	800132e <SD_SendCmd>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d807      	bhi.n	8001486 <SD_disk_initialize+0xae>
 8001476:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800147a:	2069      	movs	r0, #105	; 0x69
 800147c:	f7ff ff57 	bl	800132e <SD_SendCmd>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001486:	4b45      	ldr	r3, [pc, #276]	; (800159c <SD_disk_initialize+0x1c4>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ec      	bne.n	8001468 <SD_disk_initialize+0x90>
 800148e:	e000      	b.n	8001492 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001490:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001492:	4b42      	ldr	r3, [pc, #264]	; (800159c <SD_disk_initialize+0x1c4>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d062      	beq.n	8001560 <SD_disk_initialize+0x188>
 800149a:	2100      	movs	r1, #0
 800149c:	207a      	movs	r0, #122	; 0x7a
 800149e:	f7ff ff46 	bl	800132e <SD_SendCmd>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d15b      	bne.n	8001560 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e00c      	b.n	80014c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80014ae:	7bfc      	ldrb	r4, [r7, #15]
 80014b0:	f7ff fe2e 	bl	8001110 <SPI_RxByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	f104 0310 	add.w	r3, r4, #16
 80014bc:	443b      	add	r3, r7
 80014be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3301      	adds	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d9ef      	bls.n	80014ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80014ce:	7a3b      	ldrb	r3, [r7, #8]
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SD_disk_initialize+0x104>
 80014d8:	230c      	movs	r3, #12
 80014da:	e000      	b.n	80014de <SD_disk_initialize+0x106>
 80014dc:	2304      	movs	r3, #4
 80014de:	73bb      	strb	r3, [r7, #14]
 80014e0:	e03e      	b.n	8001560 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014e2:	2100      	movs	r1, #0
 80014e4:	2077      	movs	r0, #119	; 0x77
 80014e6:	f7ff ff22 	bl	800132e <SD_SendCmd>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d808      	bhi.n	8001502 <SD_disk_initialize+0x12a>
 80014f0:	2100      	movs	r1, #0
 80014f2:	2069      	movs	r0, #105	; 0x69
 80014f4:	f7ff ff1b 	bl	800132e <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d801      	bhi.n	8001502 <SD_disk_initialize+0x12a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e000      	b.n	8001504 <SD_disk_initialize+0x12c>
 8001502:	2301      	movs	r3, #1
 8001504:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d10e      	bne.n	800152a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800150c:	2100      	movs	r1, #0
 800150e:	2077      	movs	r0, #119	; 0x77
 8001510:	f7ff ff0d 	bl	800132e <SD_SendCmd>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d80e      	bhi.n	8001538 <SD_disk_initialize+0x160>
 800151a:	2100      	movs	r1, #0
 800151c:	2069      	movs	r0, #105	; 0x69
 800151e:	f7ff ff06 	bl	800132e <SD_SendCmd>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <SD_disk_initialize+0x160>
 8001528:	e00c      	b.n	8001544 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800152a:	2100      	movs	r1, #0
 800152c:	2041      	movs	r0, #65	; 0x41
 800152e:	f7ff fefe 	bl	800132e <SD_SendCmd>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <SD_disk_initialize+0x1c4>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e2      	bne.n	8001506 <SD_disk_initialize+0x12e>
 8001540:	e000      	b.n	8001544 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001542:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <SD_disk_initialize+0x1c4>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <SD_disk_initialize+0x184>
 800154c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001550:	2050      	movs	r0, #80	; 0x50
 8001552:	f7ff feec 	bl	800132e <SD_SendCmd>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SD_disk_initialize+0x188>
 800155c:	2300      	movs	r3, #0
 800155e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <SD_disk_initialize+0x1c8>)
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001566:	f7ff fd91 	bl	800108c <DESELECT>
	SPI_RxByte();
 800156a:	f7ff fdd1 	bl	8001110 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <SD_disk_initialize+0x1c0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SD_disk_initialize+0x1c0>)
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e001      	b.n	800158a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001586:	f7ff fe49 	bl	800121c <SD_PowerOff>
	}

	return Stat;
 800158a:	4b03      	ldr	r3, [pc, #12]	; (8001598 <SD_disk_initialize+0x1c0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	20000218 	.word	0x20000218
 80015a0:	2000021c 	.word	0x2000021c

080015a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SD_disk_status+0x14>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e002      	b.n	80015be <SD_disk_status+0x1a>
	return Stat;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SD_disk_status+0x28>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000

080015d0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <SD_disk_read+0x1c>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <SD_disk_read+0x20>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e051      	b.n	8001694 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <SD_disk_read+0xcc>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SD_disk_read+0x32>
 80015fe:	2303      	movs	r3, #3
 8001600:	e048      	b.n	8001694 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <SD_disk_read+0xd0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <SD_disk_read+0x44>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	607b      	str	r3, [r7, #4]

	SELECT();
 8001614:	f7ff fd2c 	bl	8001070 <SELECT>

	if (count == 1)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d111      	bne.n	8001642 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	2051      	movs	r0, #81	; 0x51
 8001622:	f7ff fe84 	bl	800132e <SD_SendCmd>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d129      	bne.n	8001680 <SD_disk_read+0xb0>
 800162c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f7ff fe0b 	bl	800124c <SD_RxDataBlock>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d021      	beq.n	8001680 <SD_disk_read+0xb0>
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	e01e      	b.n	8001680 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2052      	movs	r0, #82	; 0x52
 8001646:	f7ff fe72 	bl	800132e <SD_SendCmd>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d117      	bne.n	8001680 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f7ff fdf9 	bl	800124c <SD_RxDataBlock>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <SD_disk_read+0xa6>
				buff += 512;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001666:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3b01      	subs	r3, #1
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ed      	bne.n	8001650 <SD_disk_read+0x80>
 8001674:	e000      	b.n	8001678 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001676:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001678:	2100      	movs	r1, #0
 800167a:	204c      	movs	r0, #76	; 0x4c
 800167c:	f7ff fe57 	bl	800132e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001680:	f7ff fd04 	bl	800108c <DESELECT>
	SPI_RxByte();
 8001684:	f7ff fd44 	bl	8001110 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	2000021c 	.word	0x2000021c

080016a4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <SD_disk_write+0x1c>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <SD_disk_write+0x20>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e06b      	b.n	800179c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c4:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <SD_disk_write+0x100>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SD_disk_write+0x32>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e062      	b.n	800179c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <SD_disk_write+0x100>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SD_disk_write+0x44>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e059      	b.n	800179c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <SD_disk_write+0x104>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <SD_disk_write+0x56>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	025b      	lsls	r3, r3, #9
 80016f8:	607b      	str	r3, [r7, #4]

	SELECT();
 80016fa:	f7ff fcb9 	bl	8001070 <SELECT>

	if (count == 1)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d110      	bne.n	8001726 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	2058      	movs	r0, #88	; 0x58
 8001708:	f7ff fe11 	bl	800132e <SD_SendCmd>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13a      	bne.n	8001788 <SD_disk_write+0xe4>
 8001712:	21fe      	movs	r1, #254	; 0xfe
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7ff fdc7 	bl	80012a8 <SD_TxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d033      	beq.n	8001788 <SD_disk_write+0xe4>
			count = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	e030      	b.n	8001788 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <SD_disk_write+0x104>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001732:	2100      	movs	r1, #0
 8001734:	2077      	movs	r0, #119	; 0x77
 8001736:	f7ff fdfa 	bl	800132e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	2057      	movs	r0, #87	; 0x57
 800173e:	f7ff fdf6 	bl	800132e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	2059      	movs	r0, #89	; 0x59
 8001746:	f7ff fdf2 	bl	800132e <SD_SendCmd>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11b      	bne.n	8001788 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001750:	21fc      	movs	r1, #252	; 0xfc
 8001752:	68b8      	ldr	r0, [r7, #8]
 8001754:	f7ff fda8 	bl	80012a8 <SD_TxDataBlock>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <SD_disk_write+0xd0>
				buff += 512;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001764:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ee      	bne.n	8001750 <SD_disk_write+0xac>
 8001772:	e000      	b.n	8001776 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001774:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001776:	21fd      	movs	r1, #253	; 0xfd
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fd95 	bl	80012a8 <SD_TxDataBlock>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <SD_disk_write+0xe4>
			{
				count = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001788:	f7ff fc80 	bl	800108c <DESELECT>
	SPI_RxByte();
 800178c:	f7ff fcc0 	bl	8001110 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf14      	ite	ne
 8001796:	2301      	movne	r3, #1
 8001798:	2300      	moveq	r3, #0
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	2000021c 	.word	0x2000021c

080017ac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	603a      	str	r2, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	460b      	mov	r3, r1
 80017ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SD_disk_ioctl+0x1e>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e115      	b.n	80019f6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d124      	bne.n	8001820 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d012      	beq.n	8001804 <SD_disk_ioctl+0x58>
 80017de:	2b02      	cmp	r3, #2
 80017e0:	dc1a      	bgt.n	8001818 <SD_disk_ioctl+0x6c>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <SD_disk_ioctl+0x40>
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d006      	beq.n	80017f8 <SD_disk_ioctl+0x4c>
 80017ea:	e015      	b.n	8001818 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80017ec:	f7ff fd16 	bl	800121c <SD_PowerOff>
			res = RES_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017f6:	e0fc      	b.n	80019f2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80017f8:	f7ff fcce 	bl	8001198 <SD_PowerOn>
			res = RES_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001802:	e0f6      	b.n	80019f2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	1c5c      	adds	r4, r3, #1
 8001808:	f7ff fd14 	bl	8001234 <SD_CheckPower>
 800180c:	4603      	mov	r3, r0
 800180e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001816:	e0ec      	b.n	80019f2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001818:	2304      	movs	r3, #4
 800181a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800181e:	e0e8      	b.n	80019f2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001820:	4b77      	ldr	r3, [pc, #476]	; (8001a00 <SD_disk_ioctl+0x254>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SD_disk_ioctl+0x86>
 800182e:	2303      	movs	r3, #3
 8001830:	e0e1      	b.n	80019f6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001832:	f7ff fc1d 	bl	8001070 <SELECT>

		switch (ctrl)
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	2b0d      	cmp	r3, #13
 800183a:	f200 80cb 	bhi.w	80019d4 <SD_disk_ioctl+0x228>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <SD_disk_ioctl+0x98>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	0800193f 	.word	0x0800193f
 8001848:	0800187d 	.word	0x0800187d
 800184c:	0800192f 	.word	0x0800192f
 8001850:	080019d5 	.word	0x080019d5
 8001854:	080019d5 	.word	0x080019d5
 8001858:	080019d5 	.word	0x080019d5
 800185c:	080019d5 	.word	0x080019d5
 8001860:	080019d5 	.word	0x080019d5
 8001864:	080019d5 	.word	0x080019d5
 8001868:	080019d5 	.word	0x080019d5
 800186c:	080019d5 	.word	0x080019d5
 8001870:	08001951 	.word	0x08001951
 8001874:	08001975 	.word	0x08001975
 8001878:	08001999 	.word	0x08001999
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800187c:	2100      	movs	r1, #0
 800187e:	2049      	movs	r0, #73	; 0x49
 8001880:	f7ff fd55 	bl	800132e <SD_SendCmd>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80a8 	bne.w	80019dc <SD_disk_ioctl+0x230>
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2110      	movs	r1, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fcda 	bl	800124c <SD_RxDataBlock>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 809e 	beq.w	80019dc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80018a0:	7b3b      	ldrb	r3, [r7, #12]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10e      	bne.n	80018c8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80018aa:	7d7b      	ldrb	r3, [r7, #21]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	7d3b      	ldrb	r3, [r7, #20]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80018be:	8bfb      	ldrh	r3, [r7, #30]
 80018c0:	029a      	lsls	r2, r3, #10
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e02e      	b.n	8001926 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018c8:	7c7b      	ldrb	r3, [r7, #17]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	7dbb      	ldrb	r3, [r7, #22]
 80018d2:	09db      	lsrs	r3, r3, #7
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7d7b      	ldrb	r3, [r7, #21]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 0306 	and.w	r3, r3, #6
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3302      	adds	r3, #2
 80018ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018f0:	7d3b      	ldrb	r3, [r7, #20]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	7cfb      	ldrb	r3, [r7, #19]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	b29a      	uxth	r2, r3
 8001904:	7cbb      	ldrb	r3, [r7, #18]
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	b29b      	uxth	r3, r3
 800190a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29b      	uxth	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001918:	8bfa      	ldrh	r2, [r7, #30]
 800191a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800191e:	3b09      	subs	r3, #9
 8001920:	409a      	lsls	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800192c:	e056      	b.n	80019dc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001934:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800193c:	e055      	b.n	80019ea <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800193e:	f7ff fc11 	bl	8001164 <SD_ReadyWait>
 8001942:	4603      	mov	r3, r0
 8001944:	2bff      	cmp	r3, #255	; 0xff
 8001946:	d14b      	bne.n	80019e0 <SD_disk_ioctl+0x234>
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800194e:	e047      	b.n	80019e0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001950:	2100      	movs	r1, #0
 8001952:	2049      	movs	r0, #73	; 0x49
 8001954:	f7ff fceb 	bl	800132e <SD_SendCmd>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d142      	bne.n	80019e4 <SD_disk_ioctl+0x238>
 800195e:	2110      	movs	r1, #16
 8001960:	6a38      	ldr	r0, [r7, #32]
 8001962:	f7ff fc73 	bl	800124c <SD_RxDataBlock>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03b      	beq.n	80019e4 <SD_disk_ioctl+0x238>
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001972:	e037      	b.n	80019e4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001974:	2100      	movs	r1, #0
 8001976:	204a      	movs	r0, #74	; 0x4a
 8001978:	f7ff fcd9 	bl	800132e <SD_SendCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d132      	bne.n	80019e8 <SD_disk_ioctl+0x23c>
 8001982:	2110      	movs	r1, #16
 8001984:	6a38      	ldr	r0, [r7, #32]
 8001986:	f7ff fc61 	bl	800124c <SD_RxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d02b      	beq.n	80019e8 <SD_disk_ioctl+0x23c>
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001996:	e027      	b.n	80019e8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001998:	2100      	movs	r1, #0
 800199a:	207a      	movs	r0, #122	; 0x7a
 800199c:	f7ff fcc7 	bl	800132e <SD_SendCmd>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d116      	bne.n	80019d4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019ac:	e00b      	b.n	80019c6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80019ae:	6a3c      	ldr	r4, [r7, #32]
 80019b0:	1c63      	adds	r3, r4, #1
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	f7ff fbac 	bl	8001110 <SPI_RxByte>
 80019b8:	4603      	mov	r3, r0
 80019ba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80019bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019c0:	3301      	adds	r3, #1
 80019c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d9ef      	bls.n	80019ae <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80019d4:	2304      	movs	r3, #4
 80019d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019da:	e006      	b.n	80019ea <SD_disk_ioctl+0x23e>
			break;
 80019dc:	bf00      	nop
 80019de:	e004      	b.n	80019ea <SD_disk_ioctl+0x23e>
			break;
 80019e0:	bf00      	nop
 80019e2:	e002      	b.n	80019ea <SD_disk_ioctl+0x23e>
			break;
 80019e4:	bf00      	nop
 80019e6:	e000      	b.n	80019ea <SD_disk_ioctl+0x23e>
			break;
 80019e8:	bf00      	nop
		}

		DESELECT();
 80019ea:	f7ff fb4f 	bl	800108c <DESELECT>
		SPI_RxByte();
 80019ee:	f7ff fb8f 	bl	8001110 <SPI_RxByte>
	}

	return res;
 80019f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	372c      	adds	r7, #44	; 0x2c
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000000 	.word	0x20000000

08001a04 <LCD_Delay>:
#define CMD_MODE      0x00
#define DATA_MODE     0x01

static void LCD_SendInternal(I2C_HandleTypeDef *hi2c, uint8_t data);
static void LCD_SendNibble(I2C_HandleTypeDef *hi2c, uint8_t nibble, uint8_t mode);
static void LCD_Delay(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    HAL_Delay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f001 fb19 	bl	8003040 <HAL_Delay>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c) {
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);
 8001a1a:	2032      	movs	r0, #50	; 0x32
 8001a1c:	f001 fb10 	bl	8003040 <HAL_Delay>
    LCD_SendNibble(hi2c, 0x30, CMD_MODE);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2130      	movs	r1, #48	; 0x30
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f87c 	bl	8001b22 <LCD_SendNibble>
    HAL_Delay(5);
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f001 fb08 	bl	8003040 <HAL_Delay>
    LCD_SendNibble(hi2c, 0x30, CMD_MODE);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2130      	movs	r1, #48	; 0x30
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f874 	bl	8001b22 <LCD_SendNibble>
    HAL_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f001 fb00 	bl	8003040 <HAL_Delay>
    LCD_SendNibble(hi2c, 0x30, CMD_MODE);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2130      	movs	r1, #48	; 0x30
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f86c 	bl	8001b22 <LCD_SendNibble>
    HAL_Delay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f001 faf8 	bl	8003040 <HAL_Delay>
    LCD_SendNibble(hi2c, 0x20, CMD_MODE); // Modo 4 bits
 8001a50:	2200      	movs	r2, #0
 8001a52:	2120      	movs	r1, #32
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f864 	bl	8001b22 <LCD_SendNibble>

    LCD_SendCommand(hi2c, 0x28);  // 2 líneas, matriz 5x8
 8001a5a:	2128      	movs	r1, #40	; 0x28
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f813 	bl	8001a88 <LCD_SendCommand>
    LCD_SendCommand(hi2c, 0x0C);  // Display ON, cursor OFF
 8001a62:	210c      	movs	r1, #12
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f80f 	bl	8001a88 <LCD_SendCommand>
    LCD_SendCommand(hi2c, 0x06);  // Modo entrada
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f80b 	bl	8001a88 <LCD_SendCommand>
    LCD_SendCommand(hi2c, 0x01);  // Limpiar pantalla
 8001a72:	2101      	movs	r1, #1
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f807 	bl	8001a88 <LCD_SendCommand>
    HAL_Delay(5);
 8001a7a:	2005      	movs	r0, #5
 8001a7c:	f001 fae0 	bl	8003040 <HAL_Delay>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <LCD_SendCommand>:

void LCD_SendCommand(I2C_HandleTypeDef *hi2c, uint8_t cmd) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
    LCD_SendNibble(hi2c, cmd & 0xF0, CMD_MODE);
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f023 030f 	bic.w	r3, r3, #15
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f83e 	bl	8001b22 <LCD_SendNibble>
    LCD_SendNibble(hi2c, (cmd << 4) & 0xF0, CMD_MODE);
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2200      	movs	r2, #0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f836 	bl	8001b22 <LCD_SendNibble>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <LCD_SendData>:

void LCD_SendData(I2C_HandleTypeDef *hi2c, uint8_t data) {
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70fb      	strb	r3, [r7, #3]
    LCD_SendNibble(hi2c, data & 0xF0, DATA_MODE);
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f823 	bl	8001b22 <LCD_SendNibble>
    LCD_SendNibble(hi2c, (data << 4) & 0xF0, DATA_MODE);
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f81b 	bl	8001b22 <LCD_SendNibble>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <LCD_SendString>:

void LCD_SendString(I2C_HandleTypeDef *hi2c, const char *str) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001afe:	e007      	b.n	8001b10 <LCD_SendString+0x1c>
        LCD_SendData(hi2c, (uint8_t)(*str++));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	603a      	str	r2, [r7, #0]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffd7 	bl	8001abe <LCD_SendData>
    while (*str) {
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f3      	bne.n	8001b00 <LCD_SendString+0xc>
    }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <LCD_SendNibble>:

static void LCD_SendNibble(I2C_HandleTypeDef *hi2c, uint8_t nibble, uint8_t mode) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	70bb      	strb	r3, [r7, #2]
    uint8_t data = nibble | LCD_BACKLIGHT | mode;
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	78bb      	ldrb	r3, [r7, #2]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	73fb      	strb	r3, [r7, #15]
    LCD_SendInternal(hi2c, data | LCD_ENABLE);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f810 	bl	8001b70 <LCD_SendInternal>
    LCD_Delay();
 8001b50:	f7ff ff58 	bl	8001a04 <LCD_Delay>
    LCD_SendInternal(hi2c, data & ~LCD_ENABLE);
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f806 	bl	8001b70 <LCD_SendInternal>
    LCD_Delay();
 8001b64:	f7ff ff4e 	bl	8001a04 <LCD_Delay>
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <LCD_SendInternal>:

static void LCD_SendInternal(I2C_HandleTypeDef *hi2c, uint8_t data) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8001b7c:	1cfa      	adds	r2, r7, #3
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	214e      	movs	r1, #78	; 0x4e
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f001 fe55 	bl	8003838 <HAL_I2C_Master_Transmit>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <MPU6050_Init>:
/* USER CODE BEGIN 0 */
void MPU6050_Init(void);
void MPU6050_Read_All(void);

void MPU6050_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af04      	add	r7, sp, #16
  uint8_t data = 0x00;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1,
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	226b      	movs	r2, #107	; 0x6b
 8001bb4:	21d0      	movs	r1, #208	; 0xd0
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MPU6050_Init+0x2c>)
 8001bb8:	f001 ff3c 	bl	8003a34 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000220 	.word	0x20000220

08001bc8 <MPU6050_Read_All>:

void MPU6050_Read_All(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af04      	add	r7, sp, #16
  uint8_t raw_data[14];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H,I2C_MEMADD_SIZE_8BIT, raw_data, 14, HAL_MAX_DELAY);
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	463b      	mov	r3, r7
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	223b      	movs	r2, #59	; 0x3b
 8001be0:	21d0      	movs	r1, #208	; 0xd0
 8001be2:	4856      	ldr	r0, [pc, #344]	; (8001d3c <MPU6050_Read_All+0x174>)
 8001be4:	f002 f820 	bl	8003c28 <HAL_I2C_Mem_Read>
  //   14,                      // Cantidad de bytes a leer (Acc, Temp, Gyro)
  //   HAL_MAX_DELAY            // Esperar indefinidamente si el bus está ocupado
  // );


    AccX = (raw_data[0] << 8) | raw_data[1];
 8001be8:	783b      	ldrb	r3, [r7, #0]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	787b      	ldrb	r3, [r7, #1]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <MPU6050_Read_All+0x178>)
 8001bf8:	801a      	strh	r2, [r3, #0]
    AccY = (raw_data[2] << 8) | raw_data[3];
 8001bfa:	78bb      	ldrb	r3, [r7, #2]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	4b4e      	ldr	r3, [pc, #312]	; (8001d44 <MPU6050_Read_All+0x17c>)
 8001c0a:	801a      	strh	r2, [r3, #0]
    AccZ = (raw_data[4] << 8) | raw_data[5];
 8001c0c:	793b      	ldrb	r3, [r7, #4]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <MPU6050_Read_All+0x180>)
 8001c1c:	801a      	strh	r2, [r3, #0]
    Temp = (raw_data[6] << 8) | raw_data[7];
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <MPU6050_Read_All+0x184>)
 8001c2e:	801a      	strh	r2, [r3, #0]
    GyroX = (raw_data[8] << 8) | raw_data[9];
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	7a7b      	ldrb	r3, [r7, #9]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <MPU6050_Read_All+0x188>)
 8001c40:	801a      	strh	r2, [r3, #0]
    GyroY = (raw_data[10] << 8) | raw_data[11];
 8001c42:	7abb      	ldrb	r3, [r7, #10]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <MPU6050_Read_All+0x18c>)
 8001c52:	801a      	strh	r2, [r3, #0]
    GyroZ = (raw_data[12] << 8) | raw_data[13];
 8001c54:	7b3b      	ldrb	r3, [r7, #12]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	7b7b      	ldrb	r3, [r7, #13]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <MPU6050_Read_All+0x190>)
 8001c64:	801a      	strh	r2, [r3, #0]

    Ax = AccX / 16384.0f; //convierte a datos crudos en unidades de medidas m/s2
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <MPU6050_Read_All+0x178>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c74:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001d5c <MPU6050_Read_All+0x194>
 8001c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7c:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <MPU6050_Read_All+0x198>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
    Ay = AccY / 16384.0f;
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <MPU6050_Read_All+0x17c>)
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c90:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001d5c <MPU6050_Read_All+0x194>
 8001c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <MPU6050_Read_All+0x19c>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
    Az = AccZ / 16384.0f;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <MPU6050_Read_All+0x180>)
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cac:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001d5c <MPU6050_Read_All+0x194>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <MPU6050_Read_All+0x1a0>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
    TempC = Temp / 340.0f + 36.53f;
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <MPU6050_Read_All+0x184>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001d6c <MPU6050_Read_All+0x1a4>
 8001ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001d70 <MPU6050_Read_All+0x1a8>
 8001cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <MPU6050_Read_All+0x1ac>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]
    Gx = GyroX / 131.0f;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MPU6050_Read_All+0x188>)
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cec:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001d78 <MPU6050_Read_All+0x1b0>
 8001cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <MPU6050_Read_All+0x1b4>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
    Gy = GyroY / 131.0f;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MPU6050_Read_All+0x18c>)
 8001cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d08:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001d78 <MPU6050_Read_All+0x1b0>
 8001d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MPU6050_Read_All+0x1b8>)
 8001d12:	edc3 7a00 	vstr	s15, [r3]
    Gz = GyroZ / 131.0f;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MPU6050_Read_All+0x190>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d24:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d78 <MPU6050_Read_All+0x1b0>
 8001d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MPU6050_Read_All+0x1bc>)
 8001d2e:	edc3 7a00 	vstr	s15, [r3]

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000220 	.word	0x20000220
 8001d40:	20000334 	.word	0x20000334
 8001d44:	20000336 	.word	0x20000336
 8001d48:	20000338 	.word	0x20000338
 8001d4c:	2000033a 	.word	0x2000033a
 8001d50:	2000033c 	.word	0x2000033c
 8001d54:	2000033e 	.word	0x2000033e
 8001d58:	20000340 	.word	0x20000340
 8001d5c:	46800000 	.word	0x46800000
 8001d60:	20000344 	.word	0x20000344
 8001d64:	20000348 	.word	0x20000348
 8001d68:	2000034c 	.word	0x2000034c
 8001d6c:	43aa0000 	.word	0x43aa0000
 8001d70:	42121eb8 	.word	0x42121eb8
 8001d74:	2000035c 	.word	0x2000035c
 8001d78:	43030000 	.word	0x43030000
 8001d7c:	20000350 	.word	0x20000350
 8001d80:	20000354 	.word	0x20000354
 8001d84:	20000358 	.word	0x20000358

08001d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8c:	f001 f8e6 	bl	8002f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d90:	f000 fba2 	bl	80024d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d94:	f000 fc9c 	bl	80026d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d98:	f000 fc70 	bl	800267c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d9c:	f000 fc0a 	bl	80025b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001da0:	f000 fc36 	bl	8002610 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001da4:	f004 fbc2 	bl	800652c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001da8:	f7ff fef6 	bl	8001b98 <MPU6050_Init>
  adxl_init();  /**< Inicializa el acelerómetro ADXL345. */
 8001dac:	f7ff f94c 	bl	8001048 <adxl_init>
  HAL_Delay(100);
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f001 f945 	bl	8003040 <HAL_Delay>

  delayInit(&myDelayMPU, 1000);
 8001db6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dba:	485c      	ldr	r0, [pc, #368]	; (8001f2c <main+0x1a4>)
 8001dbc:	f7ff f8c4 	bl	8000f48 <delayInit>
  delayInit(&myDelayADXL, 500);
 8001dc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dc4:	485a      	ldr	r0, [pc, #360]	; (8001f30 <main+0x1a8>)
 8001dc6:	f7ff f8bf 	bl	8000f48 <delayInit>
  delayInit(&myDelaySD, 2000);  // Ej. 2 segundos entre escrituras
 8001dca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001dce:	4859      	ldr	r0, [pc, #356]	; (8001f34 <main+0x1ac>)
 8001dd0:	f7ff f8ba 	bl	8000f48 <delayInit>

  inicializarArchivoSD();
 8001dd4:	f000 f9c8 	bl	8002168 <inicializarArchivoSD>

  LCD_Init(&hi2c1);
 8001dd8:	4857      	ldr	r0, [pc, #348]	; (8001f38 <main+0x1b0>)
 8001dda:	f7ff fe1a 	bl	8001a12 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  switch (estadoActual)
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <main+0x1b4>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	f200 8095 	bhi.w	8001f12 <main+0x18a>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <main+0x68>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e11 	.word	0x08001e11
 8001df4:	08001e8b 	.word	0x08001e8b
 8001df8:	08001ea3 	.word	0x08001ea3
 8001dfc:	08001ebb 	.word	0x08001ebb
 8001e00:	08001ed3 	.word	0x08001ed3
 8001e04:	08001ed9 	.word	0x08001ed9
 8001e08:	08001edf 	.word	0x08001edf
 8001e0c:	08001efd 	.word	0x08001efd
	  {
	      case ESTADO_IDLE:
	          if (HAL_UART_Receive(&huart2, &rxChar, 1, 10) == HAL_OK) {
 8001e10:	230a      	movs	r3, #10
 8001e12:	2201      	movs	r2, #1
 8001e14:	494a      	ldr	r1, [pc, #296]	; (8001f40 <main+0x1b8>)
 8001e16:	484b      	ldr	r0, [pc, #300]	; (8001f44 <main+0x1bc>)
 8001e18:	f004 f803 	bl	8005e22 <HAL_UART_Receive>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d17b      	bne.n	8001f1a <main+0x192>
	              if (rxChar == '1') estadoActual = ESTADO_MPU;
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <main+0x1b8>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b31      	cmp	r3, #49	; 0x31
 8001e28:	d103      	bne.n	8001e32 <main+0xaa>
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <main+0x1b4>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
	              else if (rxChar == '4') estadoActual = ESTADO_BORRAR_SD;
	              else if (rxChar == '5') estadoActual = ESTADO_LEER_SD;
	              else if (rxChar == '6') estadoActual = ESTADO_LCD; //NO CONCLUIDO
	              else estadoActual = ESTADO_IDLE;
	          }
	          break;
 8001e30:	e073      	b.n	8001f1a <main+0x192>
	              else if (rxChar == '2') estadoActual = ESTADO_ADXL;
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <main+0x1b8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b32      	cmp	r3, #50	; 0x32
 8001e38:	d103      	bne.n	8001e42 <main+0xba>
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <main+0x1b4>)
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	701a      	strb	r2, [r3, #0]
	          break;
 8001e40:	e06b      	b.n	8001f1a <main+0x192>
	              else if (rxChar == '3') estadoActual = ESTADO_SD;
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <main+0x1b8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b33      	cmp	r3, #51	; 0x33
 8001e48:	d103      	bne.n	8001e52 <main+0xca>
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <main+0x1b4>)
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	701a      	strb	r2, [r3, #0]
	          break;
 8001e50:	e063      	b.n	8001f1a <main+0x192>
	              else if (rxChar == '4') estadoActual = ESTADO_BORRAR_SD;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <main+0x1b8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b34      	cmp	r3, #52	; 0x34
 8001e58:	d103      	bne.n	8001e62 <main+0xda>
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <main+0x1b4>)
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	701a      	strb	r2, [r3, #0]
	          break;
 8001e60:	e05b      	b.n	8001f1a <main+0x192>
	              else if (rxChar == '5') estadoActual = ESTADO_LEER_SD;
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <main+0x1b8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b35      	cmp	r3, #53	; 0x35
 8001e68:	d103      	bne.n	8001e72 <main+0xea>
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <main+0x1b4>)
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	701a      	strb	r2, [r3, #0]
	          break;
 8001e70:	e053      	b.n	8001f1a <main+0x192>
	              else if (rxChar == '6') estadoActual = ESTADO_LCD; //NO CONCLUIDO
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <main+0x1b8>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b36      	cmp	r3, #54	; 0x36
 8001e78:	d103      	bne.n	8001e82 <main+0xfa>
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <main+0x1b4>)
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	701a      	strb	r2, [r3, #0]
	          break;
 8001e80:	e04b      	b.n	8001f1a <main+0x192>
	              else estadoActual = ESTADO_IDLE;
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <main+0x1b4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
	          break;
 8001e88:	e047      	b.n	8001f1a <main+0x192>

	      case ESTADO_MPU:
	    	  if (delayRead(&myDelayMPU))
 8001e8a:	4828      	ldr	r0, [pc, #160]	; (8001f2c <main+0x1a4>)
 8001e8c:	f7ff f873 	bl	8000f76 <delayRead>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d043      	beq.n	8001f1e <main+0x196>
	    	  {
	    		 leerMPU();
 8001e96:	f000 f85b 	bl	8001f50 <leerMPU>
				 estadoActual = ESTADO_IDLE;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <main+0x1b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
	    	  }
	          break;
 8001ea0:	e03d      	b.n	8001f1e <main+0x196>

	      case ESTADO_ADXL:
	    	  if (delayRead(&myDelayADXL))
 8001ea2:	4823      	ldr	r0, [pc, #140]	; (8001f30 <main+0x1a8>)
 8001ea4:	f7ff f867 	bl	8000f76 <delayRead>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d039      	beq.n	8001f22 <main+0x19a>
	    	  {
	    		  leerADXL();
 8001eae:	f000 f8c7 	bl	8002040 <leerADXL>
				  estadoActual = ESTADO_IDLE;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <main+0x1b4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
	    	  }
	          break;
 8001eb8:	e033      	b.n	8001f22 <main+0x19a>

	      case ESTADO_SD:
	    	  if (delayRead(&myDelaySD))
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <main+0x1ac>)
 8001ebc:	f7ff f85b 	bl	8000f76 <delayRead>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02f      	beq.n	8001f26 <main+0x19e>
	    	  {
	    		  guardarDatosEnSD();
 8001ec6:	f000 fa0b 	bl	80022e0 <guardarDatosEnSD>
	    		  estadoActual = ESTADO_IDLE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <main+0x1b4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
	    	  }
	          break;
 8001ed0:	e029      	b.n	8001f26 <main+0x19e>

	      case ESTADO_BORRAR_SD:
	    	  borrarSD();
 8001ed2:	f000 fa49 	bl	8002368 <borrarSD>
	    	  break;
 8001ed6:	e027      	b.n	8001f28 <main+0x1a0>

	      case ESTADO_LEER_SD:
	    	  leerSD();
 8001ed8:	f000 fa9a 	bl	8002410 <leerSD>
	    	  break;
 8001edc:	e024      	b.n	8001f28 <main+0x1a0>

	      case ESTADO_LCD:
	    	   LCD_SendCommand(&hi2c1, 0x01);  // Limpiar pantalla
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4815      	ldr	r0, [pc, #84]	; (8001f38 <main+0x1b0>)
 8001ee2:	f7ff fdd1 	bl	8001a88 <LCD_SendCommand>
	    	   HAL_Delay(2);
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f001 f8aa 	bl	8003040 <HAL_Delay>
	    	   LCD_SendString(&hi2c1, "Hola Mundo!");
 8001eec:	4916      	ldr	r1, [pc, #88]	; (8001f48 <main+0x1c0>)
 8001eee:	4812      	ldr	r0, [pc, #72]	; (8001f38 <main+0x1b0>)
 8001ef0:	f7ff fe00 	bl	8001af4 <LCD_SendString>
	      	   estadoActual = ESTADO_IDLE;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <main+0x1b4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
	      	   break;
 8001efa:	e015      	b.n	8001f28 <main+0x1a0>


	      case ESTADO_ERROR:
	          HAL_UART_Transmit(&huart2, (uint8_t*)" Error detectado!\r\n", 19, HAL_MAX_DELAY);
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	2213      	movs	r2, #19
 8001f02:	4912      	ldr	r1, [pc, #72]	; (8001f4c <main+0x1c4>)
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <main+0x1bc>)
 8001f06:	f003 fefa 	bl	8005cfe <HAL_UART_Transmit>
	          estadoActual = ESTADO_IDLE;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <main+0x1b4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
	          break;
 8001f10:	e00a      	b.n	8001f28 <main+0x1a0>

	      default:
	          estadoActual = ESTADO_IDLE;
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <main+0x1b4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
	          break;
 8001f18:	e006      	b.n	8001f28 <main+0x1a0>
	          break;
 8001f1a:	bf00      	nop
 8001f1c:	e75f      	b.n	8001dde <main+0x56>
	          break;
 8001f1e:	bf00      	nop
 8001f20:	e75d      	b.n	8001dde <main+0x56>
	          break;
 8001f22:	bf00      	nop
 8001f24:	e75b      	b.n	8001dde <main+0x56>
	          break;
 8001f26:	bf00      	nop
	  switch (estadoActual)
 8001f28:	e759      	b.n	8001dde <main+0x56>
 8001f2a:	bf00      	nop
 8001f2c:	20000310 	.word	0x20000310
 8001f30:	2000031c 	.word	0x2000031c
 8001f34:	20000328 	.word	0x20000328
 8001f38:	20000220 	.word	0x20000220
 8001f3c:	2000021e 	.word	0x2000021e
 8001f40:	200009b0 	.word	0x200009b0
 8001f44:	200002cc 	.word	0x200002cc
 8001f48:	0800bd90 	.word	0x0800bd90
 8001f4c:	0800bd9c 	.word	0x0800bd9c

08001f50 <leerMPU>:
    }
  /* USER CODE END 3 */
}

void leerMPU(void)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b096      	sub	sp, #88	; 0x58
 8001f56:	af0e      	add	r7, sp, #56	; 0x38
  MPU6050_Read_All();
 8001f58:	f7ff fe36 	bl	8001bc8 <MPU6050_Read_All>
  int bytes = snprintf(msg, sizeof(msg),
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <leerMPU+0xc4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fb11 	bl	8000588 <__aeabi_f2d>
 8001f66:	4680      	mov	r8, r0
 8001f68:	4689      	mov	r9, r1
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <leerMPU+0xc8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fb0a 	bl	8000588 <__aeabi_f2d>
 8001f74:	4682      	mov	sl, r0
 8001f76:	468b      	mov	fp, r1
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <leerMPU+0xcc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fb03 	bl	8000588 <__aeabi_f2d>
 8001f82:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <leerMPU+0xd0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fafc 	bl	8000588 <__aeabi_f2d>
 8001f90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <leerMPU+0xd4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe faf5 	bl	8000588 <__aeabi_f2d>
 8001f9e:	e9c7 0100 	strd	r0, r1, [r7]
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <leerMPU+0xd8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe faee 	bl	8000588 <__aeabi_f2d>
 8001fac:	4604      	mov	r4, r0
 8001fae:	460d      	mov	r5, r1
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <leerMPU+0xdc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fae7 	bl	8000588 <__aeabi_f2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001fc2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001fc6:	ed97 7b00 	vldr	d7, [r7]
 8001fca:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001fce:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001fd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001fde:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001fe2:	e9cd 8900 	strd	r8, r9, [sp]
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <leerMPU+0xe0>)
 8001fe8:	2196      	movs	r1, #150	; 0x96
 8001fea:	4812      	ldr	r0, [pc, #72]	; (8002034 <leerMPU+0xe4>)
 8001fec:	f007 fc36 	bl	800985c <sniprintf>
 8001ff0:	61f8      	str	r0, [r7, #28]
						   "MPU Acelerometro[g]:  X=%.4f  Y=%.4f  Z=%.4f\r\n"
						   "MPU Giroscopio[gr/s]: X=%.4f  Y=%.4f  Z=%.4f\r\n"
						   "MPU Temperatura[C]:   %.2f\r\n\r\n",
						   Ax, Ay, Az, Gx, Gy, Gz, TempC);
   if (bytes > 0)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dd07      	ble.n	8002008 <leerMPU+0xb8>
   {
	   HAL_UART_Transmit(&huart2, (uint8_t*)msg, bytes, HAL_MAX_DELAY);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <leerMPU+0xe4>)
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <leerMPU+0xe8>)
 8002004:	f003 fe7b 	bl	8005cfe <HAL_UART_Transmit>
   }
}
 8002008:	bf00      	nop
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	20000344 	.word	0x20000344
 8002018:	20000348 	.word	0x20000348
 800201c:	2000034c 	.word	0x2000034c
 8002020:	20000350 	.word	0x20000350
 8002024:	20000354 	.word	0x20000354
 8002028:	20000358 	.word	0x20000358
 800202c:	2000035c 	.word	0x2000035c
 8002030:	0800bdb0 	.word	0x0800bdb0
 8002034:	20000360 	.word	0x20000360
 8002038:	200002cc 	.word	0x200002cc
 800203c:	00000000 	.word	0x00000000

08002040 <leerADXL>:

void leerADXL(void)
{
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af06      	add	r7, sp, #24
	adxl_read(DATA_START_ADDR, data_rec);
 8002046:	493e      	ldr	r1, [pc, #248]	; (8002140 <leerADXL+0x100>)
 8002048:	2032      	movs	r0, #50	; 0x32
 800204a:	f7fe ffbf 	bl	8000fcc <adxl_read>
	x = ((data_rec[1] << 8) | data_rec[0]);
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <leerADXL+0x100>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	b21a      	sxth	r2, r3
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <leerADXL+0x100>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <leerADXL+0x104>)
 8002062:	801a      	strh	r2, [r3, #0]
	y = ((data_rec[3] << 8) | data_rec[2]);
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <leerADXL+0x100>)
 8002066:	78db      	ldrb	r3, [r3, #3]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b21a      	sxth	r2, r3
 800206c:	4b34      	ldr	r3, [pc, #208]	; (8002140 <leerADXL+0x100>)
 800206e:	789b      	ldrb	r3, [r3, #2]
 8002070:	b21b      	sxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b21a      	sxth	r2, r3
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <leerADXL+0x108>)
 8002078:	801a      	strh	r2, [r3, #0]
	z = ((data_rec[5] << 8) | data_rec[4]);
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <leerADXL+0x100>)
 800207c:	795b      	ldrb	r3, [r3, #5]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b21a      	sxth	r2, r3
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <leerADXL+0x100>)
 8002084:	791b      	ldrb	r3, [r3, #4]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <leerADXL+0x10c>)
 800208e:	801a      	strh	r2, [r3, #0]
	xg = x * 0.0078;
 8002090:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <leerADXL+0x104>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa64 	bl	8000564 <__aeabi_i2d>
 800209c:	a326      	add	r3, pc, #152	; (adr r3, 8002138 <leerADXL+0xf8>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fac9 	bl	8000638 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4929      	ldr	r1, [pc, #164]	; (8002150 <leerADXL+0x110>)
 80020ac:	e9c1 2300 	strd	r2, r3, [r1]
	yg = y * 0.0078;
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <leerADXL+0x108>)
 80020b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa54 	bl	8000564 <__aeabi_i2d>
 80020bc:	a31e      	add	r3, pc, #120	; (adr r3, 8002138 <leerADXL+0xf8>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fab9 	bl	8000638 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4922      	ldr	r1, [pc, #136]	; (8002154 <leerADXL+0x114>)
 80020cc:	e9c1 2300 	strd	r2, r3, [r1]
	zg = z * 0.0078;
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <leerADXL+0x10c>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa44 	bl	8000564 <__aeabi_i2d>
 80020dc:	a316      	add	r3, pc, #88	; (adr r3, 8002138 <leerADXL+0xf8>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe faa9 	bl	8000638 <__aeabi_dmul>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	491b      	ldr	r1, [pc, #108]	; (8002158 <leerADXL+0x118>)
 80020ec:	e9c1 2300 	strd	r2, r3, [r1]
	int bytes = snprintf(msg2, sizeof(msg2), "ADXL345[g]: X=%.4f  Y=%.4f  Z=%.4f\r\n\r\n", xg, yg, zg);
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <leerADXL+0x110>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4917      	ldr	r1, [pc, #92]	; (8002154 <leerADXL+0x114>)
 80020f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020fc:	4c16      	ldr	r4, [pc, #88]	; (8002158 <leerADXL+0x118>)
 80020fe:	e9d4 4500 	ldrd	r4, r5, [r4]
 8002102:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800210a:	e9cd 2300 	strd	r2, r3, [sp]
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <leerADXL+0x11c>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	4813      	ldr	r0, [pc, #76]	; (8002160 <leerADXL+0x120>)
 8002114:	f007 fba2 	bl	800985c <sniprintf>
 8002118:	6078      	str	r0, [r7, #4]
	if (bytes > 0)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	dd07      	ble.n	8002130 <leerADXL+0xf0>
	{
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg2, bytes, HAL_MAX_DELAY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	b29a      	uxth	r2, r3
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
 8002128:	490d      	ldr	r1, [pc, #52]	; (8002160 <leerADXL+0x120>)
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <leerADXL+0x124>)
 800212c:	f003 fde7 	bl	8005cfe <HAL_UART_Transmit>
	}
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bdb0      	pop	{r4, r5, r7, pc}
 8002138:	8e8a71de 	.word	0x8e8a71de
 800213c:	3f7ff2e4 	.word	0x3f7ff2e4
 8002140:	200009d0 	.word	0x200009d0
 8002144:	200009b2 	.word	0x200009b2
 8002148:	200009b4 	.word	0x200009b4
 800214c:	200009b6 	.word	0x200009b6
 8002150:	200009b8 	.word	0x200009b8
 8002154:	200009c0 	.word	0x200009c0
 8002158:	200009c8 	.word	0x200009c8
 800215c:	0800be2c 	.word	0x0800be2c
 8002160:	200003f8 	.word	0x200003f8
 8002164:	200002cc 	.word	0x200002cc

08002168 <inicializarArchivoSD>:

void inicializarArchivoSD(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
    if (f_mount(&fs, "", 0) != FR_OK) Error_Handler();
 800216c:	2200      	movs	r2, #0
 800216e:	494e      	ldr	r1, [pc, #312]	; (80022a8 <inicializarArchivoSD+0x140>)
 8002170:	484e      	ldr	r0, [pc, #312]	; (80022ac <inicializarArchivoSD+0x144>)
 8002172:	f005 ff8d 	bl	8008090 <f_mount>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <inicializarArchivoSD+0x18>
 800217c:	f000 fb2a 	bl	80027d4 <Error_Handler>

    if (f_open(&fil, "la_roca.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8002180:	2213      	movs	r2, #19
 8002182:	494b      	ldr	r1, [pc, #300]	; (80022b0 <inicializarArchivoSD+0x148>)
 8002184:	484b      	ldr	r0, [pc, #300]	; (80022b4 <inicializarArchivoSD+0x14c>)
 8002186:	f005 ffc9 	bl	800811c <f_open>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <inicializarArchivoSD+0x2c>
        Error_Handler();
 8002190:	f000 fb20 	bl	80027d4 <Error_Handler>

    // Opcional: verificar espacio
    if (f_getfree("", &fre_clust, &pfs) != FR_OK) Error_Handler();
 8002194:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <inicializarArchivoSD+0x150>)
 8002196:	4949      	ldr	r1, [pc, #292]	; (80022bc <inicializarArchivoSD+0x154>)
 8002198:	4843      	ldr	r0, [pc, #268]	; (80022a8 <inicializarArchivoSD+0x140>)
 800219a:	f006 fcd9 	bl	8008b50 <f_getfree>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <inicializarArchivoSD+0x40>
 80021a4:	f000 fb16 	bl	80027d4 <Error_Handler>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <inicializarArchivoSD+0x150>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	3b02      	subs	r3, #2
 80021b0:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <inicializarArchivoSD+0x150>)
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	8952      	ldrh	r2, [r2, #10]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9c2 	bl	8000544 <__aeabi_ui2d>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <inicializarArchivoSD+0x158>)
 80021c6:	f7fe fa37 	bl	8000638 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fd09 	bl	8000be8 <__aeabi_d2uiz>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <inicializarArchivoSD+0x15c>)
 80021da:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <inicializarArchivoSD+0x150>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	895b      	ldrh	r3, [r3, #10]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <inicializarArchivoSD+0x154>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9a9 	bl	8000544 <__aeabi_ui2d>
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <inicializarArchivoSD+0x158>)
 80021f8:	f7fe fa1e 	bl	8000638 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fcf0 	bl	8000be8 <__aeabi_d2uiz>
 8002208:	4603      	mov	r3, r0
 800220a:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <inicializarArchivoSD+0x160>)
 800220c:	6013      	str	r3, [r2, #0]
    if (freeSpace < 1) Error_Handler();
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <inicializarArchivoSD+0x160>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <inicializarArchivoSD+0xb2>
 8002216:	f000 fadd 	bl	80027d4 <Error_Handler>

    // Escribir datos iniciales
    f_puts("CESE\n", &fil);
 800221a:	4926      	ldr	r1, [pc, #152]	; (80022b4 <inicializarArchivoSD+0x14c>)
 800221c:	482b      	ldr	r0, [pc, #172]	; (80022cc <inicializarArchivoSD+0x164>)
 800221e:	f006 fe00 	bl	8008e22 <f_puts>
    f_puts("STM32F446RE SD Card via SPI2\n", &fil);
 8002222:	4924      	ldr	r1, [pc, #144]	; (80022b4 <inicializarArchivoSD+0x14c>)
 8002224:	482a      	ldr	r0, [pc, #168]	; (80022d0 <inicializarArchivoSD+0x168>)
 8002226:	f006 fdfc 	bl	8008e22 <f_puts>
    f_puts("Cristo la Roca!!!\r\n", &fil);
 800222a:	4922      	ldr	r1, [pc, #136]	; (80022b4 <inicializarArchivoSD+0x14c>)
 800222c:	4829      	ldr	r0, [pc, #164]	; (80022d4 <inicializarArchivoSD+0x16c>)
 800222e:	f006 fdf8 	bl	8008e22 <f_puts>

    if (f_close(&fil) != FR_OK) Error_Handler();
 8002232:	4820      	ldr	r0, [pc, #128]	; (80022b4 <inicializarArchivoSD+0x14c>)
 8002234:	f006 fc62 	bl	8008afc <f_close>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <inicializarArchivoSD+0xda>
 800223e:	f000 fac9 	bl	80027d4 <Error_Handler>

    // Lectura opcional
    if (f_open(&fil, "la_roca.txt", FA_READ) != FR_OK) Error_Handler();
 8002242:	2201      	movs	r2, #1
 8002244:	491a      	ldr	r1, [pc, #104]	; (80022b0 <inicializarArchivoSD+0x148>)
 8002246:	481b      	ldr	r0, [pc, #108]	; (80022b4 <inicializarArchivoSD+0x14c>)
 8002248:	f005 ff68 	bl	800811c <f_open>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <inicializarArchivoSD+0x106>
 8002252:	f000 fabf 	bl	80027d4 <Error_Handler>
    while (f_gets(buffer, sizeof(buffer), &fil)) {
 8002256:	e00a      	b.n	800226e <inicializarArchivoSD+0x106>
    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002258:	481f      	ldr	r0, [pc, #124]	; (80022d8 <inicializarArchivoSD+0x170>)
 800225a:	f7fd ffd9 	bl	8000210 <strlen>
 800225e:	4603      	mov	r3, r0
 8002260:	b29a      	uxth	r2, r3
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	491c      	ldr	r1, [pc, #112]	; (80022d8 <inicializarArchivoSD+0x170>)
 8002268:	481c      	ldr	r0, [pc, #112]	; (80022dc <inicializarArchivoSD+0x174>)
 800226a:	f003 fd48 	bl	8005cfe <HAL_UART_Transmit>
    while (f_gets(buffer, sizeof(buffer), &fil)) {
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <inicializarArchivoSD+0x14c>)
 8002270:	21c8      	movs	r1, #200	; 0xc8
 8002272:	4819      	ldr	r0, [pc, #100]	; (80022d8 <inicializarArchivoSD+0x170>)
 8002274:	f006 fd21 	bl	8008cba <f_gets>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ec      	bne.n	8002258 <inicializarArchivoSD+0xf0>
    }
    if (f_close(&fil) != FR_OK) Error_Handler();
 800227e:	480d      	ldr	r0, [pc, #52]	; (80022b4 <inicializarArchivoSD+0x14c>)
 8002280:	f006 fc3c 	bl	8008afc <f_close>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <inicializarArchivoSD+0x126>
 800228a:	f000 faa3 	bl	80027d4 <Error_Handler>

    if (f_mount(NULL, "", 1) != FR_OK) Error_Handler();
 800228e:	2201      	movs	r2, #1
 8002290:	4905      	ldr	r1, [pc, #20]	; (80022a8 <inicializarArchivoSD+0x140>)
 8002292:	2000      	movs	r0, #0
 8002294:	f005 fefc 	bl	8008090 <f_mount>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <inicializarArchivoSD+0x13a>
 800229e:	f000 fa99 	bl	80027d4 <Error_Handler>
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	0800be54 	.word	0x0800be54
 80022ac:	20000478 	.word	0x20000478
 80022b0:	0800be58 	.word	0x0800be58
 80022b4:	200006ac 	.word	0x200006ac
 80022b8:	200006a8 	.word	0x200006a8
 80022bc:	200008dc 	.word	0x200008dc
 80022c0:	3fe00000 	.word	0x3fe00000
 80022c4:	200008e0 	.word	0x200008e0
 80022c8:	200008e4 	.word	0x200008e4
 80022cc:	0800be64 	.word	0x0800be64
 80022d0:	0800be6c 	.word	0x0800be6c
 80022d4:	0800be8c 	.word	0x0800be8c
 80022d8:	200008e8 	.word	0x200008e8
 80022dc:	200002cc 	.word	0x200002cc

080022e0 <guardarDatosEnSD>:

void guardarDatosEnSD(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
    if (f_mount(&fs, "", 0) != FR_OK) {
 80022e4:	2200      	movs	r2, #0
 80022e6:	4917      	ldr	r1, [pc, #92]	; (8002344 <guardarDatosEnSD+0x64>)
 80022e8:	4817      	ldr	r0, [pc, #92]	; (8002348 <guardarDatosEnSD+0x68>)
 80022ea:	f005 fed1 	bl	8008090 <f_mount>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <guardarDatosEnSD+0x1c>
        estadoActual = ESTADO_ERROR;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <guardarDatosEnSD+0x6c>)
 80022f6:	2207      	movs	r2, #7
 80022f8:	701a      	strb	r2, [r3, #0]
        return;
 80022fa:	e022      	b.n	8002342 <guardarDatosEnSD+0x62>
    }

    if (f_open(&fil, "la_roca.txt", FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 80022fc:	2232      	movs	r2, #50	; 0x32
 80022fe:	4914      	ldr	r1, [pc, #80]	; (8002350 <guardarDatosEnSD+0x70>)
 8002300:	4814      	ldr	r0, [pc, #80]	; (8002354 <guardarDatosEnSD+0x74>)
 8002302:	f005 ff0b 	bl	800811c <f_open>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <guardarDatosEnSD+0x34>
        estadoActual = ESTADO_ERROR;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <guardarDatosEnSD+0x6c>)
 800230e:	2207      	movs	r2, #7
 8002310:	701a      	strb	r2, [r3, #0]
        return;
 8002312:	e016      	b.n	8002342 <guardarDatosEnSD+0x62>
    }

    f_puts(msg, &fil);
 8002314:	490f      	ldr	r1, [pc, #60]	; (8002354 <guardarDatosEnSD+0x74>)
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <guardarDatosEnSD+0x78>)
 8002318:	f006 fd83 	bl	8008e22 <f_puts>
    f_puts(msg2, &fil);
 800231c:	490d      	ldr	r1, [pc, #52]	; (8002354 <guardarDatosEnSD+0x74>)
 800231e:	480f      	ldr	r0, [pc, #60]	; (800235c <guardarDatosEnSD+0x7c>)
 8002320:	f006 fd7f 	bl	8008e22 <f_puts>
    f_close(&fil);
 8002324:	480b      	ldr	r0, [pc, #44]	; (8002354 <guardarDatosEnSD+0x74>)
 8002326:	f006 fbe9 	bl	8008afc <f_close>
    f_mount(NULL, "", 1);
 800232a:	2201      	movs	r2, #1
 800232c:	4905      	ldr	r1, [pc, #20]	; (8002344 <guardarDatosEnSD+0x64>)
 800232e:	2000      	movs	r0, #0
 8002330:	f005 feae 	bl	8008090 <f_mount>

    HAL_UART_Transmit(&huart2, (uint8_t*)"Datos guardados en SD.\r\n", 25, HAL_MAX_DELAY);
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	2219      	movs	r2, #25
 800233a:	4909      	ldr	r1, [pc, #36]	; (8002360 <guardarDatosEnSD+0x80>)
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <guardarDatosEnSD+0x84>)
 800233e:	f003 fcde 	bl	8005cfe <HAL_UART_Transmit>


}
 8002342:	bd80      	pop	{r7, pc}
 8002344:	0800be54 	.word	0x0800be54
 8002348:	20000478 	.word	0x20000478
 800234c:	2000021e 	.word	0x2000021e
 8002350:	0800be58 	.word	0x0800be58
 8002354:	200006ac 	.word	0x200006ac
 8002358:	20000360 	.word	0x20000360
 800235c:	200003f8 	.word	0x200003f8
 8002360:	0800bea0 	.word	0x0800bea0
 8002364:	200002cc 	.word	0x200002cc

08002368 <borrarSD>:

void borrarSD(void)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
    if (f_mount(&fs, "", 0) == FR_OK)
 800236e:	2200      	movs	r2, #0
 8002370:	491f      	ldr	r1, [pc, #124]	; (80023f0 <borrarSD+0x88>)
 8002372:	4820      	ldr	r0, [pc, #128]	; (80023f4 <borrarSD+0x8c>)
 8002374:	f005 fe8c 	bl	8008090 <f_mount>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d130      	bne.n	80023e0 <borrarSD+0x78>
    {
        if (f_open(&fil, "la_roca.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 800237e:	220a      	movs	r2, #10
 8002380:	491d      	ldr	r1, [pc, #116]	; (80023f8 <borrarSD+0x90>)
 8002382:	481e      	ldr	r0, [pc, #120]	; (80023fc <borrarSD+0x94>)
 8002384:	f005 feca 	bl	800811c <f_open>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d124      	bne.n	80023d8 <borrarSD+0x70>
        {
            // ✅ Archivo truncado (contenido eliminado)
            f_puts("Archivo reiniciado.\r\n", &fil);  // Opcional: escribir línea de cabecera
 800238e:	491b      	ldr	r1, [pc, #108]	; (80023fc <borrarSD+0x94>)
 8002390:	481b      	ldr	r0, [pc, #108]	; (8002400 <borrarSD+0x98>)
 8002392:	f006 fd46 	bl	8008e22 <f_puts>
            f_close(&fil);
 8002396:	4819      	ldr	r0, [pc, #100]	; (80023fc <borrarSD+0x94>)
 8002398:	f006 fbb0 	bl	8008afc <f_close>
            char msg[] = "Contenido del archivo borrado.\r\n";
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <borrarSD+0x9c>)
 800239e:	1d3c      	adds	r4, r7, #4
 80023a0:	461d      	mov	r5, r3
 80023a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fd ff2d 	bl	8000210 <strlen>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	1d39      	adds	r1, r7, #4
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
 80023c0:	4811      	ldr	r0, [pc, #68]	; (8002408 <borrarSD+0xa0>)
 80023c2:	f003 fc9c 	bl	8005cfe <HAL_UART_Transmit>
        else
        {
            estadoActual = ESTADO_ERROR;
            return;
        }
        f_mount(NULL, "", 1);
 80023c6:	2201      	movs	r2, #1
 80023c8:	4909      	ldr	r1, [pc, #36]	; (80023f0 <borrarSD+0x88>)
 80023ca:	2000      	movs	r0, #0
 80023cc:	f005 fe60 	bl	8008090 <f_mount>
    } else {
        estadoActual = ESTADO_ERROR;
        return;
    }
    estadoActual = ESTADO_IDLE;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <borrarSD+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e007      	b.n	80023e8 <borrarSD+0x80>
            estadoActual = ESTADO_ERROR;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <borrarSD+0xa4>)
 80023da:	2207      	movs	r2, #7
 80023dc:	701a      	strb	r2, [r3, #0]
            return;
 80023de:	e003      	b.n	80023e8 <borrarSD+0x80>
        estadoActual = ESTADO_ERROR;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <borrarSD+0xa4>)
 80023e2:	2207      	movs	r2, #7
 80023e4:	701a      	strb	r2, [r3, #0]
        return;
 80023e6:	bf00      	nop
}
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	0800be54 	.word	0x0800be54
 80023f4:	20000478 	.word	0x20000478
 80023f8:	0800be58 	.word	0x0800be58
 80023fc:	200006ac 	.word	0x200006ac
 8002400:	0800bebc 	.word	0x0800bebc
 8002404:	0800bed4 	.word	0x0800bed4
 8002408:	200002cc 	.word	0x200002cc
 800240c:	2000021e 	.word	0x2000021e

08002410 <leerSD>:


void leerSD(void)
{
 8002410:	b5b0      	push	{r4, r5, r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
    if (f_mount(&fs, "", 0) == FR_OK)
 8002416:	2200      	movs	r2, #0
 8002418:	4927      	ldr	r1, [pc, #156]	; (80024b8 <leerSD+0xa8>)
 800241a:	4828      	ldr	r0, [pc, #160]	; (80024bc <leerSD+0xac>)
 800241c:	f005 fe38 	bl	8008090 <f_mount>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d141      	bne.n	80024aa <leerSD+0x9a>
    {
        if (f_open(&fil, "la_roca.txt", FA_READ) == FR_OK)
 8002426:	2201      	movs	r2, #1
 8002428:	4925      	ldr	r1, [pc, #148]	; (80024c0 <leerSD+0xb0>)
 800242a:	4826      	ldr	r0, [pc, #152]	; (80024c4 <leerSD+0xb4>)
 800242c:	f005 fe76 	bl	800811c <f_open>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d135      	bne.n	80024a2 <leerSD+0x92>
        {
            while (f_gets(buffer, sizeof(buffer), &fil))
 8002436:	e00a      	b.n	800244e <leerSD+0x3e>
            {
                HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002438:	4823      	ldr	r0, [pc, #140]	; (80024c8 <leerSD+0xb8>)
 800243a:	f7fd fee9 	bl	8000210 <strlen>
 800243e:	4603      	mov	r3, r0
 8002440:	b29a      	uxth	r2, r3
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	4920      	ldr	r1, [pc, #128]	; (80024c8 <leerSD+0xb8>)
 8002448:	4820      	ldr	r0, [pc, #128]	; (80024cc <leerSD+0xbc>)
 800244a:	f003 fc58 	bl	8005cfe <HAL_UART_Transmit>
            while (f_gets(buffer, sizeof(buffer), &fil))
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <leerSD+0xb4>)
 8002450:	21c8      	movs	r1, #200	; 0xc8
 8002452:	481d      	ldr	r0, [pc, #116]	; (80024c8 <leerSD+0xb8>)
 8002454:	f006 fc31 	bl	8008cba <f_gets>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ec      	bne.n	8002438 <leerSD+0x28>
            }
            f_close(&fil);
 800245e:	4819      	ldr	r0, [pc, #100]	; (80024c4 <leerSD+0xb4>)
 8002460:	f006 fb4c 	bl	8008afc <f_close>
            char fin[] = "\r\nFin de lectura SD\r\n";
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <leerSD+0xc0>)
 8002466:	463c      	mov	r4, r7
 8002468:	461d      	mov	r5, r3
 800246a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002472:	6020      	str	r0, [r4, #0]
 8002474:	3404      	adds	r4, #4
 8002476:	8021      	strh	r1, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)fin, strlen(fin), HAL_MAX_DELAY);
 8002478:	463b      	mov	r3, r7
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd fec8 	bl	8000210 <strlen>
 8002480:	4603      	mov	r3, r0
 8002482:	b29a      	uxth	r2, r3
 8002484:	4639      	mov	r1, r7
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	4810      	ldr	r0, [pc, #64]	; (80024cc <leerSD+0xbc>)
 800248c:	f003 fc37 	bl	8005cfe <HAL_UART_Transmit>
        else
        {
            estadoActual = ESTADO_ERROR;
            return;
        }
        f_mount(NULL, "", 1);
 8002490:	2201      	movs	r2, #1
 8002492:	4909      	ldr	r1, [pc, #36]	; (80024b8 <leerSD+0xa8>)
 8002494:	2000      	movs	r0, #0
 8002496:	f005 fdfb 	bl	8008090 <f_mount>
    else
    {
        estadoActual = ESTADO_ERROR;
        return;
    }
    estadoActual = ESTADO_IDLE;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <leerSD+0xc4>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e007      	b.n	80024b2 <leerSD+0xa2>
            estadoActual = ESTADO_ERROR;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <leerSD+0xc4>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	701a      	strb	r2, [r3, #0]
            return;
 80024a8:	e003      	b.n	80024b2 <leerSD+0xa2>
        estadoActual = ESTADO_ERROR;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <leerSD+0xc4>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	701a      	strb	r2, [r3, #0]
        return;
 80024b0:	bf00      	nop
}
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	0800be54 	.word	0x0800be54
 80024bc:	20000478 	.word	0x20000478
 80024c0:	0800be58 	.word	0x0800be58
 80024c4:	200006ac 	.word	0x200006ac
 80024c8:	200008e8 	.word	0x200008e8
 80024cc:	200002cc 	.word	0x200002cc
 80024d0:	0800bef8 	.word	0x0800bef8
 80024d4:	2000021e 	.word	0x2000021e

080024d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b094      	sub	sp, #80	; 0x50
 80024dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	2234      	movs	r2, #52	; 0x34
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f006 fd46 	bl	8008f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <SystemClock_Config+0xd4>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <SystemClock_Config+0xd4>)
 8002506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250a:	6413      	str	r3, [r2, #64]	; 0x40
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <SystemClock_Config+0xd4>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002518:	2300      	movs	r3, #0
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <SystemClock_Config+0xd8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <SystemClock_Config+0xd8>)
 8002526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <SystemClock_Config+0xd8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002538:	2302      	movs	r3, #2
 800253a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253c:	2301      	movs	r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002540:	2310      	movs	r3, #16
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002544:	2302      	movs	r3, #2
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002548:	2300      	movs	r3, #0
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800254c:	2310      	movs	r3, #16
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002556:	2304      	movs	r3, #4
 8002558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800255a:	2302      	movs	r3, #2
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800255e:	2302      	movs	r3, #2
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fcac 	bl	8004ec4 <HAL_RCC_OscConfig>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002572:	f000 f92f 	bl	80027d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002576:	230f      	movs	r3, #15
 8002578:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257a:	2302      	movs	r3, #2
 800257c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	2102      	movs	r1, #2
 8002592:	4618      	mov	r0, r3
 8002594:	f002 f94c 	bl	8004830 <HAL_RCC_ClockConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800259e:	f000 f919 	bl	80027d4 <Error_Handler>
  }
}
 80025a2:	bf00      	nop
 80025a4:	3750      	adds	r7, #80	; 0x50
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000

080025b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_I2C1_Init+0x50>)
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <MX_I2C1_Init+0x54>)
 80025bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_I2C1_Init+0x50>)
 80025c0:	4a12      	ldr	r2, [pc, #72]	; (800260c <MX_I2C1_Init+0x58>)
 80025c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_I2C1_Init+0x50>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_I2C1_Init+0x50>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_I2C1_Init+0x50>)
 80025d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <MX_I2C1_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_I2C1_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <MX_I2C1_Init+0x50>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_I2C1_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <MX_I2C1_Init+0x50>)
 80025f2:	f000 ffdd 	bl	80035b0 <HAL_I2C_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025fc:	f000 f8ea 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000220 	.word	0x20000220
 8002608:	40005400 	.word	0x40005400
 800260c:	000186a0 	.word	0x000186a0

08002610 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_SPI2_Init+0x64>)
 8002616:	4a18      	ldr	r2, [pc, #96]	; (8002678 <MX_SPI2_Init+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_SPI2_Init+0x64>)
 800261c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002620:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_SPI2_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <MX_SPI2_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_SPI2_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_SPI2_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_SPI2_Init+0x64>)
 800263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002640:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_SPI2_Init+0x64>)
 8002644:	2230      	movs	r2, #48	; 0x30
 8002646:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <MX_SPI2_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_SPI2_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <MX_SPI2_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_SPI2_Init+0x64>)
 800265c:	220a      	movs	r2, #10
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <MX_SPI2_Init+0x64>)
 8002662:	f002 fecd 	bl	8005400 <HAL_SPI_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800266c:	f000 f8b2 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000274 	.word	0x20000274
 8002678:	40003800 	.word	0x40003800

0800267c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <MX_USART2_UART_Init+0x50>)
 8002684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 8002688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800268c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 80026a2:	220c      	movs	r2, #12
 80026a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_USART2_UART_Init+0x4c>)
 80026b4:	f003 fad6 	bl	8005c64 <HAL_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026be:	f000 f889 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002cc 	.word	0x200002cc
 80026cc:	40004400 	.word	0x40004400

080026d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <MX_GPIO_Init+0xf4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <MX_GPIO_Init+0xf4>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <MX_GPIO_Init+0xf4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <MX_GPIO_Init+0xf4>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <MX_GPIO_Init+0xf4>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <MX_GPIO_Init+0xf4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]

  //Configure GPIO pin Output Level
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2110      	movs	r1, #16
 800275a:	481b      	ldr	r0, [pc, #108]	; (80027c8 <MX_GPIO_Init+0xf8>)
 800275c:	f000 ff0e 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002766:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800276a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4815      	ldr	r0, [pc, #84]	; (80027cc <MX_GPIO_Init+0xfc>)
 8002778:	f000 fd6c 	bl	8003254 <HAL_GPIO_Init>

  //Configure GPIO pin : PA4
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800277c:	2310      	movs	r3, #16
 800277e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002780:	2301      	movs	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <MX_GPIO_Init+0xf8>)
 8002794:	f000 fd5e 	bl	8003254 <HAL_GPIO_Init>

  // Configure SPI2 GPIOs: PB13=SCK, PB14=MISO, PB15=MOSI
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002798:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800279c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Si tu módulo SD no tiene pull-up en MISO, considera PULLUP aquí
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027aa:	2305      	movs	r3, #5
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_GPIO_Init+0x100>)
 80027b6:	f000 fd4d 	bl	8003254 <HAL_GPIO_Init>

}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020400 	.word	0x40020400

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027dc:	e7fe      	b.n	80027dc <Error_Handler+0x8>
	...

080027e0 <spi_gpio_init>:
 *
 * Configura PA5 (SCK), PA6 (MISO), PA7 (MOSI) en modo alternativo
 * y PA9 como salida para la selección de esclavo (CS).
 */
void spi_gpio_init(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR	|= GPIOAEN;
 80027e4:	4b41      	ldr	r3, [pc, #260]	; (80028ec <spi_gpio_init+0x10c>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	4a40      	ldr	r2, [pc, #256]	; (80028ec <spi_gpio_init+0x10c>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6313      	str	r3, [r2, #48]	; 0x30

	/* PA5 */
	GPIOA->MODER &= ~(1U << 10);
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <spi_gpio_init+0x110>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <spi_gpio_init+0x110>)
 80027f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << 11);
 80027fc:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <spi_gpio_init+0x110>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a3b      	ldr	r2, [pc, #236]	; (80028f0 <spi_gpio_init+0x110>)
 8002802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002806:	6013      	str	r3, [r2, #0]

	/* PA6 */
	GPIOA->MODER &= ~(1U << 12);
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <spi_gpio_init+0x110>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <spi_gpio_init+0x110>)
 800280e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002812:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << 13);
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <spi_gpio_init+0x110>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <spi_gpio_init+0x110>)
 800281a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800281e:	6013      	str	r3, [r2, #0]

	/* PA7 */
	GPIOA->MODER &= ~(1U << 14);
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <spi_gpio_init+0x110>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <spi_gpio_init+0x110>)
 8002826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << 15);
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <spi_gpio_init+0x110>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <spi_gpio_init+0x110>)
 8002832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002836:	6013      	str	r3, [r2, #0]

	/* Set PA9 as output pin */
	GPIOA->MODER |=  (1U << 18);
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <spi_gpio_init+0x110>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <spi_gpio_init+0x110>)
 800283e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 19);
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <spi_gpio_init+0x110>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <spi_gpio_init+0x110>)
 800284a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800284e:	6013      	str	r3, [r2, #0]

	/* Configura funciones alternativas para SPI en PA5, PA6, PA7 */
	/* PA5 */
	GPIOA->AFR[0] |=  (1U << 20);
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <spi_gpio_init+0x110>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <spi_gpio_init+0x110>)
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 21);
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <spi_gpio_init+0x110>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <spi_gpio_init+0x110>)
 8002862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002866:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U << 22);
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <spi_gpio_init+0x110>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <spi_gpio_init+0x110>)
 800286e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002872:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 23);
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <spi_gpio_init+0x110>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <spi_gpio_init+0x110>)
 800287a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800287e:	6213      	str	r3, [r2, #32]

	/* PA6 */
	GPIOA->AFR[0] |=  (1U << 24);
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <spi_gpio_init+0x110>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <spi_gpio_init+0x110>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 25);
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <spi_gpio_init+0x110>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <spi_gpio_init+0x110>)
 8002892:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002896:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U << 26);
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <spi_gpio_init+0x110>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <spi_gpio_init+0x110>)
 800289e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 27);
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <spi_gpio_init+0x110>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <spi_gpio_init+0x110>)
 80028aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80028ae:	6213      	str	r3, [r2, #32]

	/* PA7 */
	GPIOA->AFR[0] |=  (1U << 28);
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <spi_gpio_init+0x110>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <spi_gpio_init+0x110>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 29);
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <spi_gpio_init+0x110>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <spi_gpio_init+0x110>)
 80028c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80028c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U << 30);
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <spi_gpio_init+0x110>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <spi_gpio_init+0x110>)
 80028ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 31);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <spi_gpio_init+0x110>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <spi_gpio_init+0x110>)
 80028da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028de:	6213      	str	r3, [r2, #32]
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000

080028f4 <spi1_config>:
 *
 * Configura SPI1 como maestro, en modo full-duplex, con reloj dividido por 4,
 * CPOL y CPHA en alto, MSB primero, y con manejo por software del esclavo.
 */
void spi1_config(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= SPI1EN;
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <spi1_config+0xac>)
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <spi1_config+0xac>)
 80028fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002902:	6453      	str	r3, [r2, #68]	; 0x44

    /* Clock = fPCLK/4 */
    SPI1->CR1 |=  (1U << 3);
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <spi1_config+0xb0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <spi1_config+0xb0>)
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1U << 4);
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <spi1_config+0xb0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <spi1_config+0xb0>)
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1U << 5);
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <spi1_config+0xb0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <spi1_config+0xb0>)
 8002922:	f023 0320 	bic.w	r3, r3, #32
 8002926:	6013      	str	r3, [r2, #0]

    /* CPOL = 1, CPHA = 1 */
    SPI1->CR1 |= (1U << 0);
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <spi1_config+0xb0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <spi1_config+0xb0>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1U << 1);
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <spi1_config+0xb0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <spi1_config+0xb0>)
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	6013      	str	r3, [r2, #0]

    /* Full duplex */
    SPI1->CR1 &= ~(1U << 10);
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <spi1_config+0xb0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <spi1_config+0xb0>)
 8002946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800294a:	6013      	str	r3, [r2, #0]

    /* MSB first */
    SPI1->CR1 &= ~(1U << 7);
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <spi1_config+0xb0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <spi1_config+0xb0>)
 8002952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002956:	6013      	str	r3, [r2, #0]

    /* Master mode */
    SPI1->CR1 |= (1U << 2);
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <spi1_config+0xb0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <spi1_config+0xb0>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6013      	str	r3, [r2, #0]

    /* 8-bit data frame */
    SPI1->CR1 &= ~(1U << 11);
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <spi1_config+0xb0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <spi1_config+0xb0>)
 800296a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800296e:	6013      	str	r3, [r2, #0]

    /* Software slave management (SSM=1, SSI=1) */
    SPI1->CR1 |= (1U << 8);
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <spi1_config+0xb0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <spi1_config+0xb0>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1U << 9);
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <spi1_config+0xb0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <spi1_config+0xb0>)
 8002982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002986:	6013      	str	r3, [r2, #0]

    /* SPI enable */
    SPI1->CR1 |= (1U << 6);
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <spi1_config+0xb0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <spi1_config+0xb0>)
 800298e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013000 	.word	0x40013000

080029a8 <spi1_transmit>:
 *
 * @param data Puntero al arreglo de datos a transmitir.
 * @param size Cantidad de bytes a enviar.
 */
void spi1_transmit(uint8_t *data, uint32_t size)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
    uint8_t temp;

    while (i < size)
 80029b6:	e00f      	b.n	80029d8 <spi1_transmit+0x30>
    {
        while (!(SPI1->SR & SR_TXE)) {}  /**< Espera a que el buffer esté vacío */
 80029b8:	bf00      	nop
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <spi1_transmit+0x6c>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f9      	beq.n	80029ba <spi1_transmit+0x12>
        SPI1->DR = data[i];              /**< Envía un byte */
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <spi1_transmit+0x6c>)
 80029d0:	60da      	str	r2, [r3, #12]
        i++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3301      	adds	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
    while (i < size)
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3eb      	bcc.n	80029b8 <spi1_transmit+0x10>
    }

    while (!(SPI1->SR & SR_TXE)) {}     /**< Espera a que se termine la transmisión */
 80029e0:	bf00      	nop
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <spi1_transmit+0x6c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f9      	beq.n	80029e2 <spi1_transmit+0x3a>
    while ((SPI1->SR & SR_BSY)) {}      /**< Espera a que el bus esté libre */
 80029ee:	bf00      	nop
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <spi1_transmit+0x6c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <spi1_transmit+0x48>

    /* Limpia el flag de overrun (lectura obligatoria de DR y SR) */
    temp = SPI1->DR;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <spi1_transmit+0x6c>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	72fb      	strb	r3, [r7, #11]
    temp = SPI1->SR;
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <spi1_transmit+0x6c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	72fb      	strb	r3, [r7, #11]
    (void)temp;  // Evita warning por variable no usada
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40013000 	.word	0x40013000

08002a18 <spi1_receive>:
 *
 * @param data Puntero al buffer donde se almacenarán los datos recibidos.
 * @param size Cantidad de bytes a recibir.
 */
void spi1_receive(uint8_t *data, uint32_t size)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    while (size)
 8002a22:	e013      	b.n	8002a4c <spi1_receive+0x34>
    {
        SPI1->DR = 0;  /**< Envía dato dummy para generar reloj */
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <spi1_receive+0x48>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]

        while (!(SPI1->SR & SR_RXNE)) {} /**< Espera hasta recibir datos */
 8002a2a:	bf00      	nop
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <spi1_receive+0x48>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f9      	beq.n	8002a2c <spi1_receive+0x14>

        *data++ = SPI1->DR;  /**< Almacena byte recibido */
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <spi1_receive+0x48>)
 8002a3a:	68d9      	ldr	r1, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
        size--;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	603b      	str	r3, [r7, #0]
    while (size)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e8      	bne.n	8002a24 <spi1_receive+0xc>
    }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40013000 	.word	0x40013000

08002a64 <cs_enable>:

/**
 * @brief Habilita la línea de selección de esclavo (CS) poniéndola en bajo.
 */
void cs_enable(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(1U << 9);
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <cs_enable+0x1c>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <cs_enable+0x1c>)
 8002a6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a72:	6153      	str	r3, [r2, #20]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40020000 	.word	0x40020000

08002a84 <cs_disable>:

/**
 * @brief Deshabilita la línea de selección de esclavo (CS) poniéndola en alto.
 */
void cs_disable(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1U << 9);
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <cs_disable+0x1c>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <cs_disable+0x1c>)
 8002a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a92:	6153      	str	r3, [r2, #20]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40020000 	.word	0x40020000

08002aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_MspInit+0x4c>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_MspInit+0x4c>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ae2:	2007      	movs	r0, #7
 8002ae4:	f000 fb82 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_I2C_MspInit+0x84>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12b      	bne.n	8002b6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_I2C_MspInit+0x88>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_I2C_MspInit+0x88>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_I2C_MspInit+0x88>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b36:	2312      	movs	r3, #18
 8002b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b42:	2304      	movs	r3, #4
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	480c      	ldr	r0, [pc, #48]	; (8002b80 <HAL_I2C_MspInit+0x8c>)
 8002b4e:	f000 fb81 	bl	8003254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_I2C_MspInit+0x88>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <HAL_I2C_MspInit+0x88>)
 8002b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_I2C_MspInit+0x88>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40005400 	.word	0x40005400
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020400 	.word	0x40020400

08002b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <HAL_SPI_MspInit+0xe0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d15a      	bne.n	8002c5c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_SPI_MspInit+0xe4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4815      	ldr	r0, [pc, #84]	; (8002c6c <HAL_SPI_MspInit+0xe8>)
 8002c16:	f000 fb1d 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	480d      	ldr	r0, [pc, #52]	; (8002c6c <HAL_SPI_MspInit+0xe8>)
 8002c36:	f000 fb0d 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4619      	mov	r1, r3
 8002c56:	4806      	ldr	r0, [pc, #24]	; (8002c70 <HAL_SPI_MspInit+0xec>)
 8002c58:	f000 fafc 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40003800 	.word	0x40003800
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020400 	.word	0x40020400

08002c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_UART_MspInit+0x84>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d12b      	bne.n	8002cee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_UART_MspInit+0x88>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_UART_MspInit+0x88>)
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_UART_MspInit+0x88>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_UART_MspInit+0x88>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_UART_MspInit+0x88>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_UART_MspInit+0x88>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cce:	230c      	movs	r3, #12
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cde:	2307      	movs	r3, #7
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <HAL_UART_MspInit+0x8c>)
 8002cea:	f000 fab3 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40004400 	.word	0x40004400
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <NMI_Handler+0x4>

08002d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <MemManage_Handler+0x4>

08002d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <BusFault_Handler+0x4>

08002d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <UsageFault_Handler+0x4>

08002d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d50:	f000 f956 	bl	8003000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return 1;
 8002d5c:	2301      	movs	r3, #1
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_kill>:

int _kill(int pid, int sig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d72:	f006 f8d7 	bl	8008f24 <__errno>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2216      	movs	r2, #22
 8002d7a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_exit>:

void _exit (int status)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ffe7 	bl	8002d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d9a:	e7fe      	b.n	8002d9a <_exit+0x12>

08002d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e00a      	b.n	8002dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dae:	f3af 8000 	nop.w
 8002db2:	4601      	mov	r1, r0
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	60ba      	str	r2, [r7, #8]
 8002dba:	b2ca      	uxtb	r2, r1
 8002dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbf0      	blt.n	8002dae <_read+0x12>
  }

  return len;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e009      	b.n	8002dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	60ba      	str	r2, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	dbf1      	blt.n	8002de8 <_write+0x12>
  }
  return len;
 8002e04:	687b      	ldr	r3, [r7, #4]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <_close>:

int _close(int file)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e36:	605a      	str	r2, [r3, #4]
  return 0;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <_isatty>:

int _isatty(int file)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <_sbrk+0x5c>)
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <_sbrk+0x60>)
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <_sbrk+0x64>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <_sbrk+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea8:	f006 f83c 	bl	8008f24 <__errno>
 8002eac:	4603      	mov	r3, r0
 8002eae:	220c      	movs	r2, #12
 8002eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e009      	b.n	8002ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <_sbrk+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <_sbrk+0x64>)
 8002ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20020000 	.word	0x20020000
 8002ed8:	00000400 	.word	0x00000400
 8002edc:	200009d8 	.word	0x200009d8
 8002ee0:	20000a30 	.word	0x20000a30

08002ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <SystemInit+0x20>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <SystemInit+0x20>)
 8002ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f0e:	490e      	ldr	r1, [pc, #56]	; (8002f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f24:	4c0b      	ldr	r4, [pc, #44]	; (8002f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f32:	f7ff ffd7 	bl	8002ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f36:	f005 fffb 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3a:	f7fe ff25 	bl	8001d88 <main>
  bx  lr    
 8002f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f48:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002f4c:	0800c3d4 	.word	0x0800c3d4
  ldr r2, =_sbss
 8002f50:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002f54:	20000a2c 	.word	0x20000a2c

08002f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f58:	e7fe      	b.n	8002f58 <ADC_IRQHandler>
	...

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_Init+0x40>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <HAL_Init+0x40>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_Init+0x40>)
 8002f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <HAL_Init+0x40>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 f931 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f000 f808 	bl	8002fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f90:	f7ff fd88 	bl	8002aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_InitTick+0x54>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_InitTick+0x58>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f93b 	bl	800323a <HAL_SYSTICK_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00e      	b.n	8002fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d80a      	bhi.n	8002fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f000 f911 	bl	8003202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <HAL_InitTick+0x5c>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	20000008 	.word	0x20000008

08003000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_IncTick+0x20>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_IncTick+0x24>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_IncTick+0x24>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2000000c 	.word	0x2000000c
 8003024:	200009dc 	.word	0x200009dc

08003028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return uwTick;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_GetTick+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	200009dc 	.word	0x200009dc

08003040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff ffee 	bl	8003028 <HAL_GetTick>
 800304c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d005      	beq.n	8003066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_Delay+0x44>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003066:	bf00      	nop
 8003068:	f7ff ffde 	bl	8003028 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8f7      	bhi.n	8003068 <HAL_Delay+0x28>
  {
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000000c 	.word	0x2000000c

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	; (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	f7ff ff8e 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff47 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff5c 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff8e 	bl	8003140 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5d 	bl	80030ec <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ffb0 	bl	80031a8 <SysTick_Config>
 8003248:	4603      	mov	r3, r0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e165      	b.n	800353c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	f040 8154 	bne.w	8003536 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d130      	bne.n	8003308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0201 	and.w	r2, r3, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d017      	beq.n	8003344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d123      	bne.n	8003398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80ae 	beq.w	8003536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_GPIO_Init+0x300>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_GPIO_Init+0x300>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <HAL_GPIO_Init+0x300>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f6:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_GPIO_Init+0x304>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4f      	ldr	r2, [pc, #316]	; (800355c <HAL_GPIO_Init+0x308>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x21a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_GPIO_Init+0x30c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x216>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_GPIO_Init+0x310>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x212>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4c      	ldr	r2, [pc, #304]	; (8003568 <HAL_GPIO_Init+0x314>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x20e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_GPIO_Init+0x318>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x20a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_GPIO_Init+0x31c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x206>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_GPIO_Init+0x320>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x202>
 8003452:	2306      	movs	r3, #6
 8003454:	e00c      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 8003456:	2307      	movs	r3, #7
 8003458:	e00a      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800345a:	2305      	movs	r3, #5
 800345c:	e008      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800345e:	2304      	movs	r3, #4
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 8003462:	2303      	movs	r3, #3
 8003464:	e004      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800346e:	2300      	movs	r3, #0
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	f002 0203 	and.w	r2, r2, #3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4093      	lsls	r3, r2
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003480:	4935      	ldr	r1, [pc, #212]	; (8003558 <HAL_GPIO_Init+0x304>)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_GPIO_Init+0x324>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b2:	4a31      	ldr	r2, [pc, #196]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003506:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_GPIO_Init+0x324>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_GPIO_Init+0x324>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_GPIO_Init+0x324>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	f67f ae96 	bls.w	8003270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	40013800 	.word	0x40013800
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400
 8003564:	40020800 	.word	0x40020800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40021400 	.word	0x40021400
 8003574:	40021800 	.word	0x40021800
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003598:	e003      	b.n	80035a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e12b      	b.n	800381a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fa8c 	bl	8002af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003614:	f001 f9fe 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8003618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4a81      	ldr	r2, [pc, #516]	; (8003824 <HAL_I2C_Init+0x274>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d807      	bhi.n	8003634 <HAL_I2C_Init+0x84>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a80      	ldr	r2, [pc, #512]	; (8003828 <HAL_I2C_Init+0x278>)
 8003628:	4293      	cmp	r3, r2
 800362a:	bf94      	ite	ls
 800362c:	2301      	movls	r3, #1
 800362e:	2300      	movhi	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e006      	b.n	8003642 <HAL_I2C_Init+0x92>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a7d      	ldr	r2, [pc, #500]	; (800382c <HAL_I2C_Init+0x27c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0e7      	b.n	800381a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a78      	ldr	r2, [pc, #480]	; (8003830 <HAL_I2C_Init+0x280>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0c9b      	lsrs	r3, r3, #18
 8003654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a6a      	ldr	r2, [pc, #424]	; (8003824 <HAL_I2C_Init+0x274>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d802      	bhi.n	8003684 <HAL_I2C_Init+0xd4>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3301      	adds	r3, #1
 8003682:	e009      	b.n	8003698 <HAL_I2C_Init+0xe8>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a69      	ldr	r2, [pc, #420]	; (8003834 <HAL_I2C_Init+0x284>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	3301      	adds	r3, #1
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	430b      	orrs	r3, r1
 800369e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	495c      	ldr	r1, [pc, #368]	; (8003824 <HAL_I2C_Init+0x274>)
 80036b4:	428b      	cmp	r3, r1
 80036b6:	d819      	bhi.n	80036ec <HAL_I2C_Init+0x13c>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e59      	subs	r1, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c6:	1c59      	adds	r1, r3, #1
 80036c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036cc:	400b      	ands	r3, r1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_I2C_Init+0x138>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e59      	subs	r1, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e6:	e051      	b.n	800378c <HAL_I2C_Init+0x1dc>
 80036e8:	2304      	movs	r3, #4
 80036ea:	e04f      	b.n	800378c <HAL_I2C_Init+0x1dc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d111      	bne.n	8003718 <HAL_I2C_Init+0x168>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1e58      	subs	r0, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e012      	b.n	800373e <HAL_I2C_Init+0x18e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e58      	subs	r0, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	0099      	lsls	r1, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	fbb0 f3f3 	udiv	r3, r0, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Init+0x196>
 8003742:	2301      	movs	r3, #1
 8003744:	e022      	b.n	800378c <HAL_I2C_Init+0x1dc>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10e      	bne.n	800376c <HAL_I2C_Init+0x1bc>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e58      	subs	r0, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	440b      	add	r3, r1
 800375c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376a:	e00f      	b.n	800378c <HAL_I2C_Init+0x1dc>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e58      	subs	r0, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	0099      	lsls	r1, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	6809      	ldr	r1, [r1, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6911      	ldr	r1, [r2, #16]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	000186a0 	.word	0x000186a0
 8003828:	001e847f 	.word	0x001e847f
 800382c:	003d08ff 	.word	0x003d08ff
 8003830:	431bde83 	.word	0x431bde83
 8003834:	10624dd3 	.word	0x10624dd3

08003838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	461a      	mov	r2, r3
 8003844:	460b      	mov	r3, r1
 8003846:	817b      	strh	r3, [r7, #10]
 8003848:	4613      	mov	r3, r2
 800384a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800384c:	f7ff fbec 	bl	8003028 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	f040 80e0 	bne.w	8003a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	4970      	ldr	r1, [pc, #448]	; (8003a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fe02 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	e0d3      	b.n	8003a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_I2C_Master_Transmit+0x50>
 8003884:	2302      	movs	r3, #2
 8003886:	e0cc      	b.n	8003a22 <HAL_I2C_Master_Transmit+0x1ea>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d007      	beq.n	80038ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2221      	movs	r2, #33	; 0x21
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2210      	movs	r2, #16
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	893a      	ldrh	r2, [r7, #8]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a50      	ldr	r2, [pc, #320]	; (8003a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038f0:	8979      	ldrh	r1, [r7, #10]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fbbc 	bl	8004074 <I2C_MasterRequestWrite>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e08d      	b.n	8003a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800391c:	e066      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	6a39      	ldr	r1, [r7, #32]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fe7c 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b04      	cmp	r3, #4
 8003934:	d107      	bne.n	8003946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06b      	b.n	8003a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b04      	cmp	r3, #4
 8003986:	d11b      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x188>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d017      	beq.n	80039c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	6a39      	ldr	r1, [r7, #32]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fe6c 	bl	80046a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d107      	bne.n	80039e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e01a      	b.n	8003a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d194      	bne.n	800391e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	00100002 	.word	0x00100002
 8003a30:	ffff0000 	.word	0xffff0000

08003a34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	460b      	mov	r3, r1
 8003a48:	813b      	strh	r3, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a4e:	f7ff faeb 	bl	8003028 <HAL_GetTick>
 8003a52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	f040 80d9 	bne.w	8003c14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2319      	movs	r3, #25
 8003a68:	2201      	movs	r2, #1
 8003a6a:	496d      	ldr	r1, [pc, #436]	; (8003c20 <HAL_I2C_Mem_Write+0x1ec>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fd01 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0cc      	b.n	8003c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Mem_Write+0x56>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0c5      	b.n	8003c16 <HAL_I2C_Mem_Write+0x1e2>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d007      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a4d      	ldr	r2, [pc, #308]	; (8003c24 <HAL_I2C_Mem_Write+0x1f0>)
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af2:	88f8      	ldrh	r0, [r7, #6]
 8003af4:	893a      	ldrh	r2, [r7, #8]
 8003af6:	8979      	ldrh	r1, [r7, #10]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4603      	mov	r3, r0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fb38 	bl	8004178 <I2C_RequestMemoryWrite>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d052      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e081      	b.n	8003c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fd82 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06b      	b.n	8003c16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_I2C_Mem_Write+0x180>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d017      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1aa      	bne.n	8003b12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fd6e 	bl	80046a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00d      	beq.n	8003be8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d107      	bne.n	8003be4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e016      	b.n	8003c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	00100002 	.word	0x00100002
 8003c24:	ffff0000 	.word	0xffff0000

08003c28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	; 0x30
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	4608      	mov	r0, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	461a      	mov	r2, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	817b      	strh	r3, [r7, #10]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	813b      	strh	r3, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c42:	f7ff f9f1 	bl	8003028 <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	f040 8208 	bne.w	8004066 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2319      	movs	r3, #25
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	497b      	ldr	r1, [pc, #492]	; (8003e4c <HAL_I2C_Mem_Read+0x224>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fc07 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e1fb      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x56>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e1f4      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d007      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2222      	movs	r2, #34	; 0x22
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <HAL_I2C_Mem_Read+0x228>)
 8003ce4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce6:	88f8      	ldrh	r0, [r7, #6]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fad4 	bl	80042a4 <I2C_RequestMemoryRead>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1b0      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d113      	bne.n	8003d36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e184      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d11b      	bne.n	8003d76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e164      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d11b      	bne.n	8003db6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	e144      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003dcc:	e138      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	f200 80f1 	bhi.w	8003fba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d123      	bne.n	8003e28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fc9d 	bl	8004724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e139      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e26:	e10b      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d14e      	bne.n	8003ece <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	2200      	movs	r2, #0
 8003e38:	4906      	ldr	r1, [pc, #24]	; (8003e54 <HAL_I2C_Mem_Read+0x22c>)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fb1a 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e10e      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
 8003e4a:	bf00      	nop
 8003e4c:	00100002 	.word	0x00100002
 8003e50:	ffff0000 	.word	0xffff0000
 8003e54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ecc:	e0b8      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4966      	ldr	r1, [pc, #408]	; (8004070 <HAL_I2C_Mem_Read+0x448>)
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 facb 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0bf      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2200      	movs	r2, #0
 8003f32:	494f      	ldr	r1, [pc, #316]	; (8004070 <HAL_I2C_Mem_Read+0x448>)
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fa9d 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e091      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fb8:	e042      	b.n	8004040 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fbb0 	bl	8004724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e04c      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d118      	bne.n	8004040 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f aec2 	bne.w	8003dce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3728      	adds	r7, #40	; 0x28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	00010004 	.word	0x00010004

08004074 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	460b      	mov	r3, r1
 8004082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d006      	beq.n	800409e <I2C_MasterRequestWrite+0x2a>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d003      	beq.n	800409e <I2C_MasterRequestWrite+0x2a>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800409c:	d108      	bne.n	80040b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e00b      	b.n	80040c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	2b12      	cmp	r3, #18
 80040b6:	d107      	bne.n	80040c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f9cd 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ee:	d103      	bne.n	80040f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e035      	b.n	8004168 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004104:	d108      	bne.n	8004118 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004114:	611a      	str	r2, [r3, #16]
 8004116:	e01b      	b.n	8004150 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004118:	897b      	ldrh	r3, [r7, #10]
 800411a:	11db      	asrs	r3, r3, #7
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0306 	and.w	r3, r3, #6
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f063 030f 	orn	r3, r3, #15
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <I2C_MasterRequestWrite+0xfc>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f9f3 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e010      	b.n	8004168 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4907      	ldr	r1, [pc, #28]	; (8004174 <I2C_MasterRequestWrite+0x100>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f9e3 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	00010008 	.word	0x00010008
 8004174:	00010002 	.word	0x00010002

08004178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f960 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c8:	d103      	bne.n	80041d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e05f      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	492d      	ldr	r1, [pc, #180]	; (80042a0 <I2C_RequestMemoryWrite+0x128>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f998 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e04c      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	6a39      	ldr	r1, [r7, #32]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fa02 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b04      	cmp	r3, #4
 8004228:	d107      	bne.n	800423a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e02b      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004244:	893b      	ldrh	r3, [r7, #8]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e021      	b.n	8004294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004250:	893b      	ldrh	r3, [r7, #8]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	6a39      	ldr	r1, [r7, #32]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9dc 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d107      	bne.n	8004286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e005      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	00010002 	.word	0x00010002

080042a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f8c2 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004304:	d103      	bne.n	800430e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0aa      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	4952      	ldr	r1, [pc, #328]	; (8004470 <I2C_RequestMemoryRead+0x1cc>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f8fa 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e097      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f964 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b04      	cmp	r3, #4
 8004364:	d107      	bne.n	8004376 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e076      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004380:	893b      	ldrh	r3, [r7, #8]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]
 800438a:	e021      	b.n	80043d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439c:	6a39      	ldr	r1, [r7, #32]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f93e 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d107      	bne.n	80043c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e050      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	6a39      	ldr	r1, [r7, #32]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f923 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d107      	bne.n	80043f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e035      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2200      	movs	r2, #0
 8004414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f82b 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d103      	bne.n	800443c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e013      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004440:	897b      	ldrh	r3, [r7, #10]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	4906      	ldr	r1, [pc, #24]	; (8004470 <I2C_RequestMemoryRead+0x1cc>)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f863 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00010002 	.word	0x00010002

08004474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004484:	e025      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d021      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7fe fdcb 	bl	8003028 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e023      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10d      	bne.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	43da      	mvns	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	e00c      	b.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf0c      	ite	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	2300      	movne	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	429a      	cmp	r2, r3
 8004516:	d0b6      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004530:	e051      	b.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d123      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800455a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e046      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d021      	beq.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fe fd49 	bl	8003028 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d116      	bne.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e020      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10c      	bne.n	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e00b      	b.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d18d      	bne.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	e02d      	b.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f8ce 	bl	80047d0 <I2C_IsAcknowledgeFailed>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e02d      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d021      	beq.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe fcef 	bl	8003028 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d1ca      	bne.n	800462e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ae:	e02d      	b.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f88d 	bl	80047d0 <I2C_IsAcknowledgeFailed>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e02d      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d021      	beq.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7fe fcae 	bl	8003028 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e007      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d1ca      	bne.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004730:	e042      	b.n	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b10      	cmp	r3, #16
 800473e:	d119      	bne.n	8004774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e029      	b.n	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004774:	f7fe fc58 	bl	8003028 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	d302      	bcc.n	800478a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d1b5      	bne.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d11b      	bne.n	8004820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f043 0204 	orr.w	r2, r3, #4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0cc      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004844:	4b68      	ldr	r3, [pc, #416]	; (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d90c      	bls.n	800486c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b65      	ldr	r3, [pc, #404]	; (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0b8      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004884:	4b59      	ldr	r3, [pc, #356]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a58      	ldr	r2, [pc, #352]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800488e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	494d      	ldr	r1, [pc, #308]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d044      	beq.n	8004950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d119      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d003      	beq.n	80048ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	4b3f      	ldr	r3, [pc, #252]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e06f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e067      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490e:	4b37      	ldr	r3, [pc, #220]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4934      	ldr	r1, [pc, #208]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004920:	f7fe fb82 	bl	8003028 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	e00a      	b.n	800493e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004928:	f7fe fb7e 	bl	8003028 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e04f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 020c 	and.w	r2, r3, #12
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	429a      	cmp	r2, r3
 800494e:	d1eb      	bne.n	8004928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d20c      	bcs.n	8004978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e032      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4916      	ldr	r1, [pc, #88]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	490e      	ldr	r1, [pc, #56]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049b6:	f000 f855 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	490a      	ldr	r1, [pc, #40]	; (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 80049c8:	5ccb      	ldrb	r3, [r1, r3]
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x1c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fae2 	bl	8002fa0 <HAL_InitTick>

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023c00 	.word	0x40023c00
 80049ec:	40023800 	.word	0x40023800
 80049f0:	0800bf54 	.word	0x0800bf54
 80049f4:	20000004 	.word	0x20000004
 80049f8:	20000008 	.word	0x20000008

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000004 	.word	0x20000004

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a9b      	lsrs	r3, r3, #10
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	0800bf64 	.word	0x0800bf64

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a40:	f7ff ffdc 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0b5b      	lsrs	r3, r3, #13
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	0800bf64 	.word	0x0800bf64

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b0ae      	sub	sp, #184	; 0xb8
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a8a:	4bcb      	ldr	r3, [pc, #812]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	f200 8206 	bhi.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x440>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004ea5 	.word	0x08004ea5
 8004aa8:	08004ea5 	.word	0x08004ea5
 8004aac:	08004ea5 	.word	0x08004ea5
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004ea5 	.word	0x08004ea5
 8004ab8:	08004ea5 	.word	0x08004ea5
 8004abc:	08004ea5 	.word	0x08004ea5
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004ea5 	.word	0x08004ea5
 8004ac8:	08004ea5 	.word	0x08004ea5
 8004acc:	08004ea5 	.word	0x08004ea5
 8004ad0:	08004cd5 	.word	0x08004cd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4bb9      	ldr	r3, [pc, #740]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x358>)
 8004ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004ada:	e1e7      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004adc:	4bb8      	ldr	r3, [pc, #736]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ae2:	e1e3      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae4:	4bb4      	ldr	r3, [pc, #720]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af0:	4bb1      	ldr	r3, [pc, #708]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d071      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afc:	4bae      	ldr	r3, [pc, #696]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b08:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b22:	4622      	mov	r2, r4
 8004b24:	462b      	mov	r3, r5
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b34:	0150      	lsls	r0, r2, #5
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	1a51      	subs	r1, r2, r1
 8004b3e:	6439      	str	r1, [r7, #64]	; 0x40
 8004b40:	4629      	mov	r1, r5
 8004b42:	eb63 0301 	sbc.w	r3, r3, r1
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004b54:	4649      	mov	r1, r9
 8004b56:	018b      	lsls	r3, r1, #6
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5e:	4641      	mov	r1, r8
 8004b60:	018a      	lsls	r2, r1, #6
 8004b62:	4641      	mov	r1, r8
 8004b64:	1a51      	subs	r1, r2, r1
 8004b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b68:	4649      	mov	r1, r9
 8004b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	00cb      	lsls	r3, r1, #3
 8004b80:	4641      	mov	r1, r8
 8004b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b86:	4641      	mov	r1, r8
 8004b88:	00ca      	lsls	r2, r1, #3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4622      	mov	r2, r4
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30
 8004b96:	462b      	mov	r3, r5
 8004b98:	460a      	mov	r2, r1
 8004b9a:	eb42 0303 	adc.w	r3, r2, r3
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bac:	4629      	mov	r1, r5
 8004bae:	024b      	lsls	r3, r1, #9
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	024a      	lsls	r2, r1, #9
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bcc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004bd0:	f7fc f82a 	bl	8000c28 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bde:	e067      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be0:	4b75      	ldr	r3, [pc, #468]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bfe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c14:	0150      	lsls	r0, r2, #5
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	1a51      	subs	r1, r2, r1
 8004c1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c20:	4629      	mov	r1, r5
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004c34:	4649      	mov	r1, r9
 8004c36:	018b      	lsls	r3, r1, #6
 8004c38:	4641      	mov	r1, r8
 8004c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3e:	4641      	mov	r1, r8
 8004c40:	018a      	lsls	r2, r1, #6
 8004c42:	4641      	mov	r1, r8
 8004c44:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c48:	4649      	mov	r1, r9
 8004c4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c62:	4692      	mov	sl, r2
 8004c64:	469b      	mov	fp, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	462b      	mov	r3, r5
 8004c70:	eb4b 0303 	adc.w	r3, fp, r3
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c82:	4629      	mov	r1, r5
 8004c84:	028b      	lsls	r3, r1, #10
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	028a      	lsls	r2, r1, #10
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c98:	2200      	movs	r2, #0
 8004c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c9c:	677a      	str	r2, [r7, #116]	; 0x74
 8004c9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004ca2:	f7fb ffc1 	bl	8000c28 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4613      	mov	r3, r2
 8004cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004cd2:	e0eb      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd4:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ce0:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d06b      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cec:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8004d00:	2300      	movs	r3, #0
 8004d02:	667b      	str	r3, [r7, #100]	; 0x64
 8004d04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d08:	4622      	mov	r2, r4
 8004d0a:	462b      	mov	r3, r5
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4621      	mov	r1, r4
 8004d22:	1a51      	subs	r1, r2, r1
 8004d24:	61b9      	str	r1, [r7, #24]
 8004d26:	4629      	mov	r1, r5
 8004d28:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	018b      	lsls	r3, r1, #6
 8004d3e:	4651      	mov	r1, sl
 8004d40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d44:	4651      	mov	r1, sl
 8004d46:	018a      	lsls	r2, r1, #6
 8004d48:	4651      	mov	r1, sl
 8004d4a:	ebb2 0801 	subs.w	r8, r2, r1
 8004d4e:	4659      	mov	r1, fp
 8004d50:	eb63 0901 	sbc.w	r9, r3, r1
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d68:	4690      	mov	r8, r2
 8004d6a:	4699      	mov	r9, r3
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	eb18 0303 	adds.w	r3, r8, r3
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	462b      	mov	r3, r5
 8004d76:	eb49 0303 	adc.w	r3, r9, r3
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d88:	4629      	mov	r1, r5
 8004d8a:	024b      	lsls	r3, r1, #9
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d92:	4621      	mov	r1, r4
 8004d94:	024a      	lsls	r2, r1, #9
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d9e:	2200      	movs	r2, #0
 8004da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004da2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004da4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004da8:	f7fb ff3e 	bl	8000c28 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4613      	mov	r3, r2
 8004db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004db6:	e065      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x420>
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc4:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x458>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	4611      	mov	r1, r2
 8004dd0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	657b      	str	r3, [r7, #84]	; 0x54
 8004dda:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004dde:	4642      	mov	r2, r8
 8004de0:	464b      	mov	r3, r9
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	0159      	lsls	r1, r3, #5
 8004dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df0:	0150      	lsls	r0, r2, #5
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4641      	mov	r1, r8
 8004df8:	1a51      	subs	r1, r2, r1
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e10:	4659      	mov	r1, fp
 8004e12:	018b      	lsls	r3, r1, #6
 8004e14:	4651      	mov	r1, sl
 8004e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	018a      	lsls	r2, r1, #6
 8004e1e:	4651      	mov	r1, sl
 8004e20:	1a54      	subs	r4, r2, r1
 8004e22:	4659      	mov	r1, fp
 8004e24:	eb63 0501 	sbc.w	r5, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	00eb      	lsls	r3, r5, #3
 8004e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	18e3      	adds	r3, r4, r3
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	464b      	mov	r3, r9
 8004e44:	eb45 0303 	adc.w	r3, r5, r3
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e56:	4629      	mov	r1, r5
 8004e58:	028b      	lsls	r3, r1, #10
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e60:	4621      	mov	r1, r4
 8004e62:	028a      	lsls	r2, r1, #10
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e76:	f7fb fed7 	bl	8000c28 <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4613      	mov	r3, r2
 8004e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x458>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0f1b      	lsrs	r3, r3, #28
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ea2:	e003      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004eaa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	37b8      	adds	r7, #184	; 0xb8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e28d      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8083 	beq.w	8004fea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ee4:	4b94      	ldr	r3, [pc, #592]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d019      	beq.n	8004f24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ef0:	4b91      	ldr	r3, [pc, #580]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d106      	bne.n	8004f0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004efc:	4b8e      	ldr	r3, [pc, #568]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f08:	d00c      	beq.n	8004f24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0a:	4b8b      	ldr	r3, [pc, #556]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d112      	bne.n	8004f3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f16:	4b88      	ldr	r3, [pc, #544]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	4b84      	ldr	r3, [pc, #528]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05b      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x124>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d157      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e25a      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x90>
 8004f46:	4b7c      	ldr	r3, [pc, #496]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a7b      	ldr	r2, [pc, #492]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e01d      	b.n	8004f90 <HAL_RCC_OscConfig+0xcc>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0xb4>
 8004f5e:	4b76      	ldr	r3, [pc, #472]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a75      	ldr	r2, [pc, #468]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b73      	ldr	r3, [pc, #460]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a72      	ldr	r2, [pc, #456]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0xcc>
 8004f78:	4b6f      	ldr	r3, [pc, #444]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6e      	ldr	r2, [pc, #440]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b6c      	ldr	r3, [pc, #432]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6b      	ldr	r2, [pc, #428]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d013      	beq.n	8004fc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe f846 	bl	8003028 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa0:	f7fe f842 	bl	8003028 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e21f      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	4b61      	ldr	r3, [pc, #388]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0xdc>
 8004fbe:	e014      	b.n	8004fea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fe f832 	bl	8003028 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7fe f82e 	bl	8003028 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e20b      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	4b57      	ldr	r3, [pc, #348]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x104>
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d06f      	beq.n	80050d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ff6:	4b50      	ldr	r3, [pc, #320]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d017      	beq.n	8005032 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005002:	4b4d      	ldr	r3, [pc, #308]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800500a:	2b08      	cmp	r3, #8
 800500c:	d105      	bne.n	800501a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800500e:	4b4a      	ldr	r3, [pc, #296]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d11c      	bne.n	8005060 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005026:	4b44      	ldr	r3, [pc, #272]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d116      	bne.n	8005060 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_RCC_OscConfig+0x186>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d001      	beq.n	800504a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e1d3      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504a:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4937      	ldr	r1, [pc, #220]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	e03a      	b.n	80050d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d020      	beq.n	80050aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005068:	4b34      	ldr	r3, [pc, #208]	; (800513c <HAL_RCC_OscConfig+0x278>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fd ffdb 	bl	8003028 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005076:	f7fd ffd7 	bl	8003028 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e1b4      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005088:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005094:	4b28      	ldr	r3, [pc, #160]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4925      	ldr	r1, [pc, #148]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	600b      	str	r3, [r1, #0]
 80050a8:	e015      	b.n	80050d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCC_OscConfig+0x278>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd ffba 	bl	8003028 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b8:	f7fd ffb6 	bl	8003028 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e193      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d036      	beq.n	8005150 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d016      	beq.n	8005118 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fd ff9a 	bl	8003028 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f8:	f7fd ff96 	bl	8003028 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e173      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_OscConfig+0x274>)
 800510c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x234>
 8005116:	e01b      	b.n	8005150 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fd ff83 	bl	8003028 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005124:	e00e      	b.n	8005144 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005126:	f7fd ff7f 	bl	8003028 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d907      	bls.n	8005144 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e15c      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
 8005138:	40023800 	.word	0x40023800
 800513c:	42470000 	.word	0x42470000
 8005140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005144:	4b8a      	ldr	r3, [pc, #552]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ea      	bne.n	8005126 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8097 	beq.w	800528c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005162:	4b83      	ldr	r3, [pc, #524]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	4b7f      	ldr	r3, [pc, #508]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a7e      	ldr	r2, [pc, #504]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
 800517e:	4b7c      	ldr	r3, [pc, #496]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800518a:	2301      	movs	r3, #1
 800518c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518e:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCC_OscConfig+0x4b0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d118      	bne.n	80051cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <HAL_RCC_OscConfig+0x4b0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a75      	ldr	r2, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x4b0>)
 80051a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051a6:	f7fd ff3f 	bl	8003028 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ae:	f7fd ff3b 	bl	8003028 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e118      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c0:	4b6c      	ldr	r3, [pc, #432]	; (8005374 <HAL_RCC_OscConfig+0x4b0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x31e>
 80051d4:	4b66      	ldr	r3, [pc, #408]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	4a65      	ldr	r2, [pc, #404]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6713      	str	r3, [r2, #112]	; 0x70
 80051e0:	e01c      	b.n	800521c <HAL_RCC_OscConfig+0x358>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x340>
 80051ea:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a60      	ldr	r2, [pc, #384]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
 80051f6:	4b5e      	ldr	r3, [pc, #376]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	4a5d      	ldr	r2, [pc, #372]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6713      	str	r3, [r2, #112]	; 0x70
 8005202:	e00b      	b.n	800521c <HAL_RCC_OscConfig+0x358>
 8005204:	4b5a      	ldr	r3, [pc, #360]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a59      	ldr	r2, [pc, #356]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	6713      	str	r3, [r2, #112]	; 0x70
 8005210:	4b57      	ldr	r3, [pc, #348]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4a56      	ldr	r2, [pc, #344]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005216:	f023 0304 	bic.w	r3, r3, #4
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fd ff00 	bl	8003028 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522c:	f7fd fefc 	bl	8003028 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	; 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e0d7      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005242:	4b4b      	ldr	r3, [pc, #300]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0ee      	beq.n	800522c <HAL_RCC_OscConfig+0x368>
 800524e:	e014      	b.n	800527a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005250:	f7fd feea 	bl	8003028 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005256:	e00a      	b.n	800526e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005258:	f7fd fee6 	bl	8003028 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	f241 3288 	movw	r2, #5000	; 0x1388
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e0c1      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526e:	4b40      	ldr	r3, [pc, #256]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1ee      	bne.n	8005258 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d105      	bne.n	800528c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005280:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80ad 	beq.w	80053f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005296:	4b36      	ldr	r3, [pc, #216]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d060      	beq.n	8005364 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d145      	bne.n	8005336 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052aa:	4b33      	ldr	r3, [pc, #204]	; (8005378 <HAL_RCC_OscConfig+0x4b4>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd feba 	bl	8003028 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fd feb6 	bl	8003028 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e093      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ca:	4b29      	ldr	r3, [pc, #164]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69da      	ldr	r2, [r3, #28]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	019b      	lsls	r3, r3, #6
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	3b01      	subs	r3, #1
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	071b      	lsls	r3, r3, #28
 8005302:	491b      	ldr	r1, [pc, #108]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005304:	4313      	orrs	r3, r2
 8005306:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x4b4>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530e:	f7fd fe8b 	bl	8003028 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005316:	f7fd fe87 	bl	8003028 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e064      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x452>
 8005334:	e05c      	b.n	80053f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <HAL_RCC_OscConfig+0x4b4>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fd fe74 	bl	8003028 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005344:	f7fd fe70 	bl	8003028 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e04d      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCC_OscConfig+0x4ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x480>
 8005362:	e045      	b.n	80053f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d107      	bne.n	800537c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e040      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
 8005370:	40023800 	.word	0x40023800
 8005374:	40007000 	.word	0x40007000
 8005378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800537c:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <HAL_RCC_OscConfig+0x538>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d030      	beq.n	80053ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d129      	bne.n	80053ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d122      	bne.n	80053ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ac:	4013      	ands	r3, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d119      	bne.n	80053ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	3b01      	subs	r3, #1
 80053c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d10f      	bne.n	80053ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800

08005400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07b      	b.n	800550a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005422:	d009      	beq.n	8005438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
 800542a:	e005      	b.n	8005438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fb96 	bl	8002b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	ea42 0103 	orr.w	r1, r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	f003 0104 	and.w	r1, r3, #4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f003 0210 	and.w	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b088      	sub	sp, #32
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_SPI_Transmit+0x22>
 8005530:	2302      	movs	r3, #2
 8005532:	e126      	b.n	8005782 <HAL_SPI_Transmit+0x270>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800553c:	f7fd fd74 	bl	8003028 <HAL_GetTick>
 8005540:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	d002      	beq.n	8005558 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005552:	2302      	movs	r3, #2
 8005554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005556:	e10b      	b.n	8005770 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Transmit+0x52>
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005568:	e102      	b.n	8005770 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2203      	movs	r2, #3
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	88fa      	ldrh	r2, [r7, #6]
 8005582:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b0:	d10f      	bne.n	80055d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d007      	beq.n	80055f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	d14b      	bne.n	8005692 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_SPI_Transmit+0xf6>
 8005602:	8afb      	ldrh	r3, [r7, #22]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d13e      	bne.n	8005686 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800562c:	e02b      	b.n	8005686 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	d112      	bne.n	8005662 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	1c9a      	adds	r2, r3, #2
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005660:	e011      	b.n	8005686 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005662:	f7fd fce1 	bl	8003028 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d803      	bhi.n	800567a <HAL_SPI_Transmit+0x168>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d102      	bne.n	8005680 <HAL_SPI_Transmit+0x16e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005684:	e074      	b.n	8005770 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ce      	bne.n	800562e <HAL_SPI_Transmit+0x11c>
 8005690:	e04c      	b.n	800572c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Transmit+0x18e>
 800569a:	8afb      	ldrh	r3, [r7, #22]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d140      	bne.n	8005722 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	7812      	ldrb	r2, [r2, #0]
 80056ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056c6:	e02c      	b.n	8005722 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d113      	bne.n	80056fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80056fc:	e011      	b.n	8005722 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fe:	f7fd fc93 	bl	8003028 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <HAL_SPI_Transmit+0x204>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d102      	bne.n	800571c <HAL_SPI_Transmit+0x20a>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005720:	e026      	b.n	8005770 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1cd      	bne.n	80056c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fa55 	bl	8005be0 <SPI_EndRxTxTransaction>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e000      	b.n	8005770 <HAL_SPI_Transmit+0x25e>
  }

error:
 800576e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005780:	7ffb      	ldrb	r3, [r7, #31]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08c      	sub	sp, #48	; 0x30
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005798:	2301      	movs	r3, #1
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x26>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e18a      	b.n	8005ac6 <HAL_SPI_TransmitReceive+0x33c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b8:	f7fd fc36 	bl	8003028 <HAL_GetTick>
 80057bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00f      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x70>
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e0:	d107      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x68>
 80057ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d003      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
 80057f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057f8:	e15b      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_SPI_TransmitReceive+0x82>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_SPI_TransmitReceive+0x82>
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005812:	e14e      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b04      	cmp	r3, #4
 800581e:	d003      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2205      	movs	r2, #5
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	887a      	ldrh	r2, [r7, #2]
 800583e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d007      	beq.n	800587c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005884:	d178      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x10a>
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d166      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b8:	e053      	b.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d11b      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x176>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x176>
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d113      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d119      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x1b8>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d014      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	b292      	uxth	r2, r2
 8005924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	1c9a      	adds	r2, r3, #2
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800593e:	2301      	movs	r3, #1
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005942:	f7fd fb71 	bl	8003028 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594e:	429a      	cmp	r2, r3
 8005950:	d807      	bhi.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d003      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005960:	e0a7      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1a6      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x130>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1a1      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x130>
 8005976:	e07c      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x1fc>
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d16b      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ac:	e057      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d11c      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x26c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x26c>
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d114      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d119      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x2ae>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d014      	beq.n	8005a38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a38:	f7fd faf6 	bl	8003028 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d803      	bhi.n	8005a50 <HAL_SPI_TransmitReceive+0x2c6>
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d102      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x2cc>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a5c:	e029      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1a2      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x224>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d19d      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f8b2 	bl	8005be0 <SPI_EndRxTxTransaction>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a8e:	e010      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	e000      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3730      	adds	r7, #48	; 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ae0:	f7fd faa2 	bl	8003028 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005af0:	f7fd fa9a 	bl	8003028 <HAL_GetTick>
 8005af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	015b      	lsls	r3, r3, #5
 8005afc:	0d1b      	lsrs	r3, r3, #20
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	fb02 f303 	mul.w	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b06:	e054      	b.n	8005bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d050      	beq.n	8005bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b10:	f7fd fa8a 	bl	8003028 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d902      	bls.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d13d      	bne.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3e:	d111      	bne.n	8005b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b48:	d004      	beq.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b52:	d107      	bne.n	8005b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6c:	d10f      	bne.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e017      	b.n	8005bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d19b      	bne.n	8005b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000004 	.word	0x20000004

08005be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bec:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <SPI_EndRxTxTransaction+0x7c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <SPI_EndRxTxTransaction+0x80>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0d5b      	lsrs	r3, r3, #21
 8005bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c0a:	d112      	bne.n	8005c32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff5a 	bl	8005ad0 <SPI_WaitFlagStateUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00f      	b.n	8005c52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c48:	2b80      	cmp	r3, #128	; 0x80
 8005c4a:	d0f2      	beq.n	8005c32 <SPI_EndRxTxTransaction+0x52>
 8005c4c:	e000      	b.n	8005c50 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c4e:	bf00      	nop
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000004 	.word	0x20000004
 8005c60:	165e9f81 	.word	0x165e9f81

08005c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e03f      	b.n	8005cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fc fff2 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	; 0x24
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9cb 	bl	8006044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b08a      	sub	sp, #40	; 0x28
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d17c      	bne.n	8005e18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_UART_Transmit+0x2c>
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e075      	b.n	8005e1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_UART_Transmit+0x3e>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e06e      	b.n	8005e1a <HAL_UART_Transmit+0x11c>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2221      	movs	r2, #33	; 0x21
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d52:	f7fd f969 	bl	8003028 <HAL_GetTick>
 8005d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	88fa      	ldrh	r2, [r7, #6]
 8005d5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	88fa      	ldrh	r2, [r7, #6]
 8005d62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6c:	d108      	bne.n	8005d80 <HAL_UART_Transmit+0x82>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e003      	b.n	8005d88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d90:	e02a      	b.n	8005de8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2180      	movs	r1, #128	; 0x80
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f8e2 	bl	8005f66 <UART_WaitOnFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e036      	b.n	8005e1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e007      	b.n	8005dda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1cf      	bne.n	8005d92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2140      	movs	r1, #64	; 0x40
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f8b2 	bl	8005f66 <UART_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e006      	b.n	8005e1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b08a      	sub	sp, #40	; 0x28
 8005e26:	af02      	add	r7, sp, #8
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	f040 808c 	bne.w	8005f5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_UART_Receive+0x2e>
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e084      	b.n	8005f5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_UART_Receive+0x40>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e07d      	b.n	8005f5e <HAL_UART_Receive+0x13c>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2222      	movs	r2, #34	; 0x22
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e7e:	f7fd f8d3 	bl	8003028 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d108      	bne.n	8005eac <HAL_UART_Receive+0x8a>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	e003      	b.n	8005eb4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ebc:	e043      	b.n	8005f46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2120      	movs	r1, #32
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f84c 	bl	8005f66 <UART_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e042      	b.n	8005f5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10c      	bne.n	8005ef8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e01f      	b.n	8005f38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d007      	beq.n	8005f12 <HAL_UART_Receive+0xf0>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <HAL_UART_Receive+0xfe>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e008      	b.n	8005f32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3301      	adds	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1b6      	bne.n	8005ebe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005f5c:	2302      	movs	r3, #2
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b090      	sub	sp, #64	; 0x40
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f76:	e050      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d04c      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f86:	f7fd f84f 	bl	8003028 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d241      	bcs.n	800601a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e5      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3314      	adds	r3, #20
 8005fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fea:	623a      	str	r2, [r7, #32]
 8005fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e00f      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	429a      	cmp	r2, r3
 8006036:	d09f      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3740      	adds	r7, #64	; 0x40
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006048:	b0c0      	sub	sp, #256	; 0x100
 800604a:	af00      	add	r7, sp, #0
 800604c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	68d9      	ldr	r1, [r3, #12]
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	ea40 0301 	orr.w	r3, r0, r1
 800606c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	431a      	orrs	r2, r3
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	431a      	orrs	r2, r3
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800609c:	f021 010c 	bic.w	r1, r1, #12
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060aa:	430b      	orrs	r3, r1
 80060ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	6999      	ldr	r1, [r3, #24]
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	ea40 0301 	orr.w	r3, r0, r1
 80060ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b8f      	ldr	r3, [pc, #572]	; (8006310 <UART_SetConfig+0x2cc>)
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d005      	beq.n	80060e4 <UART_SetConfig+0xa0>
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b8d      	ldr	r3, [pc, #564]	; (8006314 <UART_SetConfig+0x2d0>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d104      	bne.n	80060ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fe fcaa 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 80060e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060ec:	e003      	b.n	80060f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fe fc91 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80060f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006100:	f040 810c 	bne.w	800631c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006108:	2200      	movs	r2, #0
 800610a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800610e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006116:	4622      	mov	r2, r4
 8006118:	462b      	mov	r3, r5
 800611a:	1891      	adds	r1, r2, r2
 800611c:	65b9      	str	r1, [r7, #88]	; 0x58
 800611e:	415b      	adcs	r3, r3
 8006120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006126:	4621      	mov	r1, r4
 8006128:	eb12 0801 	adds.w	r8, r2, r1
 800612c:	4629      	mov	r1, r5
 800612e:	eb43 0901 	adc.w	r9, r3, r1
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800613e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006146:	4690      	mov	r8, r2
 8006148:	4699      	mov	r9, r3
 800614a:	4623      	mov	r3, r4
 800614c:	eb18 0303 	adds.w	r3, r8, r3
 8006150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006154:	462b      	mov	r3, r5
 8006156:	eb49 0303 	adc.w	r3, r9, r3
 800615a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800616a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800616e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006172:	460b      	mov	r3, r1
 8006174:	18db      	adds	r3, r3, r3
 8006176:	653b      	str	r3, [r7, #80]	; 0x50
 8006178:	4613      	mov	r3, r2
 800617a:	eb42 0303 	adc.w	r3, r2, r3
 800617e:	657b      	str	r3, [r7, #84]	; 0x54
 8006180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006188:	f7fa fd4e 	bl	8000c28 <__aeabi_uldivmod>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4b61      	ldr	r3, [pc, #388]	; (8006318 <UART_SetConfig+0x2d4>)
 8006192:	fba3 2302 	umull	r2, r3, r3, r2
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	011c      	lsls	r4, r3, #4
 800619a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	1891      	adds	r1, r2, r2
 80061b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80061b4:	415b      	adcs	r3, r3
 80061b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061bc:	4641      	mov	r1, r8
 80061be:	eb12 0a01 	adds.w	sl, r2, r1
 80061c2:	4649      	mov	r1, r9
 80061c4:	eb43 0b01 	adc.w	fp, r3, r1
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061dc:	4692      	mov	sl, r2
 80061de:	469b      	mov	fp, r3
 80061e0:	4643      	mov	r3, r8
 80061e2:	eb1a 0303 	adds.w	r3, sl, r3
 80061e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ea:	464b      	mov	r3, r9
 80061ec:	eb4b 0303 	adc.w	r3, fp, r3
 80061f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006208:	460b      	mov	r3, r1
 800620a:	18db      	adds	r3, r3, r3
 800620c:	643b      	str	r3, [r7, #64]	; 0x40
 800620e:	4613      	mov	r3, r2
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	647b      	str	r3, [r7, #68]	; 0x44
 8006216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800621a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800621e:	f7fa fd03 	bl	8000c28 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4611      	mov	r1, r2
 8006228:	4b3b      	ldr	r3, [pc, #236]	; (8006318 <UART_SetConfig+0x2d4>)
 800622a:	fba3 2301 	umull	r2, r3, r3, r1
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2264      	movs	r2, #100	; 0x64
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <UART_SetConfig+0x2d4>)
 8006240:	fba3 2302 	umull	r2, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800624c:	441c      	add	r4, r3
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800625c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	63b9      	str	r1, [r7, #56]	; 0x38
 8006268:	415b      	adcs	r3, r3
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800626c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006270:	4641      	mov	r1, r8
 8006272:	1851      	adds	r1, r2, r1
 8006274:	6339      	str	r1, [r7, #48]	; 0x30
 8006276:	4649      	mov	r1, r9
 8006278:	414b      	adcs	r3, r1
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006288:	4659      	mov	r1, fp
 800628a:	00cb      	lsls	r3, r1, #3
 800628c:	4651      	mov	r1, sl
 800628e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006292:	4651      	mov	r1, sl
 8006294:	00ca      	lsls	r2, r1, #3
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	4603      	mov	r3, r0
 800629c:	4642      	mov	r2, r8
 800629e:	189b      	adds	r3, r3, r2
 80062a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062a4:	464b      	mov	r3, r9
 80062a6:	460a      	mov	r2, r1
 80062a8:	eb42 0303 	adc.w	r3, r2, r3
 80062ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062c4:	460b      	mov	r3, r1
 80062c6:	18db      	adds	r3, r3, r3
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	4613      	mov	r3, r2
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062da:	f7fa fca5 	bl	8000c28 <__aeabi_uldivmod>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <UART_SetConfig+0x2d4>)
 80062e4:	fba3 1302 	umull	r1, r3, r3, r2
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	2164      	movs	r1, #100	; 0x64
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	3332      	adds	r3, #50	; 0x32
 80062f6:	4a08      	ldr	r2, [pc, #32]	; (8006318 <UART_SetConfig+0x2d4>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	f003 0207 	and.w	r2, r3, #7
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4422      	add	r2, r4
 800630a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800630c:	e105      	b.n	800651a <UART_SetConfig+0x4d6>
 800630e:	bf00      	nop
 8006310:	40011000 	.word	0x40011000
 8006314:	40011400 	.word	0x40011400
 8006318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800631c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006320:	2200      	movs	r2, #0
 8006322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800632a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800632e:	4642      	mov	r2, r8
 8006330:	464b      	mov	r3, r9
 8006332:	1891      	adds	r1, r2, r2
 8006334:	6239      	str	r1, [r7, #32]
 8006336:	415b      	adcs	r3, r3
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
 800633a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800633e:	4641      	mov	r1, r8
 8006340:	1854      	adds	r4, r2, r1
 8006342:	4649      	mov	r1, r9
 8006344:	eb43 0501 	adc.w	r5, r3, r1
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	00eb      	lsls	r3, r5, #3
 8006352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006356:	00e2      	lsls	r2, r4, #3
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	4643      	mov	r3, r8
 800635e:	18e3      	adds	r3, r4, r3
 8006360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006364:	464b      	mov	r3, r9
 8006366:	eb45 0303 	adc.w	r3, r5, r3
 800636a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800637a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800638a:	4629      	mov	r1, r5
 800638c:	008b      	lsls	r3, r1, #2
 800638e:	4621      	mov	r1, r4
 8006390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006394:	4621      	mov	r1, r4
 8006396:	008a      	lsls	r2, r1, #2
 8006398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800639c:	f7fa fc44 	bl	8000c28 <__aeabi_uldivmod>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4b60      	ldr	r3, [pc, #384]	; (8006528 <UART_SetConfig+0x4e4>)
 80063a6:	fba3 2302 	umull	r2, r3, r3, r2
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	011c      	lsls	r4, r3, #4
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	1891      	adds	r1, r2, r2
 80063c6:	61b9      	str	r1, [r7, #24]
 80063c8:	415b      	adcs	r3, r3
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d0:	4641      	mov	r1, r8
 80063d2:	1851      	adds	r1, r2, r1
 80063d4:	6139      	str	r1, [r7, #16]
 80063d6:	4649      	mov	r1, r9
 80063d8:	414b      	adcs	r3, r1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e8:	4659      	mov	r1, fp
 80063ea:	00cb      	lsls	r3, r1, #3
 80063ec:	4651      	mov	r1, sl
 80063ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f2:	4651      	mov	r1, sl
 80063f4:	00ca      	lsls	r2, r1, #3
 80063f6:	4610      	mov	r0, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	4642      	mov	r2, r8
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006404:	464b      	mov	r3, r9
 8006406:	460a      	mov	r2, r1
 8006408:	eb42 0303 	adc.w	r3, r2, r3
 800640c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	67bb      	str	r3, [r7, #120]	; 0x78
 800641a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006428:	4649      	mov	r1, r9
 800642a:	008b      	lsls	r3, r1, #2
 800642c:	4641      	mov	r1, r8
 800642e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006432:	4641      	mov	r1, r8
 8006434:	008a      	lsls	r2, r1, #2
 8006436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800643a:	f7fa fbf5 	bl	8000c28 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4b39      	ldr	r3, [pc, #228]	; (8006528 <UART_SetConfig+0x4e4>)
 8006444:	fba3 1302 	umull	r1, r3, r3, r2
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	2164      	movs	r1, #100	; 0x64
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	3332      	adds	r3, #50	; 0x32
 8006456:	4a34      	ldr	r2, [pc, #208]	; (8006528 <UART_SetConfig+0x4e4>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006462:	441c      	add	r4, r3
 8006464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006468:	2200      	movs	r2, #0
 800646a:	673b      	str	r3, [r7, #112]	; 0x70
 800646c:	677a      	str	r2, [r7, #116]	; 0x74
 800646e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006472:	4642      	mov	r2, r8
 8006474:	464b      	mov	r3, r9
 8006476:	1891      	adds	r1, r2, r2
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	415b      	adcs	r3, r3
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006482:	4641      	mov	r1, r8
 8006484:	1851      	adds	r1, r2, r1
 8006486:	6039      	str	r1, [r7, #0]
 8006488:	4649      	mov	r1, r9
 800648a:	414b      	adcs	r3, r1
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800649a:	4659      	mov	r1, fp
 800649c:	00cb      	lsls	r3, r1, #3
 800649e:	4651      	mov	r1, sl
 80064a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a4:	4651      	mov	r1, sl
 80064a6:	00ca      	lsls	r2, r1, #3
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	4603      	mov	r3, r0
 80064ae:	4642      	mov	r2, r8
 80064b0:	189b      	adds	r3, r3, r2
 80064b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064b4:	464b      	mov	r3, r9
 80064b6:	460a      	mov	r2, r1
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	663b      	str	r3, [r7, #96]	; 0x60
 80064c8:	667a      	str	r2, [r7, #100]	; 0x64
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064d6:	4649      	mov	r1, r9
 80064d8:	008b      	lsls	r3, r1, #2
 80064da:	4641      	mov	r1, r8
 80064dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e0:	4641      	mov	r1, r8
 80064e2:	008a      	lsls	r2, r1, #2
 80064e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064e8:	f7fa fb9e 	bl	8000c28 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <UART_SetConfig+0x4e4>)
 80064f2:	fba3 1302 	umull	r1, r3, r3, r2
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	2164      	movs	r1, #100	; 0x64
 80064fa:	fb01 f303 	mul.w	r3, r1, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	3332      	adds	r3, #50	; 0x32
 8006504:	4a08      	ldr	r2, [pc, #32]	; (8006528 <UART_SetConfig+0x4e4>)
 8006506:	fba2 2303 	umull	r2, r3, r2, r3
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	f003 020f 	and.w	r2, r3, #15
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4422      	add	r2, r4
 8006518:	609a      	str	r2, [r3, #8]
}
 800651a:	bf00      	nop
 800651c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006520:	46bd      	mov	sp, r7
 8006522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006526:	bf00      	nop
 8006528:	51eb851f 	.word	0x51eb851f

0800652c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006530:	4904      	ldr	r1, [pc, #16]	; (8006544 <MX_FATFS_Init+0x18>)
 8006532:	4805      	ldr	r0, [pc, #20]	; (8006548 <MX_FATFS_Init+0x1c>)
 8006534:	f002 fce6 	bl	8008f04 <FATFS_LinkDriver>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	4b03      	ldr	r3, [pc, #12]	; (800654c <MX_FATFS_Init+0x20>)
 800653e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	200009e4 	.word	0x200009e4
 8006548:	20000010 	.word	0x20000010
 800654c:	200009e0 	.word	0x200009e0

08006550 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006554:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fa ff33 	bl	80013d8 <SD_disk_initialize>
 8006572:	4603      	mov	r3, r0
 8006574:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	4603      	mov	r3, r0
 8006586:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fb f80a 	bl	80015a4 <SD_disk_status>
 8006590:	4603      	mov	r3, r0
 8006592:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80065ac:	7bf8      	ldrb	r0, [r7, #15]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	f7fb f80c 	bl	80015d0 <SD_disk_read>
 80065b8:	4603      	mov	r3, r0
 80065ba:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80065d4:	7bf8      	ldrb	r0, [r7, #15]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	f7fb f862 	bl	80016a4 <SD_disk_write>
 80065e0:	4603      	mov	r3, r0
 80065e2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	603a      	str	r2, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
 80065f8:	460b      	mov	r3, r1
 80065fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	79b9      	ldrb	r1, [r7, #6]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb f8d2 	bl	80017ac <SD_disk_ioctl>
 8006608:	4603      	mov	r3, r0
 800660a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	4a08      	ldr	r2, [pc, #32]	; (8006644 <disk_status+0x30>)
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	79fa      	ldrb	r2, [r7, #7]
 800662c:	4905      	ldr	r1, [pc, #20]	; (8006644 <disk_status+0x30>)
 800662e:	440a      	add	r2, r1
 8006630:	7a12      	ldrb	r2, [r2, #8]
 8006632:	4610      	mov	r0, r2
 8006634:	4798      	blx	r3
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
  return stat;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000a10 	.word	0x20000a10

08006648 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	4a0d      	ldr	r2, [pc, #52]	; (8006690 <disk_initialize+0x48>)
 800665a:	5cd3      	ldrb	r3, [r2, r3]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d111      	bne.n	8006684 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	4a0b      	ldr	r2, [pc, #44]	; (8006690 <disk_initialize+0x48>)
 8006664:	2101      	movs	r1, #1
 8006666:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	4a09      	ldr	r2, [pc, #36]	; (8006690 <disk_initialize+0x48>)
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	79fa      	ldrb	r2, [r7, #7]
 8006676:	4906      	ldr	r1, [pc, #24]	; (8006690 <disk_initialize+0x48>)
 8006678:	440a      	add	r2, r1
 800667a:	7a12      	ldrb	r2, [r2, #8]
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000a10 	.word	0x20000a10

08006694 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <disk_read+0x3c>)
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	689c      	ldr	r4, [r3, #8]
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	4a07      	ldr	r2, [pc, #28]	; (80066d0 <disk_read+0x3c>)
 80066b4:	4413      	add	r3, r2
 80066b6:	7a18      	ldrb	r0, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	47a0      	blx	r4
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd90      	pop	{r4, r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000a10 	.word	0x20000a10

080066d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <disk_write+0x3c>)
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68dc      	ldr	r4, [r3, #12]
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	4a07      	ldr	r2, [pc, #28]	; (8006710 <disk_write+0x3c>)
 80066f4:	4413      	add	r3, r2
 80066f6:	7a18      	ldrb	r0, [r3, #8]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	47a0      	blx	r4
 8006700:	4603      	mov	r3, r0
 8006702:	75fb      	strb	r3, [r7, #23]
  return res;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
}
 8006706:	4618      	mov	r0, r3
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	bd90      	pop	{r4, r7, pc}
 800670e:	bf00      	nop
 8006710:	20000a10 	.word	0x20000a10

08006714 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	603a      	str	r2, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
 8006720:	460b      	mov	r3, r1
 8006722:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	4a09      	ldr	r2, [pc, #36]	; (800674c <disk_ioctl+0x38>)
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	79fa      	ldrb	r2, [r7, #7]
 8006732:	4906      	ldr	r1, [pc, #24]	; (800674c <disk_ioctl+0x38>)
 8006734:	440a      	add	r2, r1
 8006736:	7a10      	ldrb	r0, [r2, #8]
 8006738:	79b9      	ldrb	r1, [r7, #6]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
  return res;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000a10 	.word	0x20000a10

08006750 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3301      	adds	r3, #1
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	b21a      	sxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	b21b      	sxth	r3, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	b21b      	sxth	r3, r3
 8006770:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006772:	89fb      	ldrh	r3, [r7, #14]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3303      	adds	r3, #3
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	3202      	adds	r2, #2
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	3201      	adds	r2, #1
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	887a      	ldrh	r2, [r7, #2]
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	887b      	ldrh	r3, [r7, #2]
 80067e0:	0a1b      	lsrs	r3, r3, #8
 80067e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	1c53      	adds	r3, r2, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	6179      	str	r1, [r7, #20]
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3b01      	subs	r3, #1
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f1      	bne.n	800686e <mem_cpy+0x1a>
	}
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	617a      	str	r2, [r7, #20]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f3      	bne.n	80068a6 <mem_set+0x10>
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	; 0x24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	61fa      	str	r2, [r7, #28]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	61ba      	str	r2, [r7, #24]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	1acb      	subs	r3, r1, r3
 80068f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <mem_cmp+0x40>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0eb      	beq.n	80068e4 <mem_cmp+0x18>

	return r;
 800690c:	697b      	ldr	r3, [r7, #20]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3724      	adds	r7, #36	; 0x24
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006924:	e002      	b.n	800692c <chk_chr+0x12>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3301      	adds	r3, #1
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <chk_chr+0x26>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	4293      	cmp	r3, r2
 800693e:	d1f2      	bne.n	8006926 <chk_chr+0xc>
	return *str;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	781b      	ldrb	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e029      	b.n	80069b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <chk_lock+0xb4>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	4413      	add	r3, r2
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01d      	beq.n	80069ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <chk_lock+0xb4>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4413      	add	r3, r2
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d116      	bne.n	80069b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <chk_lock+0xb4>)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	4413      	add	r3, r2
 800698c:	3304      	adds	r3, #4
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006994:	429a      	cmp	r2, r3
 8006996:	d10c      	bne.n	80069b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006998:	4a1a      	ldr	r2, [pc, #104]	; (8006a04 <chk_lock+0xb4>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	4413      	add	r3, r2
 80069a0:	3308      	adds	r3, #8
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d102      	bne.n	80069b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80069ac:	e007      	b.n	80069be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80069ae:	2301      	movs	r3, #1
 80069b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d9d2      	bls.n	8006964 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d109      	bne.n	80069d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <chk_lock+0x80>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d101      	bne.n	80069d4 <chk_lock+0x84>
 80069d0:	2300      	movs	r3, #0
 80069d2:	e010      	b.n	80069f6 <chk_lock+0xa6>
 80069d4:	2312      	movs	r3, #18
 80069d6:	e00e      	b.n	80069f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d108      	bne.n	80069f0 <chk_lock+0xa0>
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <chk_lock+0xb4>)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	4413      	add	r3, r2
 80069e6:	330c      	adds	r3, #12
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ee:	d101      	bne.n	80069f4 <chk_lock+0xa4>
 80069f0:	2310      	movs	r3, #16
 80069f2:	e000      	b.n	80069f6 <chk_lock+0xa6>
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	200009f0 	.word	0x200009f0

08006a08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e002      	b.n	8006a1a <enq_lock+0x12>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3301      	adds	r3, #1
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d806      	bhi.n	8006a2e <enq_lock+0x26>
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <enq_lock+0x40>)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	4413      	add	r3, r2
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f2      	bne.n	8006a14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	200009f0 	.word	0x200009f0

08006a4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e01f      	b.n	8006a9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006a5c:	4a41      	ldr	r2, [pc, #260]	; (8006b64 <inc_lock+0x118>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4413      	add	r3, r2
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d113      	bne.n	8006a96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006a6e:	4a3d      	ldr	r2, [pc, #244]	; (8006b64 <inc_lock+0x118>)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	4413      	add	r3, r2
 8006a76:	3304      	adds	r3, #4
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d109      	bne.n	8006a96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006a82:	4a38      	ldr	r2, [pc, #224]	; (8006b64 <inc_lock+0x118>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	4413      	add	r3, r2
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d006      	beq.n	8006aa4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d9dc      	bls.n	8006a5c <inc_lock+0x10>
 8006aa2:	e000      	b.n	8006aa6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006aa4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d132      	bne.n	8006b12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e002      	b.n	8006ab8 <inc_lock+0x6c>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d806      	bhi.n	8006acc <inc_lock+0x80>
 8006abe:	4a29      	ldr	r2, [pc, #164]	; (8006b64 <inc_lock+0x118>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	4413      	add	r3, r2
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f2      	bne.n	8006ab2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d101      	bne.n	8006ad6 <inc_lock+0x8a>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e040      	b.n	8006b58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4922      	ldr	r1, [pc, #136]	; (8006b64 <inc_lock+0x118>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	440b      	add	r3, r1
 8006ae2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	491e      	ldr	r1, [pc, #120]	; (8006b64 <inc_lock+0x118>)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	440b      	add	r3, r1
 8006af0:	3304      	adds	r3, #4
 8006af2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	491a      	ldr	r1, [pc, #104]	; (8006b64 <inc_lock+0x118>)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	440b      	add	r3, r1
 8006b00:	3308      	adds	r3, #8
 8006b02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b04:	4a17      	ldr	r2, [pc, #92]	; (8006b64 <inc_lock+0x118>)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	4413      	add	r3, r2
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	2200      	movs	r2, #0
 8006b10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <inc_lock+0xe0>
 8006b18:	4a12      	ldr	r2, [pc, #72]	; (8006b64 <inc_lock+0x118>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	4413      	add	r3, r2
 8006b20:	330c      	adds	r3, #12
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <inc_lock+0xe0>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e015      	b.n	8006b58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d108      	bne.n	8006b44 <inc_lock+0xf8>
 8006b32:	4a0c      	ldr	r2, [pc, #48]	; (8006b64 <inc_lock+0x118>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	4413      	add	r3, r2
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	e001      	b.n	8006b48 <inc_lock+0xfc>
 8006b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b48:	4906      	ldr	r1, [pc, #24]	; (8006b64 <inc_lock+0x118>)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	440b      	add	r3, r1
 8006b50:	330c      	adds	r3, #12
 8006b52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	200009f0 	.word	0x200009f0

08006b68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d825      	bhi.n	8006bc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8006b7c:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <dec_lock+0x74>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	4413      	add	r3, r2
 8006b84:	330c      	adds	r3, #12
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006b8a:	89fb      	ldrh	r3, [r7, #14]
 8006b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b90:	d101      	bne.n	8006b96 <dec_lock+0x2e>
 8006b92:	2300      	movs	r3, #0
 8006b94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <dec_lock+0x3a>
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006ba2:	4a0e      	ldr	r2, [pc, #56]	; (8006bdc <dec_lock+0x74>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	4413      	add	r3, r2
 8006baa:	330c      	adds	r3, #12
 8006bac:	89fa      	ldrh	r2, [r7, #14]
 8006bae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006bb0:	89fb      	ldrh	r3, [r7, #14]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <dec_lock+0x5a>
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <dec_lock+0x74>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	4413      	add	r3, r2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	737b      	strb	r3, [r7, #13]
 8006bc6:	e001      	b.n	8006bcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006bc8:	2302      	movs	r3, #2
 8006bca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006bcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	200009f0 	.word	0x200009f0

08006be0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e010      	b.n	8006c10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006bee:	4a0d      	ldr	r2, [pc, #52]	; (8006c24 <clear_lock+0x44>)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	4413      	add	r3, r2
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d105      	bne.n	8006c0a <clear_lock+0x2a>
 8006bfe:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <clear_lock+0x44>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4413      	add	r3, r2
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d9eb      	bls.n	8006bee <clear_lock+0xe>
	}
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	200009f0 	.word	0x200009f0

08006c28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	78db      	ldrb	r3, [r3, #3]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d034      	beq.n	8006ca6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7858      	ldrb	r0, [r3, #1]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	f7ff fd40 	bl	80066d4 <disk_write>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
 8006c5e:	e022      	b.n	8006ca6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	1ad2      	subs	r2, r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d217      	bcs.n	8006ca6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	789b      	ldrb	r3, [r3, #2]
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	e010      	b.n	8006ca0 <sync_window+0x78>
					wsect += fs->fsize;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	7858      	ldrb	r0, [r3, #1]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c92:	2301      	movs	r3, #1
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	f7ff fd1d 	bl	80066d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d8eb      	bhi.n	8006c7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d01b      	beq.n	8006d00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ffad 	bl	8006c28 <sync_window>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d113      	bne.n	8006d00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7858      	ldrb	r0, [r3, #1]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	f7ff fcd5 	bl	8006694 <disk_read>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ff87 	bl	8006c28 <sync_window>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d158      	bne.n	8006dd6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d148      	bne.n	8006dbe <sync_fs+0xb2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	791b      	ldrb	r3, [r3, #4]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d144      	bne.n	8006dbe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3330      	adds	r3, #48	; 0x30
 8006d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fda9 	bl	8006896 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3330      	adds	r3, #48	; 0x30
 8006d48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d4c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fd38 	bl	80067c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3330      	adds	r3, #48	; 0x30
 8006d5a:	4921      	ldr	r1, [pc, #132]	; (8006de0 <sync_fs+0xd4>)
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fd4d 	bl	80067fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3330      	adds	r3, #48	; 0x30
 8006d66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d6a:	491e      	ldr	r1, [pc, #120]	; (8006de4 <sync_fs+0xd8>)
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fd45 	bl	80067fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3330      	adds	r3, #48	; 0x30
 8006d76:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f7ff fd3b 	bl	80067fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3330      	adds	r3, #48	; 0x30
 8006d8a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f7ff fd31 	bl	80067fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	7858      	ldrb	r0, [r3, #1]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	2301      	movs	r3, #1
 8006db4:	f7ff fc8e 	bl	80066d4 <disk_write>
			fs->fsi_flag = 0;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fca4 	bl	8006714 <disk_ioctl>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <sync_fs+0xca>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	41615252 	.word	0x41615252
 8006de4:	61417272 	.word	0x61417272

08006de8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	3b02      	subs	r3, #2
 8006df6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	3b02      	subs	r3, #2
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d301      	bcc.n	8006e08 <clust2sect+0x20>
 8006e04:	2300      	movs	r3, #0
 8006e06:	e008      	b.n	8006e1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	895b      	ldrh	r3, [r3, #10]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	fb03 f202 	mul.w	r2, r3, r2
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	4413      	add	r3, r2
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b086      	sub	sp, #24
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d904      	bls.n	8006e46 <get_fat+0x20>
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006e46:	2301      	movs	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e08f      	b.n	8006f6c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d062      	beq.n	8006f20 <get_fat+0xfa>
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	dc7c      	bgt.n	8006f58 <get_fat+0x132>
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d002      	beq.n	8006e68 <get_fat+0x42>
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d042      	beq.n	8006eec <get_fat+0xc6>
 8006e66:	e077      	b.n	8006f58 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	0a5b      	lsrs	r3, r3, #9
 8006e7e:	4413      	add	r3, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7ff ff14 	bl	8006cb0 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d167      	bne.n	8006f5e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	60fa      	str	r2, [r7, #12]
 8006e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ea0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	0a5b      	lsrs	r3, r3, #9
 8006eaa:	4413      	add	r3, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	6938      	ldr	r0, [r7, #16]
 8006eb0:	f7ff fefe 	bl	8006cb0 <move_window>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d153      	bne.n	8006f62 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <get_fat+0xbc>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	e002      	b.n	8006ee8 <get_fat+0xc2>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee8:	617b      	str	r3, [r7, #20]
			break;
 8006eea:	e03f      	b.n	8006f6c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6a1a      	ldr	r2, [r3, #32]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	4413      	add	r3, r2
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6938      	ldr	r0, [r7, #16]
 8006efa:	f7ff fed9 	bl	8006cb0 <move_window>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d130      	bne.n	8006f66 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006f12:	4413      	add	r3, r2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fc1b 	bl	8006750 <ld_word>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	617b      	str	r3, [r7, #20]
			break;
 8006f1e:	e025      	b.n	8006f6c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	6a1a      	ldr	r2, [r3, #32]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	09db      	lsrs	r3, r3, #7
 8006f28:	4413      	add	r3, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f7ff febf 	bl	8006cb0 <move_window>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d118      	bne.n	8006f6a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f46:	4413      	add	r3, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fc19 	bl	8006780 <ld_dword>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f54:	617b      	str	r3, [r7, #20]
			break;
 8006f56:	e009      	b.n	8006f6c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006f58:	2301      	movs	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	e006      	b.n	8006f6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f5e:	bf00      	nop
 8006f60:	e004      	b.n	8006f6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f62:	bf00      	nop
 8006f64:	e002      	b.n	8006f6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f6a:	bf00      	nop
		}
	}

	return val;
 8006f6c:	697b      	ldr	r3, [r7, #20]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006f76:	b590      	push	{r4, r7, lr}
 8006f78:	b089      	sub	sp, #36	; 0x24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006f82:	2302      	movs	r3, #2
 8006f84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	f240 80d2 	bls.w	8007132 <put_fat+0x1bc>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	f080 80cc 	bcs.w	8007132 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f000 8096 	beq.w	80070d0 <put_fat+0x15a>
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	f300 80cd 	bgt.w	8007144 <put_fat+0x1ce>
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d002      	beq.n	8006fb4 <put_fat+0x3e>
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d06e      	beq.n	8007090 <put_fat+0x11a>
 8006fb2:	e0c7      	b.n	8007144 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1a      	ldr	r2, [r3, #32]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	0a5b      	lsrs	r3, r3, #9
 8006fca:	4413      	add	r3, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff fe6e 	bl	8006cb0 <move_window>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fd8:	7ffb      	ldrb	r3, [r7, #31]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 80ab 	bne.w	8007136 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	1c59      	adds	r1, r3, #1
 8006fea:	61b9      	str	r1, [r7, #24]
 8006fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff0:	4413      	add	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00d      	beq.n	800701a <put_fat+0xa4>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b25b      	sxtb	r3, r3
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	b25a      	sxtb	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	b25b      	sxtb	r3, r3
 8007012:	4313      	orrs	r3, r2
 8007014:	b25b      	sxtb	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e001      	b.n	800701e <put_fat+0xa8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	0a5b      	lsrs	r3, r3, #9
 8007030:	4413      	add	r3, r2
 8007032:	4619      	mov	r1, r3
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fe3b 	bl	8006cb0 <move_window>
 800703a:	4603      	mov	r3, r0
 800703c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800703e:	7ffb      	ldrb	r3, [r7, #31]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d17a      	bne.n	800713a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007050:	4413      	add	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <put_fat+0xf0>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	b2db      	uxtb	r3, r3
 8007064:	e00e      	b.n	8007084 <put_fat+0x10e>
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b25b      	sxtb	r3, r3
 800706c:	f023 030f 	bic.w	r3, r3, #15
 8007070:	b25a      	sxtb	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	b25b      	sxtb	r3, r3
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	b25b      	sxtb	r3, r3
 800707e:	4313      	orrs	r3, r2
 8007080:	b25b      	sxtb	r3, r3
 8007082:	b2db      	uxtb	r3, r3
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	70da      	strb	r2, [r3, #3]
			break;
 800708e:	e059      	b.n	8007144 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a1a      	ldr	r2, [r3, #32]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	4413      	add	r3, r2
 800709a:	4619      	mov	r1, r3
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff fe07 	bl	8006cb0 <move_window>
 80070a2:	4603      	mov	r3, r0
 80070a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070a6:	7ffb      	ldrb	r3, [r7, #31]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d148      	bne.n	800713e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80070ba:	4413      	add	r3, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	b292      	uxth	r2, r2
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fb7f 	bl	80067c6 <st_word>
			fs->wflag = 1;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	70da      	strb	r2, [r3, #3]
			break;
 80070ce:	e039      	b.n	8007144 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1a      	ldr	r2, [r3, #32]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	09db      	lsrs	r3, r3, #7
 80070d8:	4413      	add	r3, r2
 80070da:	4619      	mov	r1, r3
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7ff fde7 	bl	8006cb0 <move_window>
 80070e2:	4603      	mov	r3, r0
 80070e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070e6:	7ffb      	ldrb	r3, [r7, #31]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d12a      	bne.n	8007142 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007100:	4413      	add	r3, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fb3c 	bl	8006780 <ld_dword>
 8007108:	4603      	mov	r3, r0
 800710a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800710e:	4323      	orrs	r3, r4
 8007110:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007120:	4413      	add	r3, r2
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fb69 	bl	80067fc <st_dword>
			fs->wflag = 1;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	70da      	strb	r2, [r3, #3]
			break;
 8007130:	e008      	b.n	8007144 <put_fat+0x1ce>
		}
	}
 8007132:	bf00      	nop
 8007134:	e006      	b.n	8007144 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007136:	bf00      	nop
 8007138:	e004      	b.n	8007144 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800713a:	bf00      	nop
 800713c:	e002      	b.n	8007144 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007142:	bf00      	nop
	return res;
 8007144:	7ffb      	ldrb	r3, [r7, #31]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3724      	adds	r7, #36	; 0x24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}

0800714e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b088      	sub	sp, #32
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d904      	bls.n	8007174 <remove_chain+0x26>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d301      	bcc.n	8007178 <remove_chain+0x2a>
 8007174:	2302      	movs	r3, #2
 8007176:	e04b      	b.n	8007210 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00c      	beq.n	8007198 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800717e:	f04f 32ff 	mov.w	r2, #4294967295
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	69b8      	ldr	r0, [r7, #24]
 8007186:	f7ff fef6 	bl	8006f76 <put_fat>
 800718a:	4603      	mov	r3, r0
 800718c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <remove_chain+0x4a>
 8007194:	7ffb      	ldrb	r3, [r7, #31]
 8007196:	e03b      	b.n	8007210 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fe43 	bl	8006e26 <get_fat>
 80071a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d031      	beq.n	800720c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <remove_chain+0x64>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e02e      	b.n	8007210 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d101      	bne.n	80071be <remove_chain+0x70>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e028      	b.n	8007210 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80071be:	2200      	movs	r2, #0
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	69b8      	ldr	r0, [r7, #24]
 80071c4:	f7ff fed7 	bl	8006f76 <put_fat>
 80071c8:	4603      	mov	r3, r0
 80071ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80071cc:	7ffb      	ldrb	r3, [r7, #31]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <remove_chain+0x88>
 80071d2:	7ffb      	ldrb	r3, [r7, #31]
 80071d4:	e01c      	b.n	8007210 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	3b02      	subs	r3, #2
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d20b      	bcs.n	80071fc <remove_chain+0xae>
			fs->free_clst++;
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	791b      	ldrb	r3, [r3, #4]
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	429a      	cmp	r2, r3
 8007208:	d3c6      	bcc.n	8007198 <remove_chain+0x4a>
 800720a:	e000      	b.n	800720e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800720c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10d      	bne.n	800724a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <create_chain+0x2c>
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d31b      	bcc.n	800727c <create_chain+0x64>
 8007244:	2301      	movs	r3, #1
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	e018      	b.n	800727c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fdea 	bl	8006e26 <get_fat>
 8007252:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d801      	bhi.n	800725e <create_chain+0x46>
 800725a:	2301      	movs	r3, #1
 800725c:	e070      	b.n	8007340 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d101      	bne.n	800726a <create_chain+0x52>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	e06a      	b.n	8007340 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d201      	bcs.n	8007278 <create_chain+0x60>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	e063      	b.n	8007340 <create_chain+0x128>
		scl = clst;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	429a      	cmp	r2, r3
 800728e:	d307      	bcc.n	80072a0 <create_chain+0x88>
				ncl = 2;
 8007290:	2302      	movs	r3, #2
 8007292:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	429a      	cmp	r2, r3
 800729a:	d901      	bls.n	80072a0 <create_chain+0x88>
 800729c:	2300      	movs	r3, #0
 800729e:	e04f      	b.n	8007340 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80072a0:	69f9      	ldr	r1, [r7, #28]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fdbf 	bl	8006e26 <get_fat>
 80072a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00e      	beq.n	80072ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d003      	beq.n	80072be <create_chain+0xa6>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d101      	bne.n	80072c2 <create_chain+0xaa>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	e03e      	b.n	8007340 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d1da      	bne.n	8007280 <create_chain+0x68>
 80072ca:	2300      	movs	r3, #0
 80072cc:	e038      	b.n	8007340 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80072ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	6938      	ldr	r0, [r7, #16]
 80072d8:	f7ff fe4d 	bl	8006f76 <put_fat>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <create_chain+0xe2>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6938      	ldr	r0, [r7, #16]
 80072f2:	f7ff fe40 	bl	8006f76 <put_fat>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d116      	bne.n	800732e <create_chain+0x116>
		fs->last_clst = ncl;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	3b02      	subs	r3, #2
 8007310:	429a      	cmp	r2, r3
 8007312:	d804      	bhi.n	800731e <create_chain+0x106>
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	1e5a      	subs	r2, r3, #1
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	711a      	strb	r2, [r3, #4]
 800732c:	e007      	b.n	800733e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d102      	bne.n	800733a <create_chain+0x122>
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	e000      	b.n	800733c <create_chain+0x124>
 800733a:	2301      	movs	r3, #1
 800733c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800733e:	69fb      	ldr	r3, [r7, #28]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3720      	adds	r7, #32
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	3304      	adds	r3, #4
 800735e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	0a5b      	lsrs	r3, r3, #9
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	8952      	ldrh	r2, [r2, #10]
 8007368:	fbb3 f3f2 	udiv	r3, r3, r2
 800736c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	613a      	str	r2, [r7, #16]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <clmt_clust+0x3a>
 800737e:	2300      	movs	r3, #0
 8007380:	e010      	b.n	80073a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	d307      	bcc.n	800739a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3304      	adds	r3, #4
 8007396:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007398:	e7e9      	b.n	800736e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800739a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	4413      	add	r3, r2
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c6:	d204      	bcs.n	80073d2 <dir_sdi+0x22>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80073d2:	2302      	movs	r3, #2
 80073d4:	e063      	b.n	800749e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <dir_sdi+0x46>
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d902      	bls.n	80073f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	8912      	ldrh	r2, [r2, #8]
 8007404:	4293      	cmp	r3, r2
 8007406:	d301      	bcc.n	800740c <dir_sdi+0x5c>
 8007408:	2302      	movs	r3, #2
 800740a:	e048      	b.n	800749e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	61da      	str	r2, [r3, #28]
 8007414:	e029      	b.n	800746a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	895b      	ldrh	r3, [r3, #10]
 800741a:	025b      	lsls	r3, r3, #9
 800741c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800741e:	e019      	b.n	8007454 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6979      	ldr	r1, [r7, #20]
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff fcfe 	bl	8006e26 <get_fat>
 800742a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d101      	bne.n	8007438 <dir_sdi+0x88>
 8007434:	2301      	movs	r3, #1
 8007436:	e032      	b.n	800749e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d904      	bls.n	8007448 <dir_sdi+0x98>
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	429a      	cmp	r2, r3
 8007446:	d301      	bcc.n	800744c <dir_sdi+0x9c>
 8007448:	2302      	movs	r3, #2
 800744a:	e028      	b.n	800749e <dir_sdi+0xee>
			ofs -= csz;
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	429a      	cmp	r2, r3
 800745a:	d2e1      	bcs.n	8007420 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800745c:	6979      	ldr	r1, [r7, #20]
 800745e:	6938      	ldr	r0, [r7, #16]
 8007460:	f7ff fcc2 	bl	8006de8 <clust2sect>
 8007464:	4602      	mov	r2, r0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <dir_sdi+0xcc>
 8007478:	2302      	movs	r3, #2
 800747a:	e010      	b.n	800749e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	0a5b      	lsrs	r3, r3, #9
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	441a      	add	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	3320      	adds	r3, #32
 80074bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <dir_next+0x28>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074cc:	d301      	bcc.n	80074d2 <dir_next+0x2c>
 80074ce:	2304      	movs	r3, #4
 80074d0:	e0aa      	b.n	8007628 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f040 8098 	bne.w	800760e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	8912      	ldrh	r2, [r2, #8]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	f0c0 8088 	bcc.w	800760e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	61da      	str	r2, [r3, #28]
 8007504:	2304      	movs	r3, #4
 8007506:	e08f      	b.n	8007628 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	0a5b      	lsrs	r3, r3, #9
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	8952      	ldrh	r2, [r2, #10]
 8007510:	3a01      	subs	r2, #1
 8007512:	4013      	ands	r3, r2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d17a      	bne.n	800760e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f7ff fc80 	bl	8006e26 <get_fat>
 8007526:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d801      	bhi.n	8007532 <dir_next+0x8c>
 800752e:	2302      	movs	r3, #2
 8007530:	e07a      	b.n	8007628 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d101      	bne.n	800753e <dir_next+0x98>
 800753a:	2301      	movs	r3, #1
 800753c:	e074      	b.n	8007628 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	429a      	cmp	r2, r3
 8007546:	d358      	bcc.n	80075fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	61da      	str	r2, [r3, #28]
 8007554:	2304      	movs	r3, #4
 8007556:	e067      	b.n	8007628 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7ff fe59 	bl	8007218 <create_chain>
 8007566:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <dir_next+0xcc>
 800756e:	2307      	movs	r3, #7
 8007570:	e05a      	b.n	8007628 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <dir_next+0xd6>
 8007578:	2302      	movs	r3, #2
 800757a:	e055      	b.n	8007628 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d101      	bne.n	8007588 <dir_next+0xe2>
 8007584:	2301      	movs	r3, #1
 8007586:	e04f      	b.n	8007628 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff fb4d 	bl	8006c28 <sync_window>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <dir_next+0xf2>
 8007594:	2301      	movs	r3, #1
 8007596:	e047      	b.n	8007628 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3330      	adds	r3, #48	; 0x30
 800759c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f977 	bl	8006896 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075a8:	2300      	movs	r3, #0
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	6979      	ldr	r1, [r7, #20]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fc1a 	bl	8006de8 <clust2sect>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80075ba:	e012      	b.n	80075e2 <dir_next+0x13c>
						fs->wflag = 1;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fb30 	bl	8006c28 <sync_window>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <dir_next+0x12c>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e02a      	b.n	8007628 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	3301      	adds	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	895b      	ldrh	r3, [r3, #10]
 80075e6:	461a      	mov	r2, r3
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d3e6      	bcc.n	80075bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad2      	subs	r2, r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007600:	6979      	ldr	r1, [r7, #20]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fbf0 	bl	8006de8 <clust2sect>
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007620:	441a      	add	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007640:	2100      	movs	r1, #0
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff feb4 	bl	80073b0 <dir_sdi>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d12b      	bne.n	80076aa <dir_alloc+0x7a>
		n = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	4619      	mov	r1, r3
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff fb27 	bl	8006cb0 <move_window>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d11d      	bne.n	80076a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2be5      	cmp	r3, #229	; 0xe5
 8007674:	d004      	beq.n	8007680 <dir_alloc+0x50>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d107      	bne.n	8007690 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3301      	adds	r3, #1
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d102      	bne.n	8007694 <dir_alloc+0x64>
 800768e:	e00c      	b.n	80076aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007694:	2101      	movs	r1, #1
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff05 	bl	80074a6 <dir_next>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0d7      	beq.n	8007656 <dir_alloc+0x26>
 80076a6:	e000      	b.n	80076aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80076a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d101      	bne.n	80076b4 <dir_alloc+0x84>
 80076b0:	2307      	movs	r3, #7
 80076b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	331a      	adds	r3, #26
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff f83f 	bl	8006750 <ld_word>
 80076d2:	4603      	mov	r3, r0
 80076d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d109      	bne.n	80076f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	3314      	adds	r3, #20
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff f834 	bl	8006750 <ld_word>
 80076e8:	4603      	mov	r3, r0
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80076f2:	68fb      	ldr	r3, [r7, #12]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	331a      	adds	r3, #26
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	b292      	uxth	r2, r2
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff f857 	bl	80067c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d109      	bne.n	8007734 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f103 0214 	add.w	r2, r3, #20
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0c1b      	lsrs	r3, r3, #16
 800772a:	b29b      	uxth	r3, r3
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f7ff f849 	bl	80067c6 <st_word>
	}
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fe2f 	bl	80073b0 <dir_sdi>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <dir_find+0x24>
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	e03e      	b.n	80077de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4619      	mov	r1, r3
 8007766:	6938      	ldr	r0, [r7, #16]
 8007768:	f7ff faa2 	bl	8006cb0 <move_window>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d12f      	bne.n	80077d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <dir_find+0x4e>
 8007784:	2304      	movs	r3, #4
 8007786:	75fb      	strb	r3, [r7, #23]
 8007788:	e028      	b.n	80077dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	330b      	adds	r3, #11
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007796:	b2da      	uxtb	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	330b      	adds	r3, #11
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <dir_find+0x86>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a18      	ldr	r0, [r3, #32]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3324      	adds	r3, #36	; 0x24
 80077b4:	220b      	movs	r2, #11
 80077b6:	4619      	mov	r1, r3
 80077b8:	f7ff f888 	bl	80068cc <mem_cmp>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077c2:	2100      	movs	r1, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff fe6e 	bl	80074a6 <dir_next>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0c5      	beq.n	8007760 <dir_find+0x24>
 80077d4:	e002      	b.n	80077dc <dir_find+0xa0>
		if (res != FR_OK) break;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80077da:	bf00      	nop

	return res;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80077f4:	2101      	movs	r1, #1
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff ff1a 	bl	8007630 <dir_alloc>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d11c      	bne.n	8007840 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	4619      	mov	r1, r3
 800780c:	68b8      	ldr	r0, [r7, #8]
 800780e:	f7ff fa4f 	bl	8006cb0 <move_window>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d111      	bne.n	8007840 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	2220      	movs	r2, #32
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff f836 	bl	8006896 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a18      	ldr	r0, [r3, #32]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3324      	adds	r3, #36	; 0x24
 8007832:	220b      	movs	r2, #11
 8007834:	4619      	mov	r1, r3
 8007836:	f7ff f80d 	bl	8006854 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2201      	movs	r2, #1
 800783e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007862:	220b      	movs	r2, #11
 8007864:	2120      	movs	r1, #32
 8007866:	68b8      	ldr	r0, [r7, #8]
 8007868:	f7ff f815 	bl	8006896 <mem_set>
	si = i = 0; ni = 8;
 800786c:	2300      	movs	r3, #0
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	2308      	movs	r3, #8
 8007876:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	61fa      	str	r2, [r7, #28]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007886:	7efb      	ldrb	r3, [r7, #27]
 8007888:	2b20      	cmp	r3, #32
 800788a:	d94e      	bls.n	800792a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800788c:	7efb      	ldrb	r3, [r7, #27]
 800788e:	2b2f      	cmp	r3, #47	; 0x2f
 8007890:	d006      	beq.n	80078a0 <create_name+0x54>
 8007892:	7efb      	ldrb	r3, [r7, #27]
 8007894:	2b5c      	cmp	r3, #92	; 0x5c
 8007896:	d110      	bne.n	80078ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007898:	e002      	b.n	80078a0 <create_name+0x54>
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	3301      	adds	r3, #1
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b2f      	cmp	r3, #47	; 0x2f
 80078aa:	d0f6      	beq.n	800789a <create_name+0x4e>
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b5c      	cmp	r3, #92	; 0x5c
 80078b6:	d0f0      	beq.n	800789a <create_name+0x4e>
			break;
 80078b8:	e038      	b.n	800792c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80078ba:	7efb      	ldrb	r3, [r7, #27]
 80078bc:	2b2e      	cmp	r3, #46	; 0x2e
 80078be:	d003      	beq.n	80078c8 <create_name+0x7c>
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d30c      	bcc.n	80078e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2b0b      	cmp	r3, #11
 80078cc:	d002      	beq.n	80078d4 <create_name+0x88>
 80078ce:	7efb      	ldrb	r3, [r7, #27]
 80078d0:	2b2e      	cmp	r3, #46	; 0x2e
 80078d2:	d001      	beq.n	80078d8 <create_name+0x8c>
 80078d4:	2306      	movs	r3, #6
 80078d6:	e044      	b.n	8007962 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80078d8:	2308      	movs	r3, #8
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	230b      	movs	r3, #11
 80078de:	617b      	str	r3, [r7, #20]
			continue;
 80078e0:	e022      	b.n	8007928 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80078e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	da04      	bge.n	80078f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80078ea:	7efb      	ldrb	r3, [r7, #27]
 80078ec:	3b80      	subs	r3, #128	; 0x80
 80078ee:	4a1f      	ldr	r2, [pc, #124]	; (800796c <create_name+0x120>)
 80078f0:	5cd3      	ldrb	r3, [r2, r3]
 80078f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80078f4:	7efb      	ldrb	r3, [r7, #27]
 80078f6:	4619      	mov	r1, r3
 80078f8:	481d      	ldr	r0, [pc, #116]	; (8007970 <create_name+0x124>)
 80078fa:	f7ff f80e 	bl	800691a <chk_chr>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <create_name+0xbc>
 8007904:	2306      	movs	r3, #6
 8007906:	e02c      	b.n	8007962 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007908:	7efb      	ldrb	r3, [r7, #27]
 800790a:	2b60      	cmp	r3, #96	; 0x60
 800790c:	d905      	bls.n	800791a <create_name+0xce>
 800790e:	7efb      	ldrb	r3, [r7, #27]
 8007910:	2b7a      	cmp	r3, #122	; 0x7a
 8007912:	d802      	bhi.n	800791a <create_name+0xce>
 8007914:	7efb      	ldrb	r3, [r7, #27]
 8007916:	3b20      	subs	r3, #32
 8007918:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	613a      	str	r2, [r7, #16]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	4413      	add	r3, r2
 8007924:	7efa      	ldrb	r2, [r7, #27]
 8007926:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007928:	e7a6      	b.n	8007878 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800792a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	441a      	add	r2, r3
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <create_name+0xf4>
 800793c:	2306      	movs	r3, #6
 800793e:	e010      	b.n	8007962 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2be5      	cmp	r3, #229	; 0xe5
 8007946:	d102      	bne.n	800794e <create_name+0x102>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2205      	movs	r2, #5
 800794c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800794e:	7efb      	ldrb	r3, [r7, #27]
 8007950:	2b20      	cmp	r3, #32
 8007952:	d801      	bhi.n	8007958 <create_name+0x10c>
 8007954:	2204      	movs	r2, #4
 8007956:	e000      	b.n	800795a <create_name+0x10e>
 8007958:	2200      	movs	r2, #0
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	330b      	adds	r3, #11
 800795e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007960:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	0800bf6c 	.word	0x0800bf6c
 8007970:	0800bf10 	.word	0x0800bf10

08007974 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007988:	e002      	b.n	8007990 <follow_path+0x1c>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	3301      	adds	r3, #1
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b2f      	cmp	r3, #47	; 0x2f
 8007996:	d0f8      	beq.n	800798a <follow_path+0x16>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b5c      	cmp	r3, #92	; 0x5c
 800799e:	d0f4      	beq.n	800798a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2200      	movs	r2, #0
 80079a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b1f      	cmp	r3, #31
 80079ac:	d80a      	bhi.n	80079c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2280      	movs	r2, #128	; 0x80
 80079b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80079b6:	2100      	movs	r1, #0
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fcf9 	bl	80073b0 <dir_sdi>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]
 80079c2:	e043      	b.n	8007a4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079c4:	463b      	mov	r3, r7
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff3f 	bl	800784c <create_name>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d134      	bne.n	8007a42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff feaf 	bl	800773c <dir_find>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80079e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d127      	bne.n	8007a46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d122      	bne.n	8007a46 <follow_path+0xd2>
 8007a00:	2305      	movs	r3, #5
 8007a02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a04:	e01f      	b.n	8007a46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d11c      	bne.n	8007a4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	799b      	ldrb	r3, [r3, #6]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a1c:	2305      	movs	r3, #5
 8007a1e:	75fb      	strb	r3, [r7, #23]
 8007a20:	e014      	b.n	8007a4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	4413      	add	r3, r2
 8007a32:	4619      	mov	r1, r3
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff fe42 	bl	80076be <ld_clust>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a40:	e7c0      	b.n	80079c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007a42:	bf00      	nop
 8007a44:	e002      	b.n	8007a4c <follow_path+0xd8>
				break;
 8007a46:	bf00      	nop
 8007a48:	e000      	b.n	8007a4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a4a:	bf00      	nop
			}
		}
	}

	return res;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b087      	sub	sp, #28
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d031      	beq.n	8007ad0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e002      	b.n	8007a7a <get_ldnumber+0x24>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	3301      	adds	r3, #1
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d903      	bls.n	8007a8a <get_ldnumber+0x34>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b3a      	cmp	r3, #58	; 0x3a
 8007a88:	d1f4      	bne.n	8007a74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b3a      	cmp	r3, #58	; 0x3a
 8007a90:	d11c      	bne.n	8007acc <get_ldnumber+0x76>
			tp = *path;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	60fa      	str	r2, [r7, #12]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	3b30      	subs	r3, #48	; 0x30
 8007aa2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	d80e      	bhi.n	8007ac8 <get_ldnumber+0x72>
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d10a      	bne.n	8007ac8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d107      	bne.n	8007ac8 <get_ldnumber+0x72>
					vol = (int)i;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	e002      	b.n	8007ad2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007acc:	2300      	movs	r3, #0
 8007ace:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ad0:	693b      	ldr	r3, [r7, #16]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	70da      	strb	r2, [r3, #3]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff f8d8 	bl	8006cb0 <move_window>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <check_fs+0x2a>
 8007b06:	2304      	movs	r3, #4
 8007b08:	e038      	b.n	8007b7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3330      	adds	r3, #48	; 0x30
 8007b0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fe1c 	bl	8006750 <ld_word>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d001      	beq.n	8007b28 <check_fs+0x48>
 8007b24:	2303      	movs	r3, #3
 8007b26:	e029      	b.n	8007b7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b2e:	2be9      	cmp	r3, #233	; 0xe9
 8007b30:	d009      	beq.n	8007b46 <check_fs+0x66>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b38:	2beb      	cmp	r3, #235	; 0xeb
 8007b3a:	d11e      	bne.n	8007b7a <check_fs+0x9a>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b42:	2b90      	cmp	r3, #144	; 0x90
 8007b44:	d119      	bne.n	8007b7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3330      	adds	r3, #48	; 0x30
 8007b4a:	3336      	adds	r3, #54	; 0x36
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fe17 	bl	8006780 <ld_dword>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b58:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <check_fs+0xa4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d101      	bne.n	8007b62 <check_fs+0x82>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e00c      	b.n	8007b7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3330      	adds	r3, #48	; 0x30
 8007b66:	3352      	adds	r3, #82	; 0x52
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fe fe09 	bl	8006780 <ld_dword>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4a05      	ldr	r2, [pc, #20]	; (8007b88 <check_fs+0xa8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d101      	bne.n	8007b7a <check_fs+0x9a>
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007b7a:	2302      	movs	r3, #2
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	00544146 	.word	0x00544146
 8007b88:	33544146 	.word	0x33544146

08007b8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b096      	sub	sp, #88	; 0x58
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff ff58 	bl	8007a56 <get_ldnumber>
 8007ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da01      	bge.n	8007bb2 <find_volume+0x26>
 8007bae:	230b      	movs	r3, #11
 8007bb0:	e22d      	b.n	800800e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007bb2:	4aa1      	ldr	r2, [pc, #644]	; (8007e38 <find_volume+0x2ac>)
 8007bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <find_volume+0x3a>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	e223      	b.n	800800e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fd17 	bl	8006614 <disk_status>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007bec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10c      	bne.n	8007c12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <find_volume+0x82>
 8007bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	e1ff      	b.n	800800e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e1fd      	b.n	800800e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fd0f 	bl	8006648 <disk_initialize>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e1e6      	b.n	800800e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <find_volume+0xca>
 8007c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007c52:	230a      	movs	r3, #10
 8007c54:	e1db      	b.n	800800e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007c5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c5e:	f7ff ff3f 	bl	8007ae0 <check_fs>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d149      	bne.n	8007d04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c70:	2300      	movs	r3, #0
 8007c72:	643b      	str	r3, [r7, #64]	; 0x40
 8007c74:	e01e      	b.n	8007cb4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007c84:	4413      	add	r3, r2
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d006      	beq.n	8007ca0 <find_volume+0x114>
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	3308      	adds	r3, #8
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fd72 	bl	8006780 <ld_dword>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	e000      	b.n	8007ca2 <find_volume+0x116>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	3358      	adds	r3, #88	; 0x58
 8007ca8:	443b      	add	r3, r7
 8007caa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d9dd      	bls.n	8007c76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007cba:	2300      	movs	r3, #0
 8007cbc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <find_volume+0x13e>
 8007cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	3358      	adds	r3, #88	; 0x58
 8007cd0:	443b      	add	r3, r7
 8007cd2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007cd6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <find_volume+0x15e>
 8007cde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ce0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ce2:	f7ff fefd 	bl	8007ae0 <check_fs>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	e000      	b.n	8007cec <find_volume+0x160>
 8007cea:	2303      	movs	r3, #3
 8007cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d905      	bls.n	8007d04 <find_volume+0x178>
 8007cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d9e2      	bls.n	8007cca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d101      	bne.n	8007d10 <find_volume+0x184>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e17e      	b.n	800800e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d901      	bls.n	8007d1c <find_volume+0x190>
 8007d18:	230d      	movs	r3, #13
 8007d1a:	e178      	b.n	800800e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	3330      	adds	r3, #48	; 0x30
 8007d20:	330b      	adds	r3, #11
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fd14 	bl	8006750 <ld_word>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d2e:	d001      	beq.n	8007d34 <find_volume+0x1a8>
 8007d30:	230d      	movs	r3, #13
 8007d32:	e16c      	b.n	800800e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	3330      	adds	r3, #48	; 0x30
 8007d38:	3316      	adds	r3, #22
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fd08 	bl	8006750 <ld_word>
 8007d40:	4603      	mov	r3, r0
 8007d42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <find_volume+0x1cc>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	3330      	adds	r3, #48	; 0x30
 8007d4e:	3324      	adds	r3, #36	; 0x24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fd15 	bl	8006780 <ld_dword>
 8007d56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	789b      	ldrb	r3, [r3, #2]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d005      	beq.n	8007d7c <find_volume+0x1f0>
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	789b      	ldrb	r3, [r3, #2]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d001      	beq.n	8007d7c <find_volume+0x1f0>
 8007d78:	230d      	movs	r3, #13
 8007d7a:	e148      	b.n	800800e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	789b      	ldrb	r3, [r3, #2]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d84:	fb02 f303 	mul.w	r3, r2, r3
 8007d88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	895b      	ldrh	r3, [r3, #10]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d008      	beq.n	8007db0 <find_volume+0x224>
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	895b      	ldrh	r3, [r3, #10]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	895b      	ldrh	r3, [r3, #10]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <find_volume+0x228>
 8007db0:	230d      	movs	r3, #13
 8007db2:	e12c      	b.n	800800e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	3330      	adds	r3, #48	; 0x30
 8007db8:	3311      	adds	r3, #17
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fcc8 	bl	8006750 <ld_word>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	891b      	ldrh	r3, [r3, #8]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <find_volume+0x24e>
 8007dd6:	230d      	movs	r3, #13
 8007dd8:	e119      	b.n	800800e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	3330      	adds	r3, #48	; 0x30
 8007dde:	3313      	adds	r3, #19
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fcb5 	bl	8006750 <ld_word>
 8007de6:	4603      	mov	r3, r0
 8007de8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <find_volume+0x272>
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	3330      	adds	r3, #48	; 0x30
 8007df4:	3320      	adds	r3, #32
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fcc2 	bl	8006780 <ld_dword>
 8007dfc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	3330      	adds	r3, #48	; 0x30
 8007e02:	330e      	adds	r3, #14
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fca3 	bl	8006750 <ld_word>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <find_volume+0x28c>
 8007e14:	230d      	movs	r3, #13
 8007e16:	e0fa      	b.n	800800e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1c:	4413      	add	r3, r2
 8007e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e20:	8912      	ldrh	r2, [r2, #8]
 8007e22:	0912      	lsrs	r2, r2, #4
 8007e24:	b292      	uxth	r2, r2
 8007e26:	4413      	add	r3, r2
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d204      	bcs.n	8007e3c <find_volume+0x2b0>
 8007e32:	230d      	movs	r3, #13
 8007e34:	e0eb      	b.n	800800e <find_volume+0x482>
 8007e36:	bf00      	nop
 8007e38:	200009e8 	.word	0x200009e8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e44:	8952      	ldrh	r2, [r2, #10]
 8007e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <find_volume+0x2ca>
 8007e52:	230d      	movs	r3, #13
 8007e54:	e0db      	b.n	800800e <find_volume+0x482>
		fmt = FS_FAT32;
 8007e56:	2303      	movs	r3, #3
 8007e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d802      	bhi.n	8007e6c <find_volume+0x2e0>
 8007e66:	2302      	movs	r3, #2
 8007e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d802      	bhi.n	8007e7c <find_volume+0x2f0>
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	1c9a      	adds	r2, r3, #2
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e88:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007e8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8e:	441a      	add	r2, r3
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007e94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	441a      	add	r2, r3
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d11e      	bne.n	8007ee4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	3330      	adds	r3, #48	; 0x30
 8007eaa:	332a      	adds	r3, #42	; 0x2a
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fc4f 	bl	8006750 <ld_word>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <find_volume+0x330>
 8007eb8:	230d      	movs	r3, #13
 8007eba:	e0a8      	b.n	800800e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	891b      	ldrh	r3, [r3, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <find_volume+0x33c>
 8007ec4:	230d      	movs	r3, #13
 8007ec6:	e0a2      	b.n	800800e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	3330      	adds	r3, #48	; 0x30
 8007ecc:	332c      	adds	r3, #44	; 0x2c
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fc56 	bl	8006780 <ld_dword>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee2:	e01f      	b.n	8007f24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	891b      	ldrh	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <find_volume+0x364>
 8007eec:	230d      	movs	r3, #13
 8007eee:	e08e      	b.n	800800e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	6a1a      	ldr	r2, [r3, #32]
 8007ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef6:	441a      	add	r2, r3
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d103      	bne.n	8007f0c <find_volume+0x380>
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	e00a      	b.n	8007f22 <find_volume+0x396>
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	695a      	ldr	r2, [r3, #20]
 8007f10:	4613      	mov	r3, r2
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	4413      	add	r3, r2
 8007f16:	085a      	lsrs	r2, r3, #1
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	699a      	ldr	r2, [r3, #24]
 8007f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007f2e:	0a5b      	lsrs	r3, r3, #9
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d201      	bcs.n	8007f38 <find_volume+0x3ac>
 8007f34:	230d      	movs	r3, #13
 8007f36:	e06a      	b.n	800800e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3e:	611a      	str	r2, [r3, #16]
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	2280      	movs	r2, #128	; 0x80
 8007f4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007f4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d149      	bne.n	8007fea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	3330      	adds	r3, #48	; 0x30
 8007f5a:	3330      	adds	r3, #48	; 0x30
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe fbf7 	bl	8006750 <ld_word>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d140      	bne.n	8007fea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f70:	f7fe fe9e 	bl	8006cb0 <move_window>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d137      	bne.n	8007fea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	3330      	adds	r3, #48	; 0x30
 8007f84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe fbe1 	bl	8006750 <ld_word>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	461a      	mov	r2, r3
 8007f92:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d127      	bne.n	8007fea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	3330      	adds	r3, #48	; 0x30
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fbee 	bl	8006780 <ld_dword>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4a1c      	ldr	r2, [pc, #112]	; (8008018 <find_volume+0x48c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d11e      	bne.n	8007fea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	3330      	adds	r3, #48	; 0x30
 8007fb0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fbe3 	bl	8006780 <ld_dword>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	4a17      	ldr	r2, [pc, #92]	; (800801c <find_volume+0x490>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d113      	bne.n	8007fea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	3330      	adds	r3, #48	; 0x30
 8007fc6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fbd8 	bl	8006780 <ld_dword>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	3330      	adds	r3, #48	; 0x30
 8007fda:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fbce 	bl	8006780 <ld_dword>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007ff0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <find_volume+0x494>)
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <find_volume+0x494>)
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	4b08      	ldr	r3, [pc, #32]	; (8008020 <find_volume+0x494>)
 8008000:	881a      	ldrh	r2, [r3, #0]
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008006:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008008:	f7fe fdea 	bl	8006be0 <clear_lock>
#endif
	return FR_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3758      	adds	r7, #88	; 0x58
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	41615252 	.word	0x41615252
 800801c:	61417272 	.word	0x61417272
 8008020:	200009ec 	.word	0x200009ec

08008024 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800802e:	2309      	movs	r3, #9
 8008030:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01c      	beq.n	8008072 <validate+0x4e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d018      	beq.n	8008072 <validate+0x4e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d013      	beq.n	8008072 <validate+0x4e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	889a      	ldrh	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	429a      	cmp	r2, r3
 8008056:	d10c      	bne.n	8008072 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fad8 	bl	8006614 <disk_status>
 8008064:	4603      	mov	r3, r0
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <validate+0x4e>
			res = FR_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <validate+0x5a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	e000      	b.n	8008080 <validate+0x5c>
 800807e:	2300      	movs	r3, #0
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	6013      	str	r3, [r2, #0]
	return res;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80080a2:	f107 0310 	add.w	r3, r7, #16
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fcd5 	bl	8007a56 <get_ldnumber>
 80080ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	da01      	bge.n	80080b8 <f_mount+0x28>
 80080b4:	230b      	movs	r3, #11
 80080b6:	e02b      	b.n	8008110 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080b8:	4a17      	ldr	r2, [pc, #92]	; (8008118 <f_mount+0x88>)
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80080c8:	69b8      	ldr	r0, [r7, #24]
 80080ca:	f7fe fd89 	bl	8006be0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	490d      	ldr	r1, [pc, #52]	; (8008118 <f_mount+0x88>)
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <f_mount+0x66>
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d001      	beq.n	80080fa <f_mount+0x6a>
 80080f6:	2300      	movs	r3, #0
 80080f8:	e00a      	b.n	8008110 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80080fa:	f107 010c 	add.w	r1, r7, #12
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	2200      	movs	r2, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fd41 	bl	8007b8c <find_volume>
 800810a:	4603      	mov	r3, r0
 800810c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800810e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	200009e8 	.word	0x200009e8

0800811c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b098      	sub	sp, #96	; 0x60
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <f_open+0x18>
 8008130:	2309      	movs	r3, #9
 8008132:	e1ad      	b.n	8008490 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800813a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800813c:	79fa      	ldrb	r2, [r7, #7]
 800813e:	f107 0110 	add.w	r1, r7, #16
 8008142:	f107 0308 	add.w	r3, r7, #8
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fd20 	bl	8007b8c <find_volume>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 8191 	bne.w	800847e <f_open+0x362>
		dj.obj.fs = fs;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	f107 0314 	add.w	r3, r7, #20
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fc03 	bl	8007974 <follow_path>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11a      	bne.n	80081b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800817c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008180:	b25b      	sxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	da03      	bge.n	800818e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008186:	2306      	movs	r3, #6
 8008188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800818c:	e011      	b.n	80081b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	f107 0314 	add.w	r3, r7, #20
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fbd2 	bl	8006950 <chk_lock>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	f003 031c 	and.w	r3, r3, #28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d07f      	beq.n	80082bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80081bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d017      	beq.n	80081f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80081c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d10e      	bne.n	80081ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80081cc:	f7fe fc1c 	bl	8006a08 <enq_lock>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d006      	beq.n	80081e4 <f_open+0xc8>
 80081d6:	f107 0314 	add.w	r3, r7, #20
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff fb03 	bl	80077e6 <dir_register>
 80081e0:	4603      	mov	r3, r0
 80081e2:	e000      	b.n	80081e6 <f_open+0xca>
 80081e4:	2312      	movs	r3, #18
 80081e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	f043 0308 	orr.w	r3, r3, #8
 80081f0:	71fb      	strb	r3, [r7, #7]
 80081f2:	e010      	b.n	8008216 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80081f4:	7ebb      	ldrb	r3, [r7, #26]
 80081f6:	f003 0311 	and.w	r3, r3, #17
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <f_open+0xea>
					res = FR_DENIED;
 80081fe:	2307      	movs	r3, #7
 8008200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008204:	e007      	b.n	8008216 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <f_open+0xfa>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800821a:	2b00      	cmp	r3, #0
 800821c:	d168      	bne.n	80082f0 <f_open+0x1d4>
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b00      	cmp	r3, #0
 8008226:	d063      	beq.n	80082f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008228:	f7fe f992 	bl	8006550 <get_fattime>
 800822c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	330e      	adds	r3, #14
 8008232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fae1 	bl	80067fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	3316      	adds	r3, #22
 800823e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fadb 	bl	80067fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	330b      	adds	r3, #11
 800824a:	2220      	movs	r2, #32
 800824c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fa32 	bl	80076be <ld_clust>
 800825a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008260:	2200      	movs	r2, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fa4a 	bl	80076fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826a:	331c      	adds	r3, #28
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fac4 	bl	80067fc <st_dword>
					fs->wflag = 1;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2201      	movs	r2, #1
 8008278:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800827a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d037      	beq.n	80082f0 <f_open+0x1d4>
						dw = fs->winsect;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008286:	f107 0314 	add.w	r3, r7, #20
 800828a:	2200      	movs	r2, #0
 800828c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe ff5d 	bl	800714e <remove_chain>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800829a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d126      	bne.n	80082f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe fd02 	bl	8006cb0 <move_window>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082b6:	3a01      	subs	r2, #1
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	e019      	b.n	80082f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80082bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d115      	bne.n	80082f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80082c4:	7ebb      	ldrb	r3, [r7, #26]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80082ce:	2304      	movs	r3, #4
 80082d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082d4:	e00c      	b.n	80082f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <f_open+0x1d4>
 80082e0:	7ebb      	ldrb	r3, [r7, #26]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <f_open+0x1d4>
						res = FR_DENIED;
 80082ea:	2307      	movs	r3, #7
 80082ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80082f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d128      	bne.n	800834a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008308:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	f023 0301 	bic.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	bf14      	ite	ne
 8008322:	2301      	movne	r3, #1
 8008324:	2300      	moveq	r3, #0
 8008326:	b2db      	uxtb	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	f107 0314 	add.w	r3, r7, #20
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fb8b 	bl	8006a4c <inc_lock>
 8008336:	4602      	mov	r2, r0
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <f_open+0x22e>
 8008344:	2302      	movs	r3, #2
 8008346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800834a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800834e:	2b00      	cmp	r3, #0
 8008350:	f040 8095 	bne.w	800847e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff f9af 	bl	80076be <ld_clust>
 8008360:	4602      	mov	r2, r0
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	331c      	adds	r3, #28
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fa08 	bl	8006780 <ld_dword>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	88da      	ldrh	r2, [r3, #6]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	79fa      	ldrb	r2, [r7, #7]
 800838e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3330      	adds	r3, #48	; 0x30
 80083a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe fa72 	bl	8006896 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d060      	beq.n	800847e <f_open+0x362>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d05c      	beq.n	800847e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	895b      	ldrh	r3, [r3, #10]
 80083d0:	025b      	lsls	r3, r3, #9
 80083d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	657b      	str	r3, [r7, #84]	; 0x54
 80083e0:	e016      	b.n	8008410 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fd1d 	bl	8006e26 <get_fat>
 80083ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80083ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d802      	bhi.n	80083fa <f_open+0x2de>
 80083f4:	2302      	movs	r3, #2
 80083f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80083fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d102      	bne.n	8008408 <f_open+0x2ec>
 8008402:	2301      	movs	r3, #1
 8008404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800840a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	657b      	str	r3, [r7, #84]	; 0x54
 8008410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <f_open+0x304>
 8008418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800841a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800841c:	429a      	cmp	r2, r3
 800841e:	d8e0      	bhi.n	80083e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008424:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800842a:	2b00      	cmp	r3, #0
 800842c:	d127      	bne.n	800847e <f_open+0x362>
 800842e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008434:	2b00      	cmp	r3, #0
 8008436:	d022      	beq.n	800847e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe fcd3 	bl	8006de8 <clust2sect>
 8008442:	6478      	str	r0, [r7, #68]	; 0x44
 8008444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008446:	2b00      	cmp	r3, #0
 8008448:	d103      	bne.n	8008452 <f_open+0x336>
						res = FR_INT_ERR;
 800844a:	2302      	movs	r3, #2
 800844c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008450:	e015      	b.n	800847e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008454:	0a5a      	lsrs	r2, r3, #9
 8008456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008458:	441a      	add	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	7858      	ldrb	r0, [r3, #1]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a1a      	ldr	r2, [r3, #32]
 800846c:	2301      	movs	r3, #1
 800846e:	f7fe f911 	bl	8006694 <disk_read>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <f_open+0x362>
 8008478:	2301      	movs	r3, #1
 800847a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800847e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <f_open+0x370>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800848c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008490:	4618      	mov	r0, r3
 8008492:	3760      	adds	r7, #96	; 0x60
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08e      	sub	sp, #56	; 0x38
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f107 0214 	add.w	r2, r7, #20
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff fdb3 	bl	8008024 <validate>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d107      	bne.n	80084dc <f_read+0x44>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	7d5b      	ldrb	r3, [r3, #21]
 80084d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80084d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <f_read+0x4a>
 80084dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084e0:	e115      	b.n	800870e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	7d1b      	ldrb	r3, [r3, #20]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <f_read+0x5a>
 80084ee:	2307      	movs	r3, #7
 80084f0:	e10d      	b.n	800870e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	429a      	cmp	r2, r3
 8008504:	f240 80fe 	bls.w	8008704 <f_read+0x26c>
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800850c:	e0fa      	b.n	8008704 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 80c6 	bne.w	80086a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	0a5b      	lsrs	r3, r3, #9
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	8952      	ldrh	r2, [r2, #10]
 8008526:	3a01      	subs	r2, #1
 8008528:	4013      	ands	r3, r2
 800852a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d12f      	bne.n	8008592 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	633b      	str	r3, [r7, #48]	; 0x30
 8008540:	e013      	b.n	800856a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7fe fef9 	bl	8007348 <clmt_clust>
 8008556:	6338      	str	r0, [r7, #48]	; 0x30
 8008558:	e007      	b.n	800856a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	4619      	mov	r1, r3
 8008562:	4610      	mov	r0, r2
 8008564:	f7fe fc5f 	bl	8006e26 <get_fat>
 8008568:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	2b01      	cmp	r3, #1
 800856e:	d804      	bhi.n	800857a <f_read+0xe2>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2202      	movs	r2, #2
 8008574:	755a      	strb	r2, [r3, #21]
 8008576:	2302      	movs	r3, #2
 8008578:	e0c9      	b.n	800870e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d104      	bne.n	800858c <f_read+0xf4>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	755a      	strb	r2, [r3, #21]
 8008588:	2301      	movs	r3, #1
 800858a:	e0c0      	b.n	800870e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008590:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fc24 	bl	8006de8 <clust2sect>
 80085a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <f_read+0x11a>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2202      	movs	r2, #2
 80085ac:	755a      	strb	r2, [r3, #21]
 80085ae:	2302      	movs	r3, #2
 80085b0:	e0ad      	b.n	800870e <f_read+0x276>
			sect += csect;
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	4413      	add	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0a5b      	lsrs	r3, r3, #9
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d039      	beq.n	800863a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	4413      	add	r3, r2
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	8952      	ldrh	r2, [r2, #10]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d905      	bls.n	80085e0 <f_read+0x148>
					cc = fs->csize - csect;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	895b      	ldrh	r3, [r3, #10]
 80085d8:	461a      	mov	r2, r3
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	7858      	ldrb	r0, [r3, #1]
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ea:	f7fe f853 	bl	8006694 <disk_read>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <f_read+0x166>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	755a      	strb	r2, [r3, #21]
 80085fa:	2301      	movs	r3, #1
 80085fc:	e087      	b.n	800870e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	7d1b      	ldrb	r3, [r3, #20]
 8008602:	b25b      	sxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	da14      	bge.n	8008632 <f_read+0x19a>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1a      	ldr	r2, [r3, #32]
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008612:	429a      	cmp	r2, r3
 8008614:	d90d      	bls.n	8008632 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1a      	ldr	r2, [r3, #32]
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	025b      	lsls	r3, r3, #9
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	18d0      	adds	r0, r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3330      	adds	r3, #48	; 0x30
 8008628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800862c:	4619      	mov	r1, r3
 800862e:	f7fe f911 	bl	8006854 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	025b      	lsls	r3, r3, #9
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008638:	e050      	b.n	80086dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d02e      	beq.n	80086a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	7d1b      	ldrb	r3, [r3, #20]
 8008648:	b25b      	sxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	da18      	bge.n	8008680 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	7858      	ldrb	r0, [r3, #1]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1a      	ldr	r2, [r3, #32]
 800865c:	2301      	movs	r3, #1
 800865e:	f7fe f839 	bl	80066d4 <disk_write>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <f_read+0x1da>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	755a      	strb	r2, [r3, #21]
 800866e:	2301      	movs	r3, #1
 8008670:	e04d      	b.n	800870e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7d1b      	ldrb	r3, [r3, #20]
 8008676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	7858      	ldrb	r0, [r3, #1]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800868a:	2301      	movs	r3, #1
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	f7fe f801 	bl	8006694 <disk_read>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <f_read+0x20a>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	755a      	strb	r2, [r3, #21]
 800869e:	2301      	movs	r3, #1
 80086a0:	e035      	b.n	800870e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80086b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d901      	bls.n	80086c2 <f_read+0x22a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d0:	4413      	add	r3, r2
 80086d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d4:	4619      	mov	r1, r3
 80086d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d8:	f7fe f8bc 	bl	8006854 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	4413      	add	r3, r2
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	441a      	add	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	619a      	str	r2, [r3, #24]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	441a      	add	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f47f af01 	bne.w	800850e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3738      	adds	r7, #56	; 0x38
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b08c      	sub	sp, #48	; 0x30
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f107 0210 	add.w	r2, r7, #16
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fc74 	bl	8008024 <validate>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d107      	bne.n	800875a <f_write+0x44>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	7d5b      	ldrb	r3, [r3, #21]
 800874e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <f_write+0x4a>
 800875a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800875e:	e14b      	b.n	80089f8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	7d1b      	ldrb	r3, [r3, #20]
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <f_write+0x5a>
 800876c:	2307      	movs	r3, #7
 800876e:	e143      	b.n	80089f8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	441a      	add	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	429a      	cmp	r2, r3
 800877e:	f080 812d 	bcs.w	80089dc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	43db      	mvns	r3, r3
 8008788:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800878a:	e127      	b.n	80089dc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008794:	2b00      	cmp	r3, #0
 8008796:	f040 80e3 	bne.w	8008960 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	0a5b      	lsrs	r3, r3, #9
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	8952      	ldrh	r2, [r2, #10]
 80087a4:	3a01      	subs	r2, #1
 80087a6:	4013      	ands	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d143      	bne.n	8008838 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d11a      	bne.n	80087fa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe fd25 	bl	8007218 <create_chain>
 80087ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80087d0:	e013      	b.n	80087fa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	4619      	mov	r1, r3
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7fe fdb1 	bl	8007348 <clmt_clust>
 80087e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80087e8:	e007      	b.n	80087fa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f7fe fd10 	bl	8007218 <create_chain>
 80087f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80f2 	beq.w	80089e6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	2b01      	cmp	r3, #1
 8008806:	d104      	bne.n	8008812 <f_write+0xfc>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2202      	movs	r2, #2
 800880c:	755a      	strb	r2, [r3, #21]
 800880e:	2302      	movs	r3, #2
 8008810:	e0f2      	b.n	80089f8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d104      	bne.n	8008824 <f_write+0x10e>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	755a      	strb	r2, [r3, #21]
 8008820:	2301      	movs	r3, #1
 8008822:	e0e9      	b.n	80089f8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008828:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <f_write+0x122>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008836:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	7d1b      	ldrb	r3, [r3, #20]
 800883c:	b25b      	sxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	da18      	bge.n	8008874 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	7858      	ldrb	r0, [r3, #1]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1a      	ldr	r2, [r3, #32]
 8008850:	2301      	movs	r3, #1
 8008852:	f7fd ff3f 	bl	80066d4 <disk_write>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <f_write+0x150>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	755a      	strb	r2, [r3, #21]
 8008862:	2301      	movs	r3, #1
 8008864:	e0c8      	b.n	80089f8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7d1b      	ldrb	r3, [r3, #20]
 800886a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886e:	b2da      	uxtb	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f7fe fab3 	bl	8006de8 <clust2sect>
 8008882:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <f_write+0x17e>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2202      	movs	r2, #2
 800888e:	755a      	strb	r2, [r3, #21]
 8008890:	2302      	movs	r3, #2
 8008892:	e0b1      	b.n	80089f8 <f_write+0x2e2>
			sect += csect;
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	4413      	add	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	0a5b      	lsrs	r3, r3, #9
 80088a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d03c      	beq.n	8008922 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	4413      	add	r3, r2
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	8952      	ldrh	r2, [r2, #10]
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d905      	bls.n	80088c2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	895b      	ldrh	r3, [r3, #10]
 80088ba:	461a      	mov	r2, r3
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	7858      	ldrb	r0, [r3, #1]
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	69f9      	ldr	r1, [r7, #28]
 80088cc:	f7fd ff02 	bl	80066d4 <disk_write>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <f_write+0x1ca>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	755a      	strb	r2, [r3, #21]
 80088dc:	2301      	movs	r3, #1
 80088de:	e08b      	b.n	80089f8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a1a      	ldr	r2, [r3, #32]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d915      	bls.n	800891a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a1a      	ldr	r2, [r3, #32]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	025b      	lsls	r3, r3, #9
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008906:	4619      	mov	r1, r3
 8008908:	f7fd ffa4 	bl	8006854 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	7d1b      	ldrb	r3, [r3, #20]
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	b2da      	uxtb	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	025b      	lsls	r3, r3, #9
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008920:	e03f      	b.n	80089a2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	429a      	cmp	r2, r3
 800892a:	d016      	beq.n	800895a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008934:	429a      	cmp	r2, r3
 8008936:	d210      	bcs.n	800895a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	7858      	ldrb	r0, [r3, #1]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008942:	2301      	movs	r3, #1
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	f7fd fea5 	bl	8006694 <disk_read>
 800894a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	755a      	strb	r2, [r3, #21]
 8008956:	2301      	movs	r3, #1
 8008958:	e04e      	b.n	80089f8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008968:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800896e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	429a      	cmp	r2, r3
 8008974:	d901      	bls.n	800897a <f_write+0x264>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008988:	4413      	add	r3, r2
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	69f9      	ldr	r1, [r7, #28]
 800898e:	4618      	mov	r0, r3
 8008990:	f7fd ff60 	bl	8006854 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800899c:	b2da      	uxtb	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	4413      	add	r3, r2
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	441a      	add	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	619a      	str	r2, [r3, #24]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	429a      	cmp	r2, r3
 80089c0:	bf38      	it	cc
 80089c2:	461a      	movcc	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	60da      	str	r2, [r3, #12]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	441a      	add	r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f47f aed4 	bne.w	800878c <f_write+0x76>
 80089e4:	e000      	b.n	80089e8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	7d1b      	ldrb	r3, [r3, #20]
 80089ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3730      	adds	r7, #48	; 0x30
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f107 0208 	add.w	r2, r7, #8
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff fb07 	bl	8008024 <validate>
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d168      	bne.n	8008af2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7d1b      	ldrb	r3, [r3, #20]
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d062      	beq.n	8008af2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7d1b      	ldrb	r3, [r3, #20]
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da15      	bge.n	8008a62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	7858      	ldrb	r0, [r3, #1]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	2301      	movs	r3, #1
 8008a46:	f7fd fe45 	bl	80066d4 <disk_write>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <f_sync+0x54>
 8008a50:	2301      	movs	r3, #1
 8008a52:	e04f      	b.n	8008af4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7d1b      	ldrb	r3, [r3, #20]
 8008a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a62:	f7fd fd75 	bl	8006550 <get_fattime>
 8008a66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f7fe f91d 	bl	8006cb0 <move_window>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d138      	bne.n	8008af2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	330b      	adds	r3, #11
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	330b      	adds	r3, #11
 8008a90:	f042 0220 	orr.w	r2, r2, #32
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	f7fe fe2a 	bl	80076fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f103 021c 	add.w	r2, r3, #28
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fd fea1 	bl	80067fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3316      	adds	r3, #22
 8008abe:	6939      	ldr	r1, [r7, #16]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fe9b 	bl	80067fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3312      	adds	r3, #18
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fd fe7a 	bl	80067c6 <st_word>
					fs->wflag = 1;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f916 	bl	8006d0c <sync_fs>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7d1b      	ldrb	r3, [r3, #20]
 8008ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ff7b 	bl	8008a00 <f_sync>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d118      	bne.n	8008b46 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f107 0208 	add.w	r2, r7, #8
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fa81 	bl	8008024 <validate>
 8008b22:	4603      	mov	r3, r0
 8008b24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10c      	bne.n	8008b46 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe f819 	bl	8006b68 <dec_lock>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b092      	sub	sp, #72	; 0x48
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008b5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008b60:	f107 030c 	add.w	r3, r7, #12
 8008b64:	2200      	movs	r2, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff f810 	bl	8007b8c <find_volume>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008b72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f040 8099 	bne.w	8008cae <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	3b02      	subs	r3, #2
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d804      	bhi.n	8008b9a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e089      	b.n	8008cae <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d128      	bne.n	8008bf8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008bae:	f107 0314 	add.w	r3, r7, #20
 8008bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe f936 	bl	8006e26 <get_fat>
 8008bba:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d103      	bne.n	8008bcc <f_getfree+0x7c>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008bca:	e063      	b.n	8008c94 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d103      	bne.n	8008bda <f_getfree+0x8a>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008bd8:	e05c      	b.n	8008c94 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <f_getfree+0x96>
 8008be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be2:	3301      	adds	r3, #1
 8008be4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	3301      	adds	r3, #1
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d3db      	bcc.n	8008bae <f_getfree+0x5e>
 8008bf6:	e04d      	b.n	8008c94 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	2300      	movs	r3, #0
 8008c0a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d113      	bne.n	8008c3a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	63ba      	str	r2, [r7, #56]	; 0x38
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f7fe f848 	bl	8006cb0 <move_window>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008c26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d131      	bne.n	8008c92 <f_getfree+0x142>
							p = fs->win;
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	3330      	adds	r3, #48	; 0x30
 8008c32:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d10f      	bne.n	8008c62 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c44:	f7fd fd84 	bl	8006750 <ld_word>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <f_getfree+0x104>
 8008c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c50:	3301      	adds	r3, #1
 8008c52:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	3302      	adds	r3, #2
 8008c58:	633b      	str	r3, [r7, #48]	; 0x30
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	3b02      	subs	r3, #2
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c60:	e010      	b.n	8008c84 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c64:	f7fd fd8c 	bl	8006780 <ld_dword>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <f_getfree+0x128>
 8008c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c74:	3301      	adds	r3, #1
 8008c76:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	3b04      	subs	r3, #4
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	3b01      	subs	r3, #1
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1bd      	bne.n	8008c0c <f_getfree+0xbc>
 8008c90:	e000      	b.n	8008c94 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008c92:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c98:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c9e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	791a      	ldrb	r2, [r3, #4]
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	f042 0201 	orr.w	r2, r2, #1
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008cae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3748      	adds	r7, #72	; 0x48
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008cce:	e01b      	b.n	8008d08 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	f107 0114 	add.w	r1, r7, #20
 8008cd8:	2201      	movs	r2, #1
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fbdc 	bl	8008498 <f_read>
		if (rc != 1) break;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d116      	bne.n	8008d14 <f_gets+0x5a>
		c = s[0];
 8008ce6:	7d3b      	ldrb	r3, [r7, #20]
 8008ce8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b0d      	cmp	r3, #13
 8008cee:	d100      	bne.n	8008cf2 <f_gets+0x38>
 8008cf0:	e00a      	b.n	8008d08 <f_gets+0x4e>
		*p++ = c;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	61ba      	str	r2, [r7, #24]
 8008cf8:	7dfa      	ldrb	r2, [r7, #23]
 8008cfa:	701a      	strb	r2, [r3, #0]
		n++;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	2b0a      	cmp	r3, #10
 8008d06:	d007      	beq.n	8008d18 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	dbde      	blt.n	8008cd0 <f_gets+0x16>
 8008d12:	e002      	b.n	8008d1a <f_gets+0x60>
		if (rc != 1) break;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008d18:	bf00      	nop
	}
	*p = 0;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <f_gets+0x70>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	e000      	b.n	8008d2c <f_gets+0x72>
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3720      	adds	r7, #32
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	2b0a      	cmp	r3, #10
 8008d44:	d103      	bne.n	8008d4e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008d46:	210d      	movs	r1, #13
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff fff3 	bl	8008d34 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	db25      	blt.n	8008da6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	60fa      	str	r2, [r7, #12]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b3c      	cmp	r3, #60	; 0x3c
 8008d6c:	dd12      	ble.n	8008d94 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f103 010c 	add.w	r1, r3, #12
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	f7ff fcca 	bl	8008716 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d101      	bne.n	8008d8e <putc_bfd+0x5a>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e001      	b.n	8008d92 <putc_bfd+0x5e>
 8008d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d92:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	e000      	b.n	8008da8 <putc_bfd+0x74>
	if (i < 0) return;
 8008da6:	bf00      	nop
}
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	db16      	blt.n	8008dec <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f103 010c 	add.w	r1, r3, #12
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	f107 030c 	add.w	r3, r7, #12
 8008dd2:	f7ff fca0 	bl	8008716 <f_write>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d102      	bne.n	8008dec <putc_flush+0x3e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	e001      	b.n	8008df0 <putc_flush+0x42>
	return EOF;
 8008dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	609a      	str	r2, [r3, #8]
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b096      	sub	sp, #88	; 0x58
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008e2c:	f107 030c 	add.w	r3, r7, #12
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff ffe0 	bl	8008df8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008e38:	e009      	b.n	8008e4e <f_puts+0x2c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	f107 030c 	add.w	r3, r7, #12
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ff73 	bl	8008d34 <putc_bfd>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f1      	bne.n	8008e3a <f_puts+0x18>
	return putc_flush(&pb);
 8008e56:	f107 030c 	add.w	r3, r7, #12
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff ffa7 	bl	8008dae <putc_flush>
 8008e60:	4603      	mov	r3, r0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3758      	adds	r7, #88	; 0x58
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	4613      	mov	r3, r2
 8008e78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e82:	4b1f      	ldr	r3, [pc, #124]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008e84:	7a5b      	ldrb	r3, [r3, #9]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d131      	bne.n	8008ef0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e8c:	4b1c      	ldr	r3, [pc, #112]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008e8e:	7a5b      	ldrb	r3, [r3, #9]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008e96:	2100      	movs	r1, #0
 8008e98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e9a:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008e9c:	7a5b      	ldrb	r3, [r3, #9]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	4a17      	ldr	r2, [pc, #92]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008eaa:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008eac:	7a5b      	ldrb	r3, [r3, #9]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4b13      	ldr	r3, [pc, #76]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	79fa      	ldrb	r2, [r7, #7]
 8008eb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008ebc:	7a5b      	ldrb	r3, [r3, #9]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	b2d1      	uxtb	r1, r2
 8008ec4:	4a0e      	ldr	r2, [pc, #56]	; (8008f00 <FATFS_LinkDriverEx+0x94>)
 8008ec6:	7251      	strb	r1, [r2, #9]
 8008ec8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008eca:	7dbb      	ldrb	r3, [r7, #22]
 8008ecc:	3330      	adds	r3, #48	; 0x30
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	223a      	movs	r2, #58	; 0x3a
 8008eda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	3302      	adds	r3, #2
 8008ee0:	222f      	movs	r2, #47	; 0x2f
 8008ee2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	3303      	adds	r3, #3
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20000a10 	.word	0x20000a10

08008f04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f0e:	2200      	movs	r2, #0
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ffaa 	bl	8008e6c <FATFS_LinkDriverEx>
 8008f18:	4603      	mov	r3, r0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <__errno>:
 8008f24:	4b01      	ldr	r3, [pc, #4]	; (8008f2c <__errno+0x8>)
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000024 	.word	0x20000024

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	; (8008f68 <__libc_init_array+0x38>)
 8008f34:	4c0d      	ldr	r4, [pc, #52]	; (8008f6c <__libc_init_array+0x3c>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	; (8008f70 <__libc_init_array+0x40>)
 8008f42:	4c0c      	ldr	r4, [pc, #48]	; (8008f74 <__libc_init_array+0x44>)
 8008f44:	f002 ff18 	bl	800bd78 <_init>
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	4798      	blx	r3
 8008f5a:	3601      	adds	r6, #1
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	4798      	blx	r3
 8008f64:	3601      	adds	r6, #1
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	0800c3cc 	.word	0x0800c3cc
 8008f6c:	0800c3cc 	.word	0x0800c3cc
 8008f70:	0800c3cc 	.word	0x0800c3cc
 8008f74:	0800c3d0 	.word	0x0800c3d0

08008f78 <memset>:
 8008f78:	4402      	add	r2, r0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d100      	bne.n	8008f82 <memset+0xa>
 8008f80:	4770      	bx	lr
 8008f82:	f803 1b01 	strb.w	r1, [r3], #1
 8008f86:	e7f9      	b.n	8008f7c <memset+0x4>

08008f88 <__cvt>:
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	ec55 4b10 	vmov	r4, r5, d0
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	460e      	mov	r6, r1
 8008f94:	4619      	mov	r1, r3
 8008f96:	462b      	mov	r3, r5
 8008f98:	bfbb      	ittet	lt
 8008f9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f9e:	461d      	movlt	r5, r3
 8008fa0:	2300      	movge	r3, #0
 8008fa2:	232d      	movlt	r3, #45	; 0x2d
 8008fa4:	700b      	strb	r3, [r1, #0]
 8008fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fac:	4691      	mov	r9, r2
 8008fae:	f023 0820 	bic.w	r8, r3, #32
 8008fb2:	bfbc      	itt	lt
 8008fb4:	4622      	movlt	r2, r4
 8008fb6:	4614      	movlt	r4, r2
 8008fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fbc:	d005      	beq.n	8008fca <__cvt+0x42>
 8008fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fc2:	d100      	bne.n	8008fc6 <__cvt+0x3e>
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	e000      	b.n	8008fcc <__cvt+0x44>
 8008fca:	2103      	movs	r1, #3
 8008fcc:	ab03      	add	r3, sp, #12
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	ab02      	add	r3, sp, #8
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	ec45 4b10 	vmov	d0, r4, r5
 8008fd8:	4653      	mov	r3, sl
 8008fda:	4632      	mov	r2, r6
 8008fdc:	f000 fd00 	bl	80099e0 <_dtoa_r>
 8008fe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	d102      	bne.n	8008fee <__cvt+0x66>
 8008fe8:	f019 0f01 	tst.w	r9, #1
 8008fec:	d022      	beq.n	8009034 <__cvt+0xac>
 8008fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ff2:	eb07 0906 	add.w	r9, r7, r6
 8008ff6:	d110      	bne.n	800901a <__cvt+0x92>
 8008ff8:	783b      	ldrb	r3, [r7, #0]
 8008ffa:	2b30      	cmp	r3, #48	; 0x30
 8008ffc:	d10a      	bne.n	8009014 <__cvt+0x8c>
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 800900a:	b918      	cbnz	r0, 8009014 <__cvt+0x8c>
 800900c:	f1c6 0601 	rsb	r6, r6, #1
 8009010:	f8ca 6000 	str.w	r6, [sl]
 8009014:	f8da 3000 	ldr.w	r3, [sl]
 8009018:	4499      	add	r9, r3
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd71 	bl	8000b08 <__aeabi_dcmpeq>
 8009026:	b108      	cbz	r0, 800902c <__cvt+0xa4>
 8009028:	f8cd 900c 	str.w	r9, [sp, #12]
 800902c:	2230      	movs	r2, #48	; 0x30
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	454b      	cmp	r3, r9
 8009032:	d307      	bcc.n	8009044 <__cvt+0xbc>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009038:	1bdb      	subs	r3, r3, r7
 800903a:	4638      	mov	r0, r7
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	b004      	add	sp, #16
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	1c59      	adds	r1, r3, #1
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e7f0      	b.n	800902e <__cvt+0xa6>

0800904c <__exponent>:
 800904c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800904e:	4603      	mov	r3, r0
 8009050:	2900      	cmp	r1, #0
 8009052:	bfb8      	it	lt
 8009054:	4249      	neglt	r1, r1
 8009056:	f803 2b02 	strb.w	r2, [r3], #2
 800905a:	bfb4      	ite	lt
 800905c:	222d      	movlt	r2, #45	; 0x2d
 800905e:	222b      	movge	r2, #43	; 0x2b
 8009060:	2909      	cmp	r1, #9
 8009062:	7042      	strb	r2, [r0, #1]
 8009064:	dd2a      	ble.n	80090bc <__exponent+0x70>
 8009066:	f10d 0407 	add.w	r4, sp, #7
 800906a:	46a4      	mov	ip, r4
 800906c:	270a      	movs	r7, #10
 800906e:	46a6      	mov	lr, r4
 8009070:	460a      	mov	r2, r1
 8009072:	fb91 f6f7 	sdiv	r6, r1, r7
 8009076:	fb07 1516 	mls	r5, r7, r6, r1
 800907a:	3530      	adds	r5, #48	; 0x30
 800907c:	2a63      	cmp	r2, #99	; 0x63
 800907e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009082:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009086:	4631      	mov	r1, r6
 8009088:	dcf1      	bgt.n	800906e <__exponent+0x22>
 800908a:	3130      	adds	r1, #48	; 0x30
 800908c:	f1ae 0502 	sub.w	r5, lr, #2
 8009090:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009094:	1c44      	adds	r4, r0, #1
 8009096:	4629      	mov	r1, r5
 8009098:	4561      	cmp	r1, ip
 800909a:	d30a      	bcc.n	80090b2 <__exponent+0x66>
 800909c:	f10d 0209 	add.w	r2, sp, #9
 80090a0:	eba2 020e 	sub.w	r2, r2, lr
 80090a4:	4565      	cmp	r5, ip
 80090a6:	bf88      	it	hi
 80090a8:	2200      	movhi	r2, #0
 80090aa:	4413      	add	r3, r2
 80090ac:	1a18      	subs	r0, r3, r0
 80090ae:	b003      	add	sp, #12
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090ba:	e7ed      	b.n	8009098 <__exponent+0x4c>
 80090bc:	2330      	movs	r3, #48	; 0x30
 80090be:	3130      	adds	r1, #48	; 0x30
 80090c0:	7083      	strb	r3, [r0, #2]
 80090c2:	70c1      	strb	r1, [r0, #3]
 80090c4:	1d03      	adds	r3, r0, #4
 80090c6:	e7f1      	b.n	80090ac <__exponent+0x60>

080090c8 <_printf_float>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	ed2d 8b02 	vpush	{d8}
 80090d0:	b08d      	sub	sp, #52	; 0x34
 80090d2:	460c      	mov	r4, r1
 80090d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090d8:	4616      	mov	r6, r2
 80090da:	461f      	mov	r7, r3
 80090dc:	4605      	mov	r5, r0
 80090de:	f001 fa6d 	bl	800a5bc <_localeconv_r>
 80090e2:	f8d0 a000 	ldr.w	sl, [r0]
 80090e6:	4650      	mov	r0, sl
 80090e8:	f7f7 f892 	bl	8000210 <strlen>
 80090ec:	2300      	movs	r3, #0
 80090ee:	930a      	str	r3, [sp, #40]	; 0x28
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	f8d8 3000 	ldr.w	r3, [r8]
 80090f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	f103 0208 	add.w	r2, r3, #8
 8009106:	f8c8 2000 	str.w	r2, [r8]
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009112:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800911a:	9307      	str	r3, [sp, #28]
 800911c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009120:	ee08 0a10 	vmov	s16, r0
 8009124:	4b9f      	ldr	r3, [pc, #636]	; (80093a4 <_printf_float+0x2dc>)
 8009126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800912a:	f04f 32ff 	mov.w	r2, #4294967295
 800912e:	f7f7 fd1d 	bl	8000b6c <__aeabi_dcmpun>
 8009132:	bb88      	cbnz	r0, 8009198 <_printf_float+0xd0>
 8009134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009138:	4b9a      	ldr	r3, [pc, #616]	; (80093a4 <_printf_float+0x2dc>)
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	f7f7 fcf7 	bl	8000b30 <__aeabi_dcmple>
 8009142:	bb48      	cbnz	r0, 8009198 <_printf_float+0xd0>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	f7f7 fce6 	bl	8000b1c <__aeabi_dcmplt>
 8009150:	b110      	cbz	r0, 8009158 <_printf_float+0x90>
 8009152:	232d      	movs	r3, #45	; 0x2d
 8009154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009158:	4b93      	ldr	r3, [pc, #588]	; (80093a8 <_printf_float+0x2e0>)
 800915a:	4894      	ldr	r0, [pc, #592]	; (80093ac <_printf_float+0x2e4>)
 800915c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009160:	bf94      	ite	ls
 8009162:	4698      	movls	r8, r3
 8009164:	4680      	movhi	r8, r0
 8009166:	2303      	movs	r3, #3
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	9b05      	ldr	r3, [sp, #20]
 800916c:	f023 0204 	bic.w	r2, r3, #4
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	f04f 0900 	mov.w	r9, #0
 8009176:	9700      	str	r7, [sp, #0]
 8009178:	4633      	mov	r3, r6
 800917a:	aa0b      	add	r2, sp, #44	; 0x2c
 800917c:	4621      	mov	r1, r4
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f9d8 	bl	8009534 <_printf_common>
 8009184:	3001      	adds	r0, #1
 8009186:	f040 8090 	bne.w	80092aa <_printf_float+0x1e2>
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	b00d      	add	sp, #52	; 0x34
 8009190:	ecbd 8b02 	vpop	{d8}
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 fce4 	bl	8000b6c <__aeabi_dcmpun>
 80091a4:	b140      	cbz	r0, 80091b8 <_printf_float+0xf0>
 80091a6:	464b      	mov	r3, r9
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbc      	itt	lt
 80091ac:	232d      	movlt	r3, #45	; 0x2d
 80091ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091b2:	487f      	ldr	r0, [pc, #508]	; (80093b0 <_printf_float+0x2e8>)
 80091b4:	4b7f      	ldr	r3, [pc, #508]	; (80093b4 <_printf_float+0x2ec>)
 80091b6:	e7d1      	b.n	800915c <_printf_float+0x94>
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091be:	9206      	str	r2, [sp, #24]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	d13f      	bne.n	8009244 <_printf_float+0x17c>
 80091c4:	2306      	movs	r3, #6
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	9b05      	ldr	r3, [sp, #20]
 80091ca:	6861      	ldr	r1, [r4, #4]
 80091cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091d0:	2300      	movs	r3, #0
 80091d2:	9303      	str	r3, [sp, #12]
 80091d4:	ab0a      	add	r3, sp, #40	; 0x28
 80091d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091da:	ab09      	add	r3, sp, #36	; 0x24
 80091dc:	ec49 8b10 	vmov	d0, r8, r9
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	6022      	str	r2, [r4, #0]
 80091e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091e8:	4628      	mov	r0, r5
 80091ea:	f7ff fecd 	bl	8008f88 <__cvt>
 80091ee:	9b06      	ldr	r3, [sp, #24]
 80091f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091f2:	2b47      	cmp	r3, #71	; 0x47
 80091f4:	4680      	mov	r8, r0
 80091f6:	d108      	bne.n	800920a <_printf_float+0x142>
 80091f8:	1cc8      	adds	r0, r1, #3
 80091fa:	db02      	blt.n	8009202 <_printf_float+0x13a>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	4299      	cmp	r1, r3
 8009200:	dd41      	ble.n	8009286 <_printf_float+0x1be>
 8009202:	f1ab 0b02 	sub.w	fp, fp, #2
 8009206:	fa5f fb8b 	uxtb.w	fp, fp
 800920a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800920e:	d820      	bhi.n	8009252 <_printf_float+0x18a>
 8009210:	3901      	subs	r1, #1
 8009212:	465a      	mov	r2, fp
 8009214:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009218:	9109      	str	r1, [sp, #36]	; 0x24
 800921a:	f7ff ff17 	bl	800904c <__exponent>
 800921e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009220:	1813      	adds	r3, r2, r0
 8009222:	2a01      	cmp	r2, #1
 8009224:	4681      	mov	r9, r0
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	dc02      	bgt.n	8009230 <_printf_float+0x168>
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	07d2      	lsls	r2, r2, #31
 800922e:	d501      	bpl.n	8009234 <_printf_float+0x16c>
 8009230:	3301      	adds	r3, #1
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009238:	2b00      	cmp	r3, #0
 800923a:	d09c      	beq.n	8009176 <_printf_float+0xae>
 800923c:	232d      	movs	r3, #45	; 0x2d
 800923e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009242:	e798      	b.n	8009176 <_printf_float+0xae>
 8009244:	9a06      	ldr	r2, [sp, #24]
 8009246:	2a47      	cmp	r2, #71	; 0x47
 8009248:	d1be      	bne.n	80091c8 <_printf_float+0x100>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1bc      	bne.n	80091c8 <_printf_float+0x100>
 800924e:	2301      	movs	r3, #1
 8009250:	e7b9      	b.n	80091c6 <_printf_float+0xfe>
 8009252:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009256:	d118      	bne.n	800928a <_printf_float+0x1c2>
 8009258:	2900      	cmp	r1, #0
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	dd0b      	ble.n	8009276 <_printf_float+0x1ae>
 800925e:	6121      	str	r1, [r4, #16]
 8009260:	b913      	cbnz	r3, 8009268 <_printf_float+0x1a0>
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	07d0      	lsls	r0, r2, #31
 8009266:	d502      	bpl.n	800926e <_printf_float+0x1a6>
 8009268:	3301      	adds	r3, #1
 800926a:	440b      	add	r3, r1
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009270:	f04f 0900 	mov.w	r9, #0
 8009274:	e7de      	b.n	8009234 <_printf_float+0x16c>
 8009276:	b913      	cbnz	r3, 800927e <_printf_float+0x1b6>
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	07d2      	lsls	r2, r2, #31
 800927c:	d501      	bpl.n	8009282 <_printf_float+0x1ba>
 800927e:	3302      	adds	r3, #2
 8009280:	e7f4      	b.n	800926c <_printf_float+0x1a4>
 8009282:	2301      	movs	r3, #1
 8009284:	e7f2      	b.n	800926c <_printf_float+0x1a4>
 8009286:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800928a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928c:	4299      	cmp	r1, r3
 800928e:	db05      	blt.n	800929c <_printf_float+0x1d4>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	6121      	str	r1, [r4, #16]
 8009294:	07d8      	lsls	r0, r3, #31
 8009296:	d5ea      	bpl.n	800926e <_printf_float+0x1a6>
 8009298:	1c4b      	adds	r3, r1, #1
 800929a:	e7e7      	b.n	800926c <_printf_float+0x1a4>
 800929c:	2900      	cmp	r1, #0
 800929e:	bfd4      	ite	le
 80092a0:	f1c1 0202 	rsble	r2, r1, #2
 80092a4:	2201      	movgt	r2, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	e7e0      	b.n	800926c <_printf_float+0x1a4>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	055a      	lsls	r2, r3, #21
 80092ae:	d407      	bmi.n	80092c0 <_printf_float+0x1f8>
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	4642      	mov	r2, r8
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	d12c      	bne.n	8009318 <_printf_float+0x250>
 80092be:	e764      	b.n	800918a <_printf_float+0xc2>
 80092c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092c4:	f240 80e0 	bls.w	8009488 <_printf_float+0x3c0>
 80092c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	f7f7 fc1a 	bl	8000b08 <__aeabi_dcmpeq>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d034      	beq.n	8009342 <_printf_float+0x27a>
 80092d8:	4a37      	ldr	r2, [pc, #220]	; (80093b8 <_printf_float+0x2f0>)
 80092da:	2301      	movs	r3, #1
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af51 	beq.w	800918a <_printf_float+0xc2>
 80092e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ec:	429a      	cmp	r2, r3
 80092ee:	db02      	blt.n	80092f6 <_printf_float+0x22e>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	07d8      	lsls	r0, r3, #31
 80092f4:	d510      	bpl.n	8009318 <_printf_float+0x250>
 80092f6:	ee18 3a10 	vmov	r3, s16
 80092fa:	4652      	mov	r2, sl
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af41 	beq.w	800918a <_printf_float+0xc2>
 8009308:	f04f 0800 	mov.w	r8, #0
 800930c:	f104 091a 	add.w	r9, r4, #26
 8009310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009312:	3b01      	subs	r3, #1
 8009314:	4543      	cmp	r3, r8
 8009316:	dc09      	bgt.n	800932c <_printf_float+0x264>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	079b      	lsls	r3, r3, #30
 800931c:	f100 8105 	bmi.w	800952a <_printf_float+0x462>
 8009320:	68e0      	ldr	r0, [r4, #12]
 8009322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009324:	4298      	cmp	r0, r3
 8009326:	bfb8      	it	lt
 8009328:	4618      	movlt	r0, r3
 800932a:	e730      	b.n	800918e <_printf_float+0xc6>
 800932c:	2301      	movs	r3, #1
 800932e:	464a      	mov	r2, r9
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af27 	beq.w	800918a <_printf_float+0xc2>
 800933c:	f108 0801 	add.w	r8, r8, #1
 8009340:	e7e6      	b.n	8009310 <_printf_float+0x248>
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	dc39      	bgt.n	80093bc <_printf_float+0x2f4>
 8009348:	4a1b      	ldr	r2, [pc, #108]	; (80093b8 <_printf_float+0x2f0>)
 800934a:	2301      	movs	r3, #1
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af19 	beq.w	800918a <_printf_float+0xc2>
 8009358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800935c:	4313      	orrs	r3, r2
 800935e:	d102      	bne.n	8009366 <_printf_float+0x29e>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	d5d8      	bpl.n	8009318 <_printf_float+0x250>
 8009366:	ee18 3a10 	vmov	r3, s16
 800936a:	4652      	mov	r2, sl
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af09 	beq.w	800918a <_printf_float+0xc2>
 8009378:	f04f 0900 	mov.w	r9, #0
 800937c:	f104 0a1a 	add.w	sl, r4, #26
 8009380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009382:	425b      	negs	r3, r3
 8009384:	454b      	cmp	r3, r9
 8009386:	dc01      	bgt.n	800938c <_printf_float+0x2c4>
 8009388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938a:	e792      	b.n	80092b2 <_printf_float+0x1ea>
 800938c:	2301      	movs	r3, #1
 800938e:	4652      	mov	r2, sl
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f aef7 	beq.w	800918a <_printf_float+0xc2>
 800939c:	f109 0901 	add.w	r9, r9, #1
 80093a0:	e7ee      	b.n	8009380 <_printf_float+0x2b8>
 80093a2:	bf00      	nop
 80093a4:	7fefffff 	.word	0x7fefffff
 80093a8:	0800bff0 	.word	0x0800bff0
 80093ac:	0800bff4 	.word	0x0800bff4
 80093b0:	0800bffc 	.word	0x0800bffc
 80093b4:	0800bff8 	.word	0x0800bff8
 80093b8:	0800c000 	.word	0x0800c000
 80093bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093c0:	429a      	cmp	r2, r3
 80093c2:	bfa8      	it	ge
 80093c4:	461a      	movge	r2, r3
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	4691      	mov	r9, r2
 80093ca:	dc37      	bgt.n	800943c <_printf_float+0x374>
 80093cc:	f04f 0b00 	mov.w	fp, #0
 80093d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093d4:	f104 021a 	add.w	r2, r4, #26
 80093d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	eba3 0309 	sub.w	r3, r3, r9
 80093e0:	455b      	cmp	r3, fp
 80093e2:	dc33      	bgt.n	800944c <_printf_float+0x384>
 80093e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e8:	429a      	cmp	r2, r3
 80093ea:	db3b      	blt.n	8009464 <_printf_float+0x39c>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d438      	bmi.n	8009464 <_printf_float+0x39c>
 80093f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f4:	9a05      	ldr	r2, [sp, #20]
 80093f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093f8:	1a9a      	subs	r2, r3, r2
 80093fa:	eba3 0901 	sub.w	r9, r3, r1
 80093fe:	4591      	cmp	r9, r2
 8009400:	bfa8      	it	ge
 8009402:	4691      	movge	r9, r2
 8009404:	f1b9 0f00 	cmp.w	r9, #0
 8009408:	dc35      	bgt.n	8009476 <_printf_float+0x3ae>
 800940a:	f04f 0800 	mov.w	r8, #0
 800940e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009412:	f104 0a1a 	add.w	sl, r4, #26
 8009416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	eba3 0309 	sub.w	r3, r3, r9
 8009420:	4543      	cmp	r3, r8
 8009422:	f77f af79 	ble.w	8009318 <_printf_float+0x250>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f aeaa 	beq.w	800918a <_printf_float+0xc2>
 8009436:	f108 0801 	add.w	r8, r8, #1
 800943a:	e7ec      	b.n	8009416 <_printf_float+0x34e>
 800943c:	4613      	mov	r3, r2
 800943e:	4631      	mov	r1, r6
 8009440:	4642      	mov	r2, r8
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	d1c0      	bne.n	80093cc <_printf_float+0x304>
 800944a:	e69e      	b.n	800918a <_printf_float+0xc2>
 800944c:	2301      	movs	r3, #1
 800944e:	4631      	mov	r1, r6
 8009450:	4628      	mov	r0, r5
 8009452:	9205      	str	r2, [sp, #20]
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	f43f ae97 	beq.w	800918a <_printf_float+0xc2>
 800945c:	9a05      	ldr	r2, [sp, #20]
 800945e:	f10b 0b01 	add.w	fp, fp, #1
 8009462:	e7b9      	b.n	80093d8 <_printf_float+0x310>
 8009464:	ee18 3a10 	vmov	r3, s16
 8009468:	4652      	mov	r2, sl
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	d1be      	bne.n	80093f2 <_printf_float+0x32a>
 8009474:	e689      	b.n	800918a <_printf_float+0xc2>
 8009476:	9a05      	ldr	r2, [sp, #20]
 8009478:	464b      	mov	r3, r9
 800947a:	4442      	add	r2, r8
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	d1c1      	bne.n	800940a <_printf_float+0x342>
 8009486:	e680      	b.n	800918a <_printf_float+0xc2>
 8009488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948a:	2a01      	cmp	r2, #1
 800948c:	dc01      	bgt.n	8009492 <_printf_float+0x3ca>
 800948e:	07db      	lsls	r3, r3, #31
 8009490:	d538      	bpl.n	8009504 <_printf_float+0x43c>
 8009492:	2301      	movs	r3, #1
 8009494:	4642      	mov	r2, r8
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f ae74 	beq.w	800918a <_printf_float+0xc2>
 80094a2:	ee18 3a10 	vmov	r3, s16
 80094a6:	4652      	mov	r2, sl
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	f43f ae6b 	beq.w	800918a <_printf_float+0xc2>
 80094b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094b8:	2200      	movs	r2, #0
 80094ba:	2300      	movs	r3, #0
 80094bc:	f7f7 fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80094c0:	b9d8      	cbnz	r0, 80094fa <_printf_float+0x432>
 80094c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c4:	f108 0201 	add.w	r2, r8, #1
 80094c8:	3b01      	subs	r3, #1
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	d10e      	bne.n	80094f2 <_printf_float+0x42a>
 80094d4:	e659      	b.n	800918a <_printf_float+0xc2>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae52 	beq.w	800918a <_printf_float+0xc2>
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4543      	cmp	r3, r8
 80094f0:	dcf1      	bgt.n	80094d6 <_printf_float+0x40e>
 80094f2:	464b      	mov	r3, r9
 80094f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094f8:	e6dc      	b.n	80092b4 <_printf_float+0x1ec>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	f104 0a1a 	add.w	sl, r4, #26
 8009502:	e7f2      	b.n	80094ea <_printf_float+0x422>
 8009504:	2301      	movs	r3, #1
 8009506:	4642      	mov	r2, r8
 8009508:	e7df      	b.n	80094ca <_printf_float+0x402>
 800950a:	2301      	movs	r3, #1
 800950c:	464a      	mov	r2, r9
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae38 	beq.w	800918a <_printf_float+0xc2>
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	4543      	cmp	r3, r8
 8009526:	dcf0      	bgt.n	800950a <_printf_float+0x442>
 8009528:	e6fa      	b.n	8009320 <_printf_float+0x258>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	f104 0919 	add.w	r9, r4, #25
 8009532:	e7f4      	b.n	800951e <_printf_float+0x456>

08009534 <_printf_common>:
 8009534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009538:	4616      	mov	r6, r2
 800953a:	4699      	mov	r9, r3
 800953c:	688a      	ldr	r2, [r1, #8]
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009544:	4293      	cmp	r3, r2
 8009546:	bfb8      	it	lt
 8009548:	4613      	movlt	r3, r2
 800954a:	6033      	str	r3, [r6, #0]
 800954c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009550:	4607      	mov	r7, r0
 8009552:	460c      	mov	r4, r1
 8009554:	b10a      	cbz	r2, 800955a <_printf_common+0x26>
 8009556:	3301      	adds	r3, #1
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	0699      	lsls	r1, r3, #26
 800955e:	bf42      	ittt	mi
 8009560:	6833      	ldrmi	r3, [r6, #0]
 8009562:	3302      	addmi	r3, #2
 8009564:	6033      	strmi	r3, [r6, #0]
 8009566:	6825      	ldr	r5, [r4, #0]
 8009568:	f015 0506 	ands.w	r5, r5, #6
 800956c:	d106      	bne.n	800957c <_printf_common+0x48>
 800956e:	f104 0a19 	add.w	sl, r4, #25
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	6832      	ldr	r2, [r6, #0]
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	42ab      	cmp	r3, r5
 800957a:	dc26      	bgt.n	80095ca <_printf_common+0x96>
 800957c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009580:	1e13      	subs	r3, r2, #0
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	bf18      	it	ne
 8009586:	2301      	movne	r3, #1
 8009588:	0692      	lsls	r2, r2, #26
 800958a:	d42b      	bmi.n	80095e4 <_printf_common+0xb0>
 800958c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d01e      	beq.n	80095d8 <_printf_common+0xa4>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	68e5      	ldr	r5, [r4, #12]
 800959e:	6832      	ldr	r2, [r6, #0]
 80095a0:	f003 0306 	and.w	r3, r3, #6
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	bf08      	it	eq
 80095a8:	1aad      	subeq	r5, r5, r2
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	bf0c      	ite	eq
 80095b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b4:	2500      	movne	r5, #0
 80095b6:	4293      	cmp	r3, r2
 80095b8:	bfc4      	itt	gt
 80095ba:	1a9b      	subgt	r3, r3, r2
 80095bc:	18ed      	addgt	r5, r5, r3
 80095be:	2600      	movs	r6, #0
 80095c0:	341a      	adds	r4, #26
 80095c2:	42b5      	cmp	r5, r6
 80095c4:	d11a      	bne.n	80095fc <_printf_common+0xc8>
 80095c6:	2000      	movs	r0, #0
 80095c8:	e008      	b.n	80095dc <_printf_common+0xa8>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4652      	mov	r2, sl
 80095ce:	4649      	mov	r1, r9
 80095d0:	4638      	mov	r0, r7
 80095d2:	47c0      	blx	r8
 80095d4:	3001      	adds	r0, #1
 80095d6:	d103      	bne.n	80095e0 <_printf_common+0xac>
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e0:	3501      	adds	r5, #1
 80095e2:	e7c6      	b.n	8009572 <_printf_common+0x3e>
 80095e4:	18e1      	adds	r1, r4, r3
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	2030      	movs	r0, #48	; 0x30
 80095ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ee:	4422      	add	r2, r4
 80095f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095f8:	3302      	adds	r3, #2
 80095fa:	e7c7      	b.n	800958c <_printf_common+0x58>
 80095fc:	2301      	movs	r3, #1
 80095fe:	4622      	mov	r2, r4
 8009600:	4649      	mov	r1, r9
 8009602:	4638      	mov	r0, r7
 8009604:	47c0      	blx	r8
 8009606:	3001      	adds	r0, #1
 8009608:	d0e6      	beq.n	80095d8 <_printf_common+0xa4>
 800960a:	3601      	adds	r6, #1
 800960c:	e7d9      	b.n	80095c2 <_printf_common+0x8e>
	...

08009610 <_printf_i>:
 8009610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	7e0f      	ldrb	r7, [r1, #24]
 8009616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009618:	2f78      	cmp	r7, #120	; 0x78
 800961a:	4691      	mov	r9, r2
 800961c:	4680      	mov	r8, r0
 800961e:	460c      	mov	r4, r1
 8009620:	469a      	mov	sl, r3
 8009622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009626:	d807      	bhi.n	8009638 <_printf_i+0x28>
 8009628:	2f62      	cmp	r7, #98	; 0x62
 800962a:	d80a      	bhi.n	8009642 <_printf_i+0x32>
 800962c:	2f00      	cmp	r7, #0
 800962e:	f000 80d8 	beq.w	80097e2 <_printf_i+0x1d2>
 8009632:	2f58      	cmp	r7, #88	; 0x58
 8009634:	f000 80a3 	beq.w	800977e <_printf_i+0x16e>
 8009638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800963c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009640:	e03a      	b.n	80096b8 <_printf_i+0xa8>
 8009642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009646:	2b15      	cmp	r3, #21
 8009648:	d8f6      	bhi.n	8009638 <_printf_i+0x28>
 800964a:	a101      	add	r1, pc, #4	; (adr r1, 8009650 <_printf_i+0x40>)
 800964c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009650:	080096a9 	.word	0x080096a9
 8009654:	080096bd 	.word	0x080096bd
 8009658:	08009639 	.word	0x08009639
 800965c:	08009639 	.word	0x08009639
 8009660:	08009639 	.word	0x08009639
 8009664:	08009639 	.word	0x08009639
 8009668:	080096bd 	.word	0x080096bd
 800966c:	08009639 	.word	0x08009639
 8009670:	08009639 	.word	0x08009639
 8009674:	08009639 	.word	0x08009639
 8009678:	08009639 	.word	0x08009639
 800967c:	080097c9 	.word	0x080097c9
 8009680:	080096ed 	.word	0x080096ed
 8009684:	080097ab 	.word	0x080097ab
 8009688:	08009639 	.word	0x08009639
 800968c:	08009639 	.word	0x08009639
 8009690:	080097eb 	.word	0x080097eb
 8009694:	08009639 	.word	0x08009639
 8009698:	080096ed 	.word	0x080096ed
 800969c:	08009639 	.word	0x08009639
 80096a0:	08009639 	.word	0x08009639
 80096a4:	080097b3 	.word	0x080097b3
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	602a      	str	r2, [r5, #0]
 80096b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b8:	2301      	movs	r3, #1
 80096ba:	e0a3      	b.n	8009804 <_printf_i+0x1f4>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	6829      	ldr	r1, [r5, #0]
 80096c0:	0606      	lsls	r6, r0, #24
 80096c2:	f101 0304 	add.w	r3, r1, #4
 80096c6:	d50a      	bpl.n	80096de <_printf_i+0xce>
 80096c8:	680e      	ldr	r6, [r1, #0]
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	2e00      	cmp	r6, #0
 80096ce:	da03      	bge.n	80096d8 <_printf_i+0xc8>
 80096d0:	232d      	movs	r3, #45	; 0x2d
 80096d2:	4276      	negs	r6, r6
 80096d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d8:	485e      	ldr	r0, [pc, #376]	; (8009854 <_printf_i+0x244>)
 80096da:	230a      	movs	r3, #10
 80096dc:	e019      	b.n	8009712 <_printf_i+0x102>
 80096de:	680e      	ldr	r6, [r1, #0]
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096e6:	bf18      	it	ne
 80096e8:	b236      	sxthne	r6, r6
 80096ea:	e7ef      	b.n	80096cc <_printf_i+0xbc>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	6820      	ldr	r0, [r4, #0]
 80096f0:	1d19      	adds	r1, r3, #4
 80096f2:	6029      	str	r1, [r5, #0]
 80096f4:	0601      	lsls	r1, r0, #24
 80096f6:	d501      	bpl.n	80096fc <_printf_i+0xec>
 80096f8:	681e      	ldr	r6, [r3, #0]
 80096fa:	e002      	b.n	8009702 <_printf_i+0xf2>
 80096fc:	0646      	lsls	r6, r0, #25
 80096fe:	d5fb      	bpl.n	80096f8 <_printf_i+0xe8>
 8009700:	881e      	ldrh	r6, [r3, #0]
 8009702:	4854      	ldr	r0, [pc, #336]	; (8009854 <_printf_i+0x244>)
 8009704:	2f6f      	cmp	r7, #111	; 0x6f
 8009706:	bf0c      	ite	eq
 8009708:	2308      	moveq	r3, #8
 800970a:	230a      	movne	r3, #10
 800970c:	2100      	movs	r1, #0
 800970e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009712:	6865      	ldr	r5, [r4, #4]
 8009714:	60a5      	str	r5, [r4, #8]
 8009716:	2d00      	cmp	r5, #0
 8009718:	bfa2      	ittt	ge
 800971a:	6821      	ldrge	r1, [r4, #0]
 800971c:	f021 0104 	bicge.w	r1, r1, #4
 8009720:	6021      	strge	r1, [r4, #0]
 8009722:	b90e      	cbnz	r6, 8009728 <_printf_i+0x118>
 8009724:	2d00      	cmp	r5, #0
 8009726:	d04d      	beq.n	80097c4 <_printf_i+0x1b4>
 8009728:	4615      	mov	r5, r2
 800972a:	fbb6 f1f3 	udiv	r1, r6, r3
 800972e:	fb03 6711 	mls	r7, r3, r1, r6
 8009732:	5dc7      	ldrb	r7, [r0, r7]
 8009734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009738:	4637      	mov	r7, r6
 800973a:	42bb      	cmp	r3, r7
 800973c:	460e      	mov	r6, r1
 800973e:	d9f4      	bls.n	800972a <_printf_i+0x11a>
 8009740:	2b08      	cmp	r3, #8
 8009742:	d10b      	bne.n	800975c <_printf_i+0x14c>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	07de      	lsls	r6, r3, #31
 8009748:	d508      	bpl.n	800975c <_printf_i+0x14c>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	6861      	ldr	r1, [r4, #4]
 800974e:	4299      	cmp	r1, r3
 8009750:	bfde      	ittt	le
 8009752:	2330      	movle	r3, #48	; 0x30
 8009754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800975c:	1b52      	subs	r2, r2, r5
 800975e:	6122      	str	r2, [r4, #16]
 8009760:	f8cd a000 	str.w	sl, [sp]
 8009764:	464b      	mov	r3, r9
 8009766:	aa03      	add	r2, sp, #12
 8009768:	4621      	mov	r1, r4
 800976a:	4640      	mov	r0, r8
 800976c:	f7ff fee2 	bl	8009534 <_printf_common>
 8009770:	3001      	adds	r0, #1
 8009772:	d14c      	bne.n	800980e <_printf_i+0x1fe>
 8009774:	f04f 30ff 	mov.w	r0, #4294967295
 8009778:	b004      	add	sp, #16
 800977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977e:	4835      	ldr	r0, [pc, #212]	; (8009854 <_printf_i+0x244>)
 8009780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009784:	6829      	ldr	r1, [r5, #0]
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	f851 6b04 	ldr.w	r6, [r1], #4
 800978c:	6029      	str	r1, [r5, #0]
 800978e:	061d      	lsls	r5, r3, #24
 8009790:	d514      	bpl.n	80097bc <_printf_i+0x1ac>
 8009792:	07df      	lsls	r7, r3, #31
 8009794:	bf44      	itt	mi
 8009796:	f043 0320 	orrmi.w	r3, r3, #32
 800979a:	6023      	strmi	r3, [r4, #0]
 800979c:	b91e      	cbnz	r6, 80097a6 <_printf_i+0x196>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	f023 0320 	bic.w	r3, r3, #32
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	2310      	movs	r3, #16
 80097a8:	e7b0      	b.n	800970c <_printf_i+0xfc>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f043 0320 	orr.w	r3, r3, #32
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	2378      	movs	r3, #120	; 0x78
 80097b4:	4828      	ldr	r0, [pc, #160]	; (8009858 <_printf_i+0x248>)
 80097b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ba:	e7e3      	b.n	8009784 <_printf_i+0x174>
 80097bc:	0659      	lsls	r1, r3, #25
 80097be:	bf48      	it	mi
 80097c0:	b2b6      	uxthmi	r6, r6
 80097c2:	e7e6      	b.n	8009792 <_printf_i+0x182>
 80097c4:	4615      	mov	r5, r2
 80097c6:	e7bb      	b.n	8009740 <_printf_i+0x130>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	6826      	ldr	r6, [r4, #0]
 80097cc:	6961      	ldr	r1, [r4, #20]
 80097ce:	1d18      	adds	r0, r3, #4
 80097d0:	6028      	str	r0, [r5, #0]
 80097d2:	0635      	lsls	r5, r6, #24
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	d501      	bpl.n	80097dc <_printf_i+0x1cc>
 80097d8:	6019      	str	r1, [r3, #0]
 80097da:	e002      	b.n	80097e2 <_printf_i+0x1d2>
 80097dc:	0670      	lsls	r0, r6, #25
 80097de:	d5fb      	bpl.n	80097d8 <_printf_i+0x1c8>
 80097e0:	8019      	strh	r1, [r3, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	4615      	mov	r5, r2
 80097e8:	e7ba      	b.n	8009760 <_printf_i+0x150>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	1d1a      	adds	r2, r3, #4
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	681d      	ldr	r5, [r3, #0]
 80097f2:	6862      	ldr	r2, [r4, #4]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4628      	mov	r0, r5
 80097f8:	f7f6 fd12 	bl	8000220 <memchr>
 80097fc:	b108      	cbz	r0, 8009802 <_printf_i+0x1f2>
 80097fe:	1b40      	subs	r0, r0, r5
 8009800:	6060      	str	r0, [r4, #4]
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	2300      	movs	r3, #0
 8009808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980c:	e7a8      	b.n	8009760 <_printf_i+0x150>
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	462a      	mov	r2, r5
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	47d0      	blx	sl
 8009818:	3001      	adds	r0, #1
 800981a:	d0ab      	beq.n	8009774 <_printf_i+0x164>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	079b      	lsls	r3, r3, #30
 8009820:	d413      	bmi.n	800984a <_printf_i+0x23a>
 8009822:	68e0      	ldr	r0, [r4, #12]
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	4298      	cmp	r0, r3
 8009828:	bfb8      	it	lt
 800982a:	4618      	movlt	r0, r3
 800982c:	e7a4      	b.n	8009778 <_printf_i+0x168>
 800982e:	2301      	movs	r3, #1
 8009830:	4632      	mov	r2, r6
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d09b      	beq.n	8009774 <_printf_i+0x164>
 800983c:	3501      	adds	r5, #1
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	9903      	ldr	r1, [sp, #12]
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	42ab      	cmp	r3, r5
 8009846:	dcf2      	bgt.n	800982e <_printf_i+0x21e>
 8009848:	e7eb      	b.n	8009822 <_printf_i+0x212>
 800984a:	2500      	movs	r5, #0
 800984c:	f104 0619 	add.w	r6, r4, #25
 8009850:	e7f5      	b.n	800983e <_printf_i+0x22e>
 8009852:	bf00      	nop
 8009854:	0800c002 	.word	0x0800c002
 8009858:	0800c013 	.word	0x0800c013

0800985c <sniprintf>:
 800985c:	b40c      	push	{r2, r3}
 800985e:	b530      	push	{r4, r5, lr}
 8009860:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <sniprintf+0x64>)
 8009862:	1e0c      	subs	r4, r1, #0
 8009864:	681d      	ldr	r5, [r3, #0]
 8009866:	b09d      	sub	sp, #116	; 0x74
 8009868:	da08      	bge.n	800987c <sniprintf+0x20>
 800986a:	238b      	movs	r3, #139	; 0x8b
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	f04f 30ff 	mov.w	r0, #4294967295
 8009872:	b01d      	add	sp, #116	; 0x74
 8009874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009878:	b002      	add	sp, #8
 800987a:	4770      	bx	lr
 800987c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009884:	bf14      	ite	ne
 8009886:	f104 33ff 	addne.w	r3, r4, #4294967295
 800988a:	4623      	moveq	r3, r4
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	9307      	str	r3, [sp, #28]
 8009890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009894:	9002      	str	r0, [sp, #8]
 8009896:	9006      	str	r0, [sp, #24]
 8009898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800989c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800989e:	ab21      	add	r3, sp, #132	; 0x84
 80098a0:	a902      	add	r1, sp, #8
 80098a2:	4628      	mov	r0, r5
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	f001 fb79 	bl	800af9c <_svfiprintf_r>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	bfbc      	itt	lt
 80098ae:	238b      	movlt	r3, #139	; 0x8b
 80098b0:	602b      	strlt	r3, [r5, #0]
 80098b2:	2c00      	cmp	r4, #0
 80098b4:	d0dd      	beq.n	8009872 <sniprintf+0x16>
 80098b6:	9b02      	ldr	r3, [sp, #8]
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	e7d9      	b.n	8009872 <sniprintf+0x16>
 80098be:	bf00      	nop
 80098c0:	20000024 	.word	0x20000024

080098c4 <quorem>:
 80098c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	6903      	ldr	r3, [r0, #16]
 80098ca:	690c      	ldr	r4, [r1, #16]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	4607      	mov	r7, r0
 80098d0:	f2c0 8081 	blt.w	80099d6 <quorem+0x112>
 80098d4:	3c01      	subs	r4, #1
 80098d6:	f101 0814 	add.w	r8, r1, #20
 80098da:	f100 0514 	add.w	r5, r0, #20
 80098de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ec:	3301      	adds	r3, #1
 80098ee:	429a      	cmp	r2, r3
 80098f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80098fc:	d331      	bcc.n	8009962 <quorem+0x9e>
 80098fe:	f04f 0e00 	mov.w	lr, #0
 8009902:	4640      	mov	r0, r8
 8009904:	46ac      	mov	ip, r5
 8009906:	46f2      	mov	sl, lr
 8009908:	f850 2b04 	ldr.w	r2, [r0], #4
 800990c:	b293      	uxth	r3, r2
 800990e:	fb06 e303 	mla	r3, r6, r3, lr
 8009912:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009916:	b29b      	uxth	r3, r3
 8009918:	ebaa 0303 	sub.w	r3, sl, r3
 800991c:	f8dc a000 	ldr.w	sl, [ip]
 8009920:	0c12      	lsrs	r2, r2, #16
 8009922:	fa13 f38a 	uxtah	r3, r3, sl
 8009926:	fb06 e202 	mla	r2, r6, r2, lr
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	9b00      	ldr	r3, [sp, #0]
 800992e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009932:	b292      	uxth	r2, r2
 8009934:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800993c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009940:	4581      	cmp	r9, r0
 8009942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009946:	f84c 3b04 	str.w	r3, [ip], #4
 800994a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800994e:	d2db      	bcs.n	8009908 <quorem+0x44>
 8009950:	f855 300b 	ldr.w	r3, [r5, fp]
 8009954:	b92b      	cbnz	r3, 8009962 <quorem+0x9e>
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	3b04      	subs	r3, #4
 800995a:	429d      	cmp	r5, r3
 800995c:	461a      	mov	r2, r3
 800995e:	d32e      	bcc.n	80099be <quorem+0xfa>
 8009960:	613c      	str	r4, [r7, #16]
 8009962:	4638      	mov	r0, r7
 8009964:	f001 f8c6 	bl	800aaf4 <__mcmp>
 8009968:	2800      	cmp	r0, #0
 800996a:	db24      	blt.n	80099b6 <quorem+0xf2>
 800996c:	3601      	adds	r6, #1
 800996e:	4628      	mov	r0, r5
 8009970:	f04f 0c00 	mov.w	ip, #0
 8009974:	f858 2b04 	ldr.w	r2, [r8], #4
 8009978:	f8d0 e000 	ldr.w	lr, [r0]
 800997c:	b293      	uxth	r3, r2
 800997e:	ebac 0303 	sub.w	r3, ip, r3
 8009982:	0c12      	lsrs	r2, r2, #16
 8009984:	fa13 f38e 	uxtah	r3, r3, lr
 8009988:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800998c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009996:	45c1      	cmp	r9, r8
 8009998:	f840 3b04 	str.w	r3, [r0], #4
 800999c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099a0:	d2e8      	bcs.n	8009974 <quorem+0xb0>
 80099a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099aa:	b922      	cbnz	r2, 80099b6 <quorem+0xf2>
 80099ac:	3b04      	subs	r3, #4
 80099ae:	429d      	cmp	r5, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	d30a      	bcc.n	80099ca <quorem+0x106>
 80099b4:	613c      	str	r4, [r7, #16]
 80099b6:	4630      	mov	r0, r6
 80099b8:	b003      	add	sp, #12
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	3b04      	subs	r3, #4
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	d1cc      	bne.n	8009960 <quorem+0x9c>
 80099c6:	3c01      	subs	r4, #1
 80099c8:	e7c7      	b.n	800995a <quorem+0x96>
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	d1f0      	bne.n	80099b4 <quorem+0xf0>
 80099d2:	3c01      	subs	r4, #1
 80099d4:	e7eb      	b.n	80099ae <quorem+0xea>
 80099d6:	2000      	movs	r0, #0
 80099d8:	e7ee      	b.n	80099b8 <quorem+0xf4>
 80099da:	0000      	movs	r0, r0
 80099dc:	0000      	movs	r0, r0
	...

080099e0 <_dtoa_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	ed2d 8b04 	vpush	{d8-d9}
 80099e8:	ec57 6b10 	vmov	r6, r7, d0
 80099ec:	b093      	sub	sp, #76	; 0x4c
 80099ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099f4:	9106      	str	r1, [sp, #24]
 80099f6:	ee10 aa10 	vmov	sl, s0
 80099fa:	4604      	mov	r4, r0
 80099fc:	9209      	str	r2, [sp, #36]	; 0x24
 80099fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009a00:	46bb      	mov	fp, r7
 8009a02:	b975      	cbnz	r5, 8009a22 <_dtoa_r+0x42>
 8009a04:	2010      	movs	r0, #16
 8009a06:	f000 fddd 	bl	800a5c4 <malloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a0e:	b920      	cbnz	r0, 8009a1a <_dtoa_r+0x3a>
 8009a10:	4ba7      	ldr	r3, [pc, #668]	; (8009cb0 <_dtoa_r+0x2d0>)
 8009a12:	21ea      	movs	r1, #234	; 0xea
 8009a14:	48a7      	ldr	r0, [pc, #668]	; (8009cb4 <_dtoa_r+0x2d4>)
 8009a16:	f001 fbd1 	bl	800b1bc <__assert_func>
 8009a1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a1e:	6005      	str	r5, [r0, #0]
 8009a20:	60c5      	str	r5, [r0, #12]
 8009a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	b151      	cbz	r1, 8009a3e <_dtoa_r+0x5e>
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	604a      	str	r2, [r1, #4]
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4093      	lsls	r3, r2
 8009a30:	608b      	str	r3, [r1, #8]
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fe1c 	bl	800a670 <_Bfree>
 8009a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	1e3b      	subs	r3, r7, #0
 8009a40:	bfaa      	itet	ge
 8009a42:	2300      	movge	r3, #0
 8009a44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a48:	f8c8 3000 	strge.w	r3, [r8]
 8009a4c:	4b9a      	ldr	r3, [pc, #616]	; (8009cb8 <_dtoa_r+0x2d8>)
 8009a4e:	bfbc      	itt	lt
 8009a50:	2201      	movlt	r2, #1
 8009a52:	f8c8 2000 	strlt.w	r2, [r8]
 8009a56:	ea33 030b 	bics.w	r3, r3, fp
 8009a5a:	d11b      	bne.n	8009a94 <_dtoa_r+0xb4>
 8009a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a68:	4333      	orrs	r3, r6
 8009a6a:	f000 8592 	beq.w	800a592 <_dtoa_r+0xbb2>
 8009a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a70:	b963      	cbnz	r3, 8009a8c <_dtoa_r+0xac>
 8009a72:	4b92      	ldr	r3, [pc, #584]	; (8009cbc <_dtoa_r+0x2dc>)
 8009a74:	e022      	b.n	8009abc <_dtoa_r+0xdc>
 8009a76:	4b92      	ldr	r3, [pc, #584]	; (8009cc0 <_dtoa_r+0x2e0>)
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	9801      	ldr	r0, [sp, #4]
 8009a82:	b013      	add	sp, #76	; 0x4c
 8009a84:	ecbd 8b04 	vpop	{d8-d9}
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8c:	4b8b      	ldr	r3, [pc, #556]	; (8009cbc <_dtoa_r+0x2dc>)
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	3303      	adds	r3, #3
 8009a92:	e7f3      	b.n	8009a7c <_dtoa_r+0x9c>
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	4650      	mov	r0, sl
 8009a9a:	4659      	mov	r1, fp
 8009a9c:	f7f7 f834 	bl	8000b08 <__aeabi_dcmpeq>
 8009aa0:	ec4b ab19 	vmov	d9, sl, fp
 8009aa4:	4680      	mov	r8, r0
 8009aa6:	b158      	cbz	r0, 8009ac0 <_dtoa_r+0xe0>
 8009aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aaa:	2301      	movs	r3, #1
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 856b 	beq.w	800a58c <_dtoa_r+0xbac>
 8009ab6:	4883      	ldr	r0, [pc, #524]	; (8009cc4 <_dtoa_r+0x2e4>)
 8009ab8:	6018      	str	r0, [r3, #0]
 8009aba:	1e43      	subs	r3, r0, #1
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	e7df      	b.n	8009a80 <_dtoa_r+0xa0>
 8009ac0:	ec4b ab10 	vmov	d0, sl, fp
 8009ac4:	aa10      	add	r2, sp, #64	; 0x40
 8009ac6:	a911      	add	r1, sp, #68	; 0x44
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f001 f8b9 	bl	800ac40 <__d2b>
 8009ace:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009ad2:	ee08 0a10 	vmov	s16, r0
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	f000 8084 	beq.w	8009be4 <_dtoa_r+0x204>
 8009adc:	ee19 3a90 	vmov	r3, s19
 8009ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ae8:	4656      	mov	r6, sl
 8009aea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009af2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009af6:	4b74      	ldr	r3, [pc, #464]	; (8009cc8 <_dtoa_r+0x2e8>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7f6 fbe3 	bl	80002c8 <__aeabi_dsub>
 8009b02:	a365      	add	r3, pc, #404	; (adr r3, 8009c98 <_dtoa_r+0x2b8>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fd96 	bl	8000638 <__aeabi_dmul>
 8009b0c:	a364      	add	r3, pc, #400	; (adr r3, 8009ca0 <_dtoa_r+0x2c0>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbdb 	bl	80002cc <__adddf3>
 8009b16:	4606      	mov	r6, r0
 8009b18:	4628      	mov	r0, r5
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	f7f6 fd22 	bl	8000564 <__aeabi_i2d>
 8009b20:	a361      	add	r3, pc, #388	; (adr r3, 8009ca8 <_dtoa_r+0x2c8>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fd87 	bl	8000638 <__aeabi_dmul>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4630      	mov	r0, r6
 8009b30:	4639      	mov	r1, r7
 8009b32:	f7f6 fbcb 	bl	80002cc <__adddf3>
 8009b36:	4606      	mov	r6, r0
 8009b38:	460f      	mov	r7, r1
 8009b3a:	f7f7 f82d 	bl	8000b98 <__aeabi_d2iz>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	9000      	str	r0, [sp, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	4630      	mov	r0, r6
 8009b46:	4639      	mov	r1, r7
 8009b48:	f7f6 ffe8 	bl	8000b1c <__aeabi_dcmplt>
 8009b4c:	b150      	cbz	r0, 8009b64 <_dtoa_r+0x184>
 8009b4e:	9800      	ldr	r0, [sp, #0]
 8009b50:	f7f6 fd08 	bl	8000564 <__aeabi_i2d>
 8009b54:	4632      	mov	r2, r6
 8009b56:	463b      	mov	r3, r7
 8009b58:	f7f6 ffd6 	bl	8000b08 <__aeabi_dcmpeq>
 8009b5c:	b910      	cbnz	r0, 8009b64 <_dtoa_r+0x184>
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	2b16      	cmp	r3, #22
 8009b68:	d85a      	bhi.n	8009c20 <_dtoa_r+0x240>
 8009b6a:	9a00      	ldr	r2, [sp, #0]
 8009b6c:	4b57      	ldr	r3, [pc, #348]	; (8009ccc <_dtoa_r+0x2ec>)
 8009b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	ec51 0b19 	vmov	r0, r1, d9
 8009b7a:	f7f6 ffcf 	bl	8000b1c <__aeabi_dcmplt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d050      	beq.n	8009c24 <_dtoa_r+0x244>
 8009b82:	9b00      	ldr	r3, [sp, #0]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b8e:	1b5d      	subs	r5, r3, r5
 8009b90:	1e6b      	subs	r3, r5, #1
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	bf45      	ittet	mi
 8009b96:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b9a:	9304      	strmi	r3, [sp, #16]
 8009b9c:	2300      	movpl	r3, #0
 8009b9e:	2300      	movmi	r3, #0
 8009ba0:	bf4c      	ite	mi
 8009ba2:	9305      	strmi	r3, [sp, #20]
 8009ba4:	9304      	strpl	r3, [sp, #16]
 8009ba6:	9b00      	ldr	r3, [sp, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	db3d      	blt.n	8009c28 <_dtoa_r+0x248>
 8009bac:	9b05      	ldr	r3, [sp, #20]
 8009bae:	9a00      	ldr	r2, [sp, #0]
 8009bb0:	920a      	str	r2, [sp, #40]	; 0x28
 8009bb2:	4413      	add	r3, r2
 8009bb4:	9305      	str	r3, [sp, #20]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9307      	str	r3, [sp, #28]
 8009bba:	9b06      	ldr	r3, [sp, #24]
 8009bbc:	2b09      	cmp	r3, #9
 8009bbe:	f200 8089 	bhi.w	8009cd4 <_dtoa_r+0x2f4>
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	bfc4      	itt	gt
 8009bc6:	3b04      	subgt	r3, #4
 8009bc8:	9306      	strgt	r3, [sp, #24]
 8009bca:	9b06      	ldr	r3, [sp, #24]
 8009bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8009bd0:	bfcc      	ite	gt
 8009bd2:	2500      	movgt	r5, #0
 8009bd4:	2501      	movle	r5, #1
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	f200 8087 	bhi.w	8009cea <_dtoa_r+0x30a>
 8009bdc:	e8df f003 	tbb	[pc, r3]
 8009be0:	59383a2d 	.word	0x59383a2d
 8009be4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009be8:	441d      	add	r5, r3
 8009bea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	bfc1      	itttt	gt
 8009bf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8009bfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c02:	bfda      	itte	le
 8009c04:	f1c3 0320 	rsble	r3, r3, #32
 8009c08:	fa06 f003 	lslle.w	r0, r6, r3
 8009c0c:	4318      	orrgt	r0, r3
 8009c0e:	f7f6 fc99 	bl	8000544 <__aeabi_ui2d>
 8009c12:	2301      	movs	r3, #1
 8009c14:	4606      	mov	r6, r0
 8009c16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c1a:	3d01      	subs	r5, #1
 8009c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c1e:	e76a      	b.n	8009af6 <_dtoa_r+0x116>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e7b2      	b.n	8009b8a <_dtoa_r+0x1aa>
 8009c24:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c26:	e7b1      	b.n	8009b8c <_dtoa_r+0x1ac>
 8009c28:	9b04      	ldr	r3, [sp, #16]
 8009c2a:	9a00      	ldr	r2, [sp, #0]
 8009c2c:	1a9b      	subs	r3, r3, r2
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	4253      	negs	r3, r2
 8009c32:	9307      	str	r3, [sp, #28]
 8009c34:	2300      	movs	r3, #0
 8009c36:	930a      	str	r3, [sp, #40]	; 0x28
 8009c38:	e7bf      	b.n	8009bba <_dtoa_r+0x1da>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9308      	str	r3, [sp, #32]
 8009c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dc55      	bgt.n	8009cf0 <_dtoa_r+0x310>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c4e:	e00c      	b.n	8009c6a <_dtoa_r+0x28a>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e7f3      	b.n	8009c3c <_dtoa_r+0x25c>
 8009c54:	2300      	movs	r3, #0
 8009c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c58:	9308      	str	r3, [sp, #32]
 8009c5a:	9b00      	ldr	r3, [sp, #0]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	9302      	str	r3, [sp, #8]
 8009c60:	3301      	adds	r3, #1
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	9303      	str	r3, [sp, #12]
 8009c66:	bfb8      	it	lt
 8009c68:	2301      	movlt	r3, #1
 8009c6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	6042      	str	r2, [r0, #4]
 8009c70:	2204      	movs	r2, #4
 8009c72:	f102 0614 	add.w	r6, r2, #20
 8009c76:	429e      	cmp	r6, r3
 8009c78:	6841      	ldr	r1, [r0, #4]
 8009c7a:	d93d      	bls.n	8009cf8 <_dtoa_r+0x318>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fcb7 	bl	800a5f0 <_Balloc>
 8009c82:	9001      	str	r0, [sp, #4]
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d13b      	bne.n	8009d00 <_dtoa_r+0x320>
 8009c88:	4b11      	ldr	r3, [pc, #68]	; (8009cd0 <_dtoa_r+0x2f0>)
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c90:	e6c0      	b.n	8009a14 <_dtoa_r+0x34>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7df      	b.n	8009c56 <_dtoa_r+0x276>
 8009c96:	bf00      	nop
 8009c98:	636f4361 	.word	0x636f4361
 8009c9c:	3fd287a7 	.word	0x3fd287a7
 8009ca0:	8b60c8b3 	.word	0x8b60c8b3
 8009ca4:	3fc68a28 	.word	0x3fc68a28
 8009ca8:	509f79fb 	.word	0x509f79fb
 8009cac:	3fd34413 	.word	0x3fd34413
 8009cb0:	0800c031 	.word	0x0800c031
 8009cb4:	0800c048 	.word	0x0800c048
 8009cb8:	7ff00000 	.word	0x7ff00000
 8009cbc:	0800c02d 	.word	0x0800c02d
 8009cc0:	0800c024 	.word	0x0800c024
 8009cc4:	0800c001 	.word	0x0800c001
 8009cc8:	3ff80000 	.word	0x3ff80000
 8009ccc:	0800c138 	.word	0x0800c138
 8009cd0:	0800c0a3 	.word	0x0800c0a3
 8009cd4:	2501      	movs	r5, #1
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9306      	str	r3, [sp, #24]
 8009cda:	9508      	str	r5, [sp, #32]
 8009cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2312      	movs	r3, #18
 8009ce8:	e7b0      	b.n	8009c4c <_dtoa_r+0x26c>
 8009cea:	2301      	movs	r3, #1
 8009cec:	9308      	str	r3, [sp, #32]
 8009cee:	e7f5      	b.n	8009cdc <_dtoa_r+0x2fc>
 8009cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cf6:	e7b8      	b.n	8009c6a <_dtoa_r+0x28a>
 8009cf8:	3101      	adds	r1, #1
 8009cfa:	6041      	str	r1, [r0, #4]
 8009cfc:	0052      	lsls	r2, r2, #1
 8009cfe:	e7b8      	b.n	8009c72 <_dtoa_r+0x292>
 8009d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d02:	9a01      	ldr	r2, [sp, #4]
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	2b0e      	cmp	r3, #14
 8009d0a:	f200 809d 	bhi.w	8009e48 <_dtoa_r+0x468>
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	f000 809a 	beq.w	8009e48 <_dtoa_r+0x468>
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dd32      	ble.n	8009d80 <_dtoa_r+0x3a0>
 8009d1a:	4ab7      	ldr	r2, [pc, #732]	; (8009ff8 <_dtoa_r+0x618>)
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	05d8      	lsls	r0, r3, #23
 8009d2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d30:	d516      	bpl.n	8009d60 <_dtoa_r+0x380>
 8009d32:	4bb2      	ldr	r3, [pc, #712]	; (8009ffc <_dtoa_r+0x61c>)
 8009d34:	ec51 0b19 	vmov	r0, r1, d9
 8009d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d3c:	f7f6 fda6 	bl	800088c <__aeabi_ddiv>
 8009d40:	f007 070f 	and.w	r7, r7, #15
 8009d44:	4682      	mov	sl, r0
 8009d46:	468b      	mov	fp, r1
 8009d48:	2503      	movs	r5, #3
 8009d4a:	4eac      	ldr	r6, [pc, #688]	; (8009ffc <_dtoa_r+0x61c>)
 8009d4c:	b957      	cbnz	r7, 8009d64 <_dtoa_r+0x384>
 8009d4e:	4642      	mov	r2, r8
 8009d50:	464b      	mov	r3, r9
 8009d52:	4650      	mov	r0, sl
 8009d54:	4659      	mov	r1, fp
 8009d56:	f7f6 fd99 	bl	800088c <__aeabi_ddiv>
 8009d5a:	4682      	mov	sl, r0
 8009d5c:	468b      	mov	fp, r1
 8009d5e:	e028      	b.n	8009db2 <_dtoa_r+0x3d2>
 8009d60:	2502      	movs	r5, #2
 8009d62:	e7f2      	b.n	8009d4a <_dtoa_r+0x36a>
 8009d64:	07f9      	lsls	r1, r7, #31
 8009d66:	d508      	bpl.n	8009d7a <_dtoa_r+0x39a>
 8009d68:	4640      	mov	r0, r8
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d70:	f7f6 fc62 	bl	8000638 <__aeabi_dmul>
 8009d74:	3501      	adds	r5, #1
 8009d76:	4680      	mov	r8, r0
 8009d78:	4689      	mov	r9, r1
 8009d7a:	107f      	asrs	r7, r7, #1
 8009d7c:	3608      	adds	r6, #8
 8009d7e:	e7e5      	b.n	8009d4c <_dtoa_r+0x36c>
 8009d80:	f000 809b 	beq.w	8009eba <_dtoa_r+0x4da>
 8009d84:	9b00      	ldr	r3, [sp, #0]
 8009d86:	4f9d      	ldr	r7, [pc, #628]	; (8009ffc <_dtoa_r+0x61c>)
 8009d88:	425e      	negs	r6, r3
 8009d8a:	4b9b      	ldr	r3, [pc, #620]	; (8009ff8 <_dtoa_r+0x618>)
 8009d8c:	f006 020f 	and.w	r2, r6, #15
 8009d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	ec51 0b19 	vmov	r0, r1, d9
 8009d9c:	f7f6 fc4c 	bl	8000638 <__aeabi_dmul>
 8009da0:	1136      	asrs	r6, r6, #4
 8009da2:	4682      	mov	sl, r0
 8009da4:	468b      	mov	fp, r1
 8009da6:	2300      	movs	r3, #0
 8009da8:	2502      	movs	r5, #2
 8009daa:	2e00      	cmp	r6, #0
 8009dac:	d17a      	bne.n	8009ea4 <_dtoa_r+0x4c4>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1d3      	bne.n	8009d5a <_dtoa_r+0x37a>
 8009db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 8082 	beq.w	8009ebe <_dtoa_r+0x4de>
 8009dba:	4b91      	ldr	r3, [pc, #580]	; (800a000 <_dtoa_r+0x620>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4650      	mov	r0, sl
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	f7f6 feab 	bl	8000b1c <__aeabi_dcmplt>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d079      	beq.n	8009ebe <_dtoa_r+0x4de>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d076      	beq.n	8009ebe <_dtoa_r+0x4de>
 8009dd0:	9b02      	ldr	r3, [sp, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dd36      	ble.n	8009e44 <_dtoa_r+0x464>
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	4650      	mov	r0, sl
 8009dda:	4659      	mov	r1, fp
 8009ddc:	1e5f      	subs	r7, r3, #1
 8009dde:	2200      	movs	r2, #0
 8009de0:	4b88      	ldr	r3, [pc, #544]	; (800a004 <_dtoa_r+0x624>)
 8009de2:	f7f6 fc29 	bl	8000638 <__aeabi_dmul>
 8009de6:	9e02      	ldr	r6, [sp, #8]
 8009de8:	4682      	mov	sl, r0
 8009dea:	468b      	mov	fp, r1
 8009dec:	3501      	adds	r5, #1
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7f6 fbb8 	bl	8000564 <__aeabi_i2d>
 8009df4:	4652      	mov	r2, sl
 8009df6:	465b      	mov	r3, fp
 8009df8:	f7f6 fc1e 	bl	8000638 <__aeabi_dmul>
 8009dfc:	4b82      	ldr	r3, [pc, #520]	; (800a008 <_dtoa_r+0x628>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f7f6 fa64 	bl	80002cc <__adddf3>
 8009e04:	46d0      	mov	r8, sl
 8009e06:	46d9      	mov	r9, fp
 8009e08:	4682      	mov	sl, r0
 8009e0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e0e:	2e00      	cmp	r6, #0
 8009e10:	d158      	bne.n	8009ec4 <_dtoa_r+0x4e4>
 8009e12:	4b7e      	ldr	r3, [pc, #504]	; (800a00c <_dtoa_r+0x62c>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	4640      	mov	r0, r8
 8009e18:	4649      	mov	r1, r9
 8009e1a:	f7f6 fa55 	bl	80002c8 <__aeabi_dsub>
 8009e1e:	4652      	mov	r2, sl
 8009e20:	465b      	mov	r3, fp
 8009e22:	4680      	mov	r8, r0
 8009e24:	4689      	mov	r9, r1
 8009e26:	f7f6 fe97 	bl	8000b58 <__aeabi_dcmpgt>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	f040 8295 	bne.w	800a35a <_dtoa_r+0x97a>
 8009e30:	4652      	mov	r2, sl
 8009e32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e36:	4640      	mov	r0, r8
 8009e38:	4649      	mov	r1, r9
 8009e3a:	f7f6 fe6f 	bl	8000b1c <__aeabi_dcmplt>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f040 8289 	bne.w	800a356 <_dtoa_r+0x976>
 8009e44:	ec5b ab19 	vmov	sl, fp, d9
 8009e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f2c0 8148 	blt.w	800a0e0 <_dtoa_r+0x700>
 8009e50:	9a00      	ldr	r2, [sp, #0]
 8009e52:	2a0e      	cmp	r2, #14
 8009e54:	f300 8144 	bgt.w	800a0e0 <_dtoa_r+0x700>
 8009e58:	4b67      	ldr	r3, [pc, #412]	; (8009ff8 <_dtoa_r+0x618>)
 8009e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f280 80d5 	bge.w	800a014 <_dtoa_r+0x634>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f300 80d1 	bgt.w	800a014 <_dtoa_r+0x634>
 8009e72:	f040 826f 	bne.w	800a354 <_dtoa_r+0x974>
 8009e76:	4b65      	ldr	r3, [pc, #404]	; (800a00c <_dtoa_r+0x62c>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	f7f6 fbdb 	bl	8000638 <__aeabi_dmul>
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	f7f6 fe5d 	bl	8000b44 <__aeabi_dcmpge>
 8009e8a:	9e03      	ldr	r6, [sp, #12]
 8009e8c:	4637      	mov	r7, r6
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	f040 8245 	bne.w	800a31e <_dtoa_r+0x93e>
 8009e94:	9d01      	ldr	r5, [sp, #4]
 8009e96:	2331      	movs	r3, #49	; 0x31
 8009e98:	f805 3b01 	strb.w	r3, [r5], #1
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	e240      	b.n	800a326 <_dtoa_r+0x946>
 8009ea4:	07f2      	lsls	r2, r6, #31
 8009ea6:	d505      	bpl.n	8009eb4 <_dtoa_r+0x4d4>
 8009ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eac:	f7f6 fbc4 	bl	8000638 <__aeabi_dmul>
 8009eb0:	3501      	adds	r5, #1
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	1076      	asrs	r6, r6, #1
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	e777      	b.n	8009daa <_dtoa_r+0x3ca>
 8009eba:	2502      	movs	r5, #2
 8009ebc:	e779      	b.n	8009db2 <_dtoa_r+0x3d2>
 8009ebe:	9f00      	ldr	r7, [sp, #0]
 8009ec0:	9e03      	ldr	r6, [sp, #12]
 8009ec2:	e794      	b.n	8009dee <_dtoa_r+0x40e>
 8009ec4:	9901      	ldr	r1, [sp, #4]
 8009ec6:	4b4c      	ldr	r3, [pc, #304]	; (8009ff8 <_dtoa_r+0x618>)
 8009ec8:	4431      	add	r1, r6
 8009eca:	910d      	str	r1, [sp, #52]	; 0x34
 8009ecc:	9908      	ldr	r1, [sp, #32]
 8009ece:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ed2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ed6:	2900      	cmp	r1, #0
 8009ed8:	d043      	beq.n	8009f62 <_dtoa_r+0x582>
 8009eda:	494d      	ldr	r1, [pc, #308]	; (800a010 <_dtoa_r+0x630>)
 8009edc:	2000      	movs	r0, #0
 8009ede:	f7f6 fcd5 	bl	800088c <__aeabi_ddiv>
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	f7f6 f9ef 	bl	80002c8 <__aeabi_dsub>
 8009eea:	9d01      	ldr	r5, [sp, #4]
 8009eec:	4682      	mov	sl, r0
 8009eee:	468b      	mov	fp, r1
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f7f6 fe50 	bl	8000b98 <__aeabi_d2iz>
 8009ef8:	4606      	mov	r6, r0
 8009efa:	f7f6 fb33 	bl	8000564 <__aeabi_i2d>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4640      	mov	r0, r8
 8009f04:	4649      	mov	r1, r9
 8009f06:	f7f6 f9df 	bl	80002c8 <__aeabi_dsub>
 8009f0a:	3630      	adds	r6, #48	; 0x30
 8009f0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f10:	4652      	mov	r2, sl
 8009f12:	465b      	mov	r3, fp
 8009f14:	4680      	mov	r8, r0
 8009f16:	4689      	mov	r9, r1
 8009f18:	f7f6 fe00 	bl	8000b1c <__aeabi_dcmplt>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d163      	bne.n	8009fe8 <_dtoa_r+0x608>
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	4936      	ldr	r1, [pc, #216]	; (800a000 <_dtoa_r+0x620>)
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7f6 f9ce 	bl	80002c8 <__aeabi_dsub>
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	465b      	mov	r3, fp
 8009f30:	f7f6 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f040 80b5 	bne.w	800a0a4 <_dtoa_r+0x6c4>
 8009f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	d081      	beq.n	8009e44 <_dtoa_r+0x464>
 8009f40:	4b30      	ldr	r3, [pc, #192]	; (800a004 <_dtoa_r+0x624>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	4650      	mov	r0, sl
 8009f46:	4659      	mov	r1, fp
 8009f48:	f7f6 fb76 	bl	8000638 <__aeabi_dmul>
 8009f4c:	4b2d      	ldr	r3, [pc, #180]	; (800a004 <_dtoa_r+0x624>)
 8009f4e:	4682      	mov	sl, r0
 8009f50:	468b      	mov	fp, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	2200      	movs	r2, #0
 8009f58:	f7f6 fb6e 	bl	8000638 <__aeabi_dmul>
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4689      	mov	r9, r1
 8009f60:	e7c6      	b.n	8009ef0 <_dtoa_r+0x510>
 8009f62:	4650      	mov	r0, sl
 8009f64:	4659      	mov	r1, fp
 8009f66:	f7f6 fb67 	bl	8000638 <__aeabi_dmul>
 8009f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6c:	9d01      	ldr	r5, [sp, #4]
 8009f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f70:	4682      	mov	sl, r0
 8009f72:	468b      	mov	fp, r1
 8009f74:	4649      	mov	r1, r9
 8009f76:	4640      	mov	r0, r8
 8009f78:	f7f6 fe0e 	bl	8000b98 <__aeabi_d2iz>
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	f7f6 faf1 	bl	8000564 <__aeabi_i2d>
 8009f82:	3630      	adds	r6, #48	; 0x30
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	f7f6 f99c 	bl	80002c8 <__aeabi_dsub>
 8009f90:	f805 6b01 	strb.w	r6, [r5], #1
 8009f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f96:	429d      	cmp	r5, r3
 8009f98:	4680      	mov	r8, r0
 8009f9a:	4689      	mov	r9, r1
 8009f9c:	f04f 0200 	mov.w	r2, #0
 8009fa0:	d124      	bne.n	8009fec <_dtoa_r+0x60c>
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <_dtoa_r+0x630>)
 8009fa4:	4650      	mov	r0, sl
 8009fa6:	4659      	mov	r1, fp
 8009fa8:	f7f6 f990 	bl	80002cc <__adddf3>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 fdd0 	bl	8000b58 <__aeabi_dcmpgt>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d173      	bne.n	800a0a4 <_dtoa_r+0x6c4>
 8009fbc:	4652      	mov	r2, sl
 8009fbe:	465b      	mov	r3, fp
 8009fc0:	4913      	ldr	r1, [pc, #76]	; (800a010 <_dtoa_r+0x630>)
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	f7f6 f980 	bl	80002c8 <__aeabi_dsub>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4640      	mov	r0, r8
 8009fce:	4649      	mov	r1, r9
 8009fd0:	f7f6 fda4 	bl	8000b1c <__aeabi_dcmplt>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f43f af35 	beq.w	8009e44 <_dtoa_r+0x464>
 8009fda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fdc:	1e6b      	subs	r3, r5, #1
 8009fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fe4:	2b30      	cmp	r3, #48	; 0x30
 8009fe6:	d0f8      	beq.n	8009fda <_dtoa_r+0x5fa>
 8009fe8:	9700      	str	r7, [sp, #0]
 8009fea:	e049      	b.n	800a080 <_dtoa_r+0x6a0>
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <_dtoa_r+0x624>)
 8009fee:	f7f6 fb23 	bl	8000638 <__aeabi_dmul>
 8009ff2:	4680      	mov	r8, r0
 8009ff4:	4689      	mov	r9, r1
 8009ff6:	e7bd      	b.n	8009f74 <_dtoa_r+0x594>
 8009ff8:	0800c138 	.word	0x0800c138
 8009ffc:	0800c110 	.word	0x0800c110
 800a000:	3ff00000 	.word	0x3ff00000
 800a004:	40240000 	.word	0x40240000
 800a008:	401c0000 	.word	0x401c0000
 800a00c:	40140000 	.word	0x40140000
 800a010:	3fe00000 	.word	0x3fe00000
 800a014:	9d01      	ldr	r5, [sp, #4]
 800a016:	4656      	mov	r6, sl
 800a018:	465f      	mov	r7, fp
 800a01a:	4642      	mov	r2, r8
 800a01c:	464b      	mov	r3, r9
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 fc33 	bl	800088c <__aeabi_ddiv>
 800a026:	f7f6 fdb7 	bl	8000b98 <__aeabi_d2iz>
 800a02a:	4682      	mov	sl, r0
 800a02c:	f7f6 fa9a 	bl	8000564 <__aeabi_i2d>
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	f7f6 fb00 	bl	8000638 <__aeabi_dmul>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a044:	f7f6 f940 	bl	80002c8 <__aeabi_dsub>
 800a048:	f805 6b01 	strb.w	r6, [r5], #1
 800a04c:	9e01      	ldr	r6, [sp, #4]
 800a04e:	9f03      	ldr	r7, [sp, #12]
 800a050:	1bae      	subs	r6, r5, r6
 800a052:	42b7      	cmp	r7, r6
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	d135      	bne.n	800a0c6 <_dtoa_r+0x6e6>
 800a05a:	f7f6 f937 	bl	80002cc <__adddf3>
 800a05e:	4642      	mov	r2, r8
 800a060:	464b      	mov	r3, r9
 800a062:	4606      	mov	r6, r0
 800a064:	460f      	mov	r7, r1
 800a066:	f7f6 fd77 	bl	8000b58 <__aeabi_dcmpgt>
 800a06a:	b9d0      	cbnz	r0, 800a0a2 <_dtoa_r+0x6c2>
 800a06c:	4642      	mov	r2, r8
 800a06e:	464b      	mov	r3, r9
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fd48 	bl	8000b08 <__aeabi_dcmpeq>
 800a078:	b110      	cbz	r0, 800a080 <_dtoa_r+0x6a0>
 800a07a:	f01a 0f01 	tst.w	sl, #1
 800a07e:	d110      	bne.n	800a0a2 <_dtoa_r+0x6c2>
 800a080:	4620      	mov	r0, r4
 800a082:	ee18 1a10 	vmov	r1, s16
 800a086:	f000 faf3 	bl	800a670 <_Bfree>
 800a08a:	2300      	movs	r3, #0
 800a08c:	9800      	ldr	r0, [sp, #0]
 800a08e:	702b      	strb	r3, [r5, #0]
 800a090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a092:	3001      	adds	r0, #1
 800a094:	6018      	str	r0, [r3, #0]
 800a096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f43f acf1 	beq.w	8009a80 <_dtoa_r+0xa0>
 800a09e:	601d      	str	r5, [r3, #0]
 800a0a0:	e4ee      	b.n	8009a80 <_dtoa_r+0xa0>
 800a0a2:	9f00      	ldr	r7, [sp, #0]
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	461d      	mov	r5, r3
 800a0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ac:	2a39      	cmp	r2, #57	; 0x39
 800a0ae:	d106      	bne.n	800a0be <_dtoa_r+0x6de>
 800a0b0:	9a01      	ldr	r2, [sp, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d1f7      	bne.n	800a0a6 <_dtoa_r+0x6c6>
 800a0b6:	9901      	ldr	r1, [sp, #4]
 800a0b8:	2230      	movs	r2, #48	; 0x30
 800a0ba:	3701      	adds	r7, #1
 800a0bc:	700a      	strb	r2, [r1, #0]
 800a0be:	781a      	ldrb	r2, [r3, #0]
 800a0c0:	3201      	adds	r2, #1
 800a0c2:	701a      	strb	r2, [r3, #0]
 800a0c4:	e790      	b.n	8009fe8 <_dtoa_r+0x608>
 800a0c6:	4ba6      	ldr	r3, [pc, #664]	; (800a360 <_dtoa_r+0x980>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f7f6 fab5 	bl	8000638 <__aeabi_dmul>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	f7f6 fd17 	bl	8000b08 <__aeabi_dcmpeq>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d09d      	beq.n	800a01a <_dtoa_r+0x63a>
 800a0de:	e7cf      	b.n	800a080 <_dtoa_r+0x6a0>
 800a0e0:	9a08      	ldr	r2, [sp, #32]
 800a0e2:	2a00      	cmp	r2, #0
 800a0e4:	f000 80d7 	beq.w	800a296 <_dtoa_r+0x8b6>
 800a0e8:	9a06      	ldr	r2, [sp, #24]
 800a0ea:	2a01      	cmp	r2, #1
 800a0ec:	f300 80ba 	bgt.w	800a264 <_dtoa_r+0x884>
 800a0f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	f000 80b2 	beq.w	800a25c <_dtoa_r+0x87c>
 800a0f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0fc:	9e07      	ldr	r6, [sp, #28]
 800a0fe:	9d04      	ldr	r5, [sp, #16]
 800a100:	9a04      	ldr	r2, [sp, #16]
 800a102:	441a      	add	r2, r3
 800a104:	9204      	str	r2, [sp, #16]
 800a106:	9a05      	ldr	r2, [sp, #20]
 800a108:	2101      	movs	r1, #1
 800a10a:	441a      	add	r2, r3
 800a10c:	4620      	mov	r0, r4
 800a10e:	9205      	str	r2, [sp, #20]
 800a110:	f000 fb66 	bl	800a7e0 <__i2b>
 800a114:	4607      	mov	r7, r0
 800a116:	2d00      	cmp	r5, #0
 800a118:	dd0c      	ble.n	800a134 <_dtoa_r+0x754>
 800a11a:	9b05      	ldr	r3, [sp, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd09      	ble.n	800a134 <_dtoa_r+0x754>
 800a120:	42ab      	cmp	r3, r5
 800a122:	9a04      	ldr	r2, [sp, #16]
 800a124:	bfa8      	it	ge
 800a126:	462b      	movge	r3, r5
 800a128:	1ad2      	subs	r2, r2, r3
 800a12a:	9204      	str	r2, [sp, #16]
 800a12c:	9a05      	ldr	r2, [sp, #20]
 800a12e:	1aed      	subs	r5, r5, r3
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	9b07      	ldr	r3, [sp, #28]
 800a136:	b31b      	cbz	r3, 800a180 <_dtoa_r+0x7a0>
 800a138:	9b08      	ldr	r3, [sp, #32]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 80af 	beq.w	800a29e <_dtoa_r+0x8be>
 800a140:	2e00      	cmp	r6, #0
 800a142:	dd13      	ble.n	800a16c <_dtoa_r+0x78c>
 800a144:	4639      	mov	r1, r7
 800a146:	4632      	mov	r2, r6
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fc09 	bl	800a960 <__pow5mult>
 800a14e:	ee18 2a10 	vmov	r2, s16
 800a152:	4601      	mov	r1, r0
 800a154:	4607      	mov	r7, r0
 800a156:	4620      	mov	r0, r4
 800a158:	f000 fb58 	bl	800a80c <__multiply>
 800a15c:	ee18 1a10 	vmov	r1, s16
 800a160:	4680      	mov	r8, r0
 800a162:	4620      	mov	r0, r4
 800a164:	f000 fa84 	bl	800a670 <_Bfree>
 800a168:	ee08 8a10 	vmov	s16, r8
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	1b9a      	subs	r2, r3, r6
 800a170:	d006      	beq.n	800a180 <_dtoa_r+0x7a0>
 800a172:	ee18 1a10 	vmov	r1, s16
 800a176:	4620      	mov	r0, r4
 800a178:	f000 fbf2 	bl	800a960 <__pow5mult>
 800a17c:	ee08 0a10 	vmov	s16, r0
 800a180:	2101      	movs	r1, #1
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fb2c 	bl	800a7e0 <__i2b>
 800a188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	4606      	mov	r6, r0
 800a18e:	f340 8088 	ble.w	800a2a2 <_dtoa_r+0x8c2>
 800a192:	461a      	mov	r2, r3
 800a194:	4601      	mov	r1, r0
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fbe2 	bl	800a960 <__pow5mult>
 800a19c:	9b06      	ldr	r3, [sp, #24]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	f340 8081 	ble.w	800a2a8 <_dtoa_r+0x8c8>
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	6933      	ldr	r3, [r6, #16]
 800a1ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1b0:	6918      	ldr	r0, [r3, #16]
 800a1b2:	f000 fac5 	bl	800a740 <__hi0bits>
 800a1b6:	f1c0 0020 	rsb	r0, r0, #32
 800a1ba:	9b05      	ldr	r3, [sp, #20]
 800a1bc:	4418      	add	r0, r3
 800a1be:	f010 001f 	ands.w	r0, r0, #31
 800a1c2:	f000 8092 	beq.w	800a2ea <_dtoa_r+0x90a>
 800a1c6:	f1c0 0320 	rsb	r3, r0, #32
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	f340 808a 	ble.w	800a2e4 <_dtoa_r+0x904>
 800a1d0:	f1c0 001c 	rsb	r0, r0, #28
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	4403      	add	r3, r0
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	9b05      	ldr	r3, [sp, #20]
 800a1dc:	4403      	add	r3, r0
 800a1de:	4405      	add	r5, r0
 800a1e0:	9305      	str	r3, [sp, #20]
 800a1e2:	9b04      	ldr	r3, [sp, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dd07      	ble.n	800a1f8 <_dtoa_r+0x818>
 800a1e8:	ee18 1a10 	vmov	r1, s16
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 fc10 	bl	800aa14 <__lshift>
 800a1f4:	ee08 0a10 	vmov	s16, r0
 800a1f8:	9b05      	ldr	r3, [sp, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	dd05      	ble.n	800a20a <_dtoa_r+0x82a>
 800a1fe:	4631      	mov	r1, r6
 800a200:	461a      	mov	r2, r3
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fc06 	bl	800aa14 <__lshift>
 800a208:	4606      	mov	r6, r0
 800a20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d06e      	beq.n	800a2ee <_dtoa_r+0x90e>
 800a210:	ee18 0a10 	vmov	r0, s16
 800a214:	4631      	mov	r1, r6
 800a216:	f000 fc6d 	bl	800aaf4 <__mcmp>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	da67      	bge.n	800a2ee <_dtoa_r+0x90e>
 800a21e:	9b00      	ldr	r3, [sp, #0]
 800a220:	3b01      	subs	r3, #1
 800a222:	ee18 1a10 	vmov	r1, s16
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	220a      	movs	r2, #10
 800a22a:	2300      	movs	r3, #0
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fa41 	bl	800a6b4 <__multadd>
 800a232:	9b08      	ldr	r3, [sp, #32]
 800a234:	ee08 0a10 	vmov	s16, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 81b1 	beq.w	800a5a0 <_dtoa_r+0xbc0>
 800a23e:	2300      	movs	r3, #0
 800a240:	4639      	mov	r1, r7
 800a242:	220a      	movs	r2, #10
 800a244:	4620      	mov	r0, r4
 800a246:	f000 fa35 	bl	800a6b4 <__multadd>
 800a24a:	9b02      	ldr	r3, [sp, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	4607      	mov	r7, r0
 800a250:	f300 808e 	bgt.w	800a370 <_dtoa_r+0x990>
 800a254:	9b06      	ldr	r3, [sp, #24]
 800a256:	2b02      	cmp	r3, #2
 800a258:	dc51      	bgt.n	800a2fe <_dtoa_r+0x91e>
 800a25a:	e089      	b.n	800a370 <_dtoa_r+0x990>
 800a25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a25e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a262:	e74b      	b.n	800a0fc <_dtoa_r+0x71c>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	1e5e      	subs	r6, r3, #1
 800a268:	9b07      	ldr	r3, [sp, #28]
 800a26a:	42b3      	cmp	r3, r6
 800a26c:	bfbf      	itttt	lt
 800a26e:	9b07      	ldrlt	r3, [sp, #28]
 800a270:	9607      	strlt	r6, [sp, #28]
 800a272:	1af2      	sublt	r2, r6, r3
 800a274:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a276:	bfb6      	itet	lt
 800a278:	189b      	addlt	r3, r3, r2
 800a27a:	1b9e      	subge	r6, r3, r6
 800a27c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	bfb8      	it	lt
 800a282:	2600      	movlt	r6, #0
 800a284:	2b00      	cmp	r3, #0
 800a286:	bfb7      	itett	lt
 800a288:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a28c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a290:	1a9d      	sublt	r5, r3, r2
 800a292:	2300      	movlt	r3, #0
 800a294:	e734      	b.n	800a100 <_dtoa_r+0x720>
 800a296:	9e07      	ldr	r6, [sp, #28]
 800a298:	9d04      	ldr	r5, [sp, #16]
 800a29a:	9f08      	ldr	r7, [sp, #32]
 800a29c:	e73b      	b.n	800a116 <_dtoa_r+0x736>
 800a29e:	9a07      	ldr	r2, [sp, #28]
 800a2a0:	e767      	b.n	800a172 <_dtoa_r+0x792>
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	dc18      	bgt.n	800a2da <_dtoa_r+0x8fa>
 800a2a8:	f1ba 0f00 	cmp.w	sl, #0
 800a2ac:	d115      	bne.n	800a2da <_dtoa_r+0x8fa>
 800a2ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b2:	b993      	cbnz	r3, 800a2da <_dtoa_r+0x8fa>
 800a2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2b8:	0d1b      	lsrs	r3, r3, #20
 800a2ba:	051b      	lsls	r3, r3, #20
 800a2bc:	b183      	cbz	r3, 800a2e0 <_dtoa_r+0x900>
 800a2be:	9b04      	ldr	r3, [sp, #16]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	9b05      	ldr	r3, [sp, #20]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	f04f 0801 	mov.w	r8, #1
 800a2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f47f af6a 	bne.w	800a1aa <_dtoa_r+0x7ca>
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	e76f      	b.n	800a1ba <_dtoa_r+0x7da>
 800a2da:	f04f 0800 	mov.w	r8, #0
 800a2de:	e7f6      	b.n	800a2ce <_dtoa_r+0x8ee>
 800a2e0:	4698      	mov	r8, r3
 800a2e2:	e7f4      	b.n	800a2ce <_dtoa_r+0x8ee>
 800a2e4:	f43f af7d 	beq.w	800a1e2 <_dtoa_r+0x802>
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	301c      	adds	r0, #28
 800a2ec:	e772      	b.n	800a1d4 <_dtoa_r+0x7f4>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dc37      	bgt.n	800a364 <_dtoa_r+0x984>
 800a2f4:	9b06      	ldr	r3, [sp, #24]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	dd34      	ble.n	800a364 <_dtoa_r+0x984>
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	9302      	str	r3, [sp, #8]
 800a2fe:	9b02      	ldr	r3, [sp, #8]
 800a300:	b96b      	cbnz	r3, 800a31e <_dtoa_r+0x93e>
 800a302:	4631      	mov	r1, r6
 800a304:	2205      	movs	r2, #5
 800a306:	4620      	mov	r0, r4
 800a308:	f000 f9d4 	bl	800a6b4 <__multadd>
 800a30c:	4601      	mov	r1, r0
 800a30e:	4606      	mov	r6, r0
 800a310:	ee18 0a10 	vmov	r0, s16
 800a314:	f000 fbee 	bl	800aaf4 <__mcmp>
 800a318:	2800      	cmp	r0, #0
 800a31a:	f73f adbb 	bgt.w	8009e94 <_dtoa_r+0x4b4>
 800a31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a320:	9d01      	ldr	r5, [sp, #4]
 800a322:	43db      	mvns	r3, r3
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	4631      	mov	r1, r6
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f99f 	bl	800a670 <_Bfree>
 800a332:	2f00      	cmp	r7, #0
 800a334:	f43f aea4 	beq.w	800a080 <_dtoa_r+0x6a0>
 800a338:	f1b8 0f00 	cmp.w	r8, #0
 800a33c:	d005      	beq.n	800a34a <_dtoa_r+0x96a>
 800a33e:	45b8      	cmp	r8, r7
 800a340:	d003      	beq.n	800a34a <_dtoa_r+0x96a>
 800a342:	4641      	mov	r1, r8
 800a344:	4620      	mov	r0, r4
 800a346:	f000 f993 	bl	800a670 <_Bfree>
 800a34a:	4639      	mov	r1, r7
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 f98f 	bl	800a670 <_Bfree>
 800a352:	e695      	b.n	800a080 <_dtoa_r+0x6a0>
 800a354:	2600      	movs	r6, #0
 800a356:	4637      	mov	r7, r6
 800a358:	e7e1      	b.n	800a31e <_dtoa_r+0x93e>
 800a35a:	9700      	str	r7, [sp, #0]
 800a35c:	4637      	mov	r7, r6
 800a35e:	e599      	b.n	8009e94 <_dtoa_r+0x4b4>
 800a360:	40240000 	.word	0x40240000
 800a364:	9b08      	ldr	r3, [sp, #32]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 80ca 	beq.w	800a500 <_dtoa_r+0xb20>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	9302      	str	r3, [sp, #8]
 800a370:	2d00      	cmp	r5, #0
 800a372:	dd05      	ble.n	800a380 <_dtoa_r+0x9a0>
 800a374:	4639      	mov	r1, r7
 800a376:	462a      	mov	r2, r5
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fb4b 	bl	800aa14 <__lshift>
 800a37e:	4607      	mov	r7, r0
 800a380:	f1b8 0f00 	cmp.w	r8, #0
 800a384:	d05b      	beq.n	800a43e <_dtoa_r+0xa5e>
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 f931 	bl	800a5f0 <_Balloc>
 800a38e:	4605      	mov	r5, r0
 800a390:	b928      	cbnz	r0, 800a39e <_dtoa_r+0x9be>
 800a392:	4b87      	ldr	r3, [pc, #540]	; (800a5b0 <_dtoa_r+0xbd0>)
 800a394:	4602      	mov	r2, r0
 800a396:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a39a:	f7ff bb3b 	b.w	8009a14 <_dtoa_r+0x34>
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	3202      	adds	r2, #2
 800a3a2:	0092      	lsls	r2, r2, #2
 800a3a4:	f107 010c 	add.w	r1, r7, #12
 800a3a8:	300c      	adds	r0, #12
 800a3aa:	f000 f913 	bl	800a5d4 <memcpy>
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fb2e 	bl	800aa14 <__lshift>
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	f103 0901 	add.w	r9, r3, #1
 800a3be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	f00a 0301 	and.w	r3, sl, #1
 800a3ca:	46b8      	mov	r8, r7
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	4631      	mov	r1, r6
 800a3d2:	ee18 0a10 	vmov	r0, s16
 800a3d6:	f7ff fa75 	bl	80098c4 <quorem>
 800a3da:	4641      	mov	r1, r8
 800a3dc:	9002      	str	r0, [sp, #8]
 800a3de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3e2:	ee18 0a10 	vmov	r0, s16
 800a3e6:	f000 fb85 	bl	800aaf4 <__mcmp>
 800a3ea:	463a      	mov	r2, r7
 800a3ec:	9003      	str	r0, [sp, #12]
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 fb9b 	bl	800ab2c <__mdiff>
 800a3f6:	68c2      	ldr	r2, [r0, #12]
 800a3f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	bb02      	cbnz	r2, 800a442 <_dtoa_r+0xa62>
 800a400:	4601      	mov	r1, r0
 800a402:	ee18 0a10 	vmov	r0, s16
 800a406:	f000 fb75 	bl	800aaf4 <__mcmp>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4629      	mov	r1, r5
 800a40e:	4620      	mov	r0, r4
 800a410:	9207      	str	r2, [sp, #28]
 800a412:	f000 f92d 	bl	800a670 <_Bfree>
 800a416:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a41a:	ea43 0102 	orr.w	r1, r3, r2
 800a41e:	9b04      	ldr	r3, [sp, #16]
 800a420:	430b      	orrs	r3, r1
 800a422:	464d      	mov	r5, r9
 800a424:	d10f      	bne.n	800a446 <_dtoa_r+0xa66>
 800a426:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a42a:	d02a      	beq.n	800a482 <_dtoa_r+0xaa2>
 800a42c:	9b03      	ldr	r3, [sp, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dd02      	ble.n	800a438 <_dtoa_r+0xa58>
 800a432:	9b02      	ldr	r3, [sp, #8]
 800a434:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a438:	f88b a000 	strb.w	sl, [fp]
 800a43c:	e775      	b.n	800a32a <_dtoa_r+0x94a>
 800a43e:	4638      	mov	r0, r7
 800a440:	e7ba      	b.n	800a3b8 <_dtoa_r+0x9d8>
 800a442:	2201      	movs	r2, #1
 800a444:	e7e2      	b.n	800a40c <_dtoa_r+0xa2c>
 800a446:	9b03      	ldr	r3, [sp, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	db04      	blt.n	800a456 <_dtoa_r+0xa76>
 800a44c:	9906      	ldr	r1, [sp, #24]
 800a44e:	430b      	orrs	r3, r1
 800a450:	9904      	ldr	r1, [sp, #16]
 800a452:	430b      	orrs	r3, r1
 800a454:	d122      	bne.n	800a49c <_dtoa_r+0xabc>
 800a456:	2a00      	cmp	r2, #0
 800a458:	ddee      	ble.n	800a438 <_dtoa_r+0xa58>
 800a45a:	ee18 1a10 	vmov	r1, s16
 800a45e:	2201      	movs	r2, #1
 800a460:	4620      	mov	r0, r4
 800a462:	f000 fad7 	bl	800aa14 <__lshift>
 800a466:	4631      	mov	r1, r6
 800a468:	ee08 0a10 	vmov	s16, r0
 800a46c:	f000 fb42 	bl	800aaf4 <__mcmp>
 800a470:	2800      	cmp	r0, #0
 800a472:	dc03      	bgt.n	800a47c <_dtoa_r+0xa9c>
 800a474:	d1e0      	bne.n	800a438 <_dtoa_r+0xa58>
 800a476:	f01a 0f01 	tst.w	sl, #1
 800a47a:	d0dd      	beq.n	800a438 <_dtoa_r+0xa58>
 800a47c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a480:	d1d7      	bne.n	800a432 <_dtoa_r+0xa52>
 800a482:	2339      	movs	r3, #57	; 0x39
 800a484:	f88b 3000 	strb.w	r3, [fp]
 800a488:	462b      	mov	r3, r5
 800a48a:	461d      	mov	r5, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a492:	2a39      	cmp	r2, #57	; 0x39
 800a494:	d071      	beq.n	800a57a <_dtoa_r+0xb9a>
 800a496:	3201      	adds	r2, #1
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	e746      	b.n	800a32a <_dtoa_r+0x94a>
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	dd07      	ble.n	800a4b0 <_dtoa_r+0xad0>
 800a4a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4a4:	d0ed      	beq.n	800a482 <_dtoa_r+0xaa2>
 800a4a6:	f10a 0301 	add.w	r3, sl, #1
 800a4aa:	f88b 3000 	strb.w	r3, [fp]
 800a4ae:	e73c      	b.n	800a32a <_dtoa_r+0x94a>
 800a4b0:	9b05      	ldr	r3, [sp, #20]
 800a4b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4b6:	4599      	cmp	r9, r3
 800a4b8:	d047      	beq.n	800a54a <_dtoa_r+0xb6a>
 800a4ba:	ee18 1a10 	vmov	r1, s16
 800a4be:	2300      	movs	r3, #0
 800a4c0:	220a      	movs	r2, #10
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f8f6 	bl	800a6b4 <__multadd>
 800a4c8:	45b8      	cmp	r8, r7
 800a4ca:	ee08 0a10 	vmov	s16, r0
 800a4ce:	f04f 0300 	mov.w	r3, #0
 800a4d2:	f04f 020a 	mov.w	r2, #10
 800a4d6:	4641      	mov	r1, r8
 800a4d8:	4620      	mov	r0, r4
 800a4da:	d106      	bne.n	800a4ea <_dtoa_r+0xb0a>
 800a4dc:	f000 f8ea 	bl	800a6b4 <__multadd>
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	4607      	mov	r7, r0
 800a4e4:	f109 0901 	add.w	r9, r9, #1
 800a4e8:	e772      	b.n	800a3d0 <_dtoa_r+0x9f0>
 800a4ea:	f000 f8e3 	bl	800a6b4 <__multadd>
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f8dc 	bl	800a6b4 <__multadd>
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	e7f1      	b.n	800a4e4 <_dtoa_r+0xb04>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	9302      	str	r3, [sp, #8]
 800a504:	9d01      	ldr	r5, [sp, #4]
 800a506:	ee18 0a10 	vmov	r0, s16
 800a50a:	4631      	mov	r1, r6
 800a50c:	f7ff f9da 	bl	80098c4 <quorem>
 800a510:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	f805 ab01 	strb.w	sl, [r5], #1
 800a51a:	1aea      	subs	r2, r5, r3
 800a51c:	9b02      	ldr	r3, [sp, #8]
 800a51e:	4293      	cmp	r3, r2
 800a520:	dd09      	ble.n	800a536 <_dtoa_r+0xb56>
 800a522:	ee18 1a10 	vmov	r1, s16
 800a526:	2300      	movs	r3, #0
 800a528:	220a      	movs	r2, #10
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f8c2 	bl	800a6b4 <__multadd>
 800a530:	ee08 0a10 	vmov	s16, r0
 800a534:	e7e7      	b.n	800a506 <_dtoa_r+0xb26>
 800a536:	9b02      	ldr	r3, [sp, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bfc8      	it	gt
 800a53c:	461d      	movgt	r5, r3
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	bfd8      	it	le
 800a542:	2501      	movle	r5, #1
 800a544:	441d      	add	r5, r3
 800a546:	f04f 0800 	mov.w	r8, #0
 800a54a:	ee18 1a10 	vmov	r1, s16
 800a54e:	2201      	movs	r2, #1
 800a550:	4620      	mov	r0, r4
 800a552:	f000 fa5f 	bl	800aa14 <__lshift>
 800a556:	4631      	mov	r1, r6
 800a558:	ee08 0a10 	vmov	s16, r0
 800a55c:	f000 faca 	bl	800aaf4 <__mcmp>
 800a560:	2800      	cmp	r0, #0
 800a562:	dc91      	bgt.n	800a488 <_dtoa_r+0xaa8>
 800a564:	d102      	bne.n	800a56c <_dtoa_r+0xb8c>
 800a566:	f01a 0f01 	tst.w	sl, #1
 800a56a:	d18d      	bne.n	800a488 <_dtoa_r+0xaa8>
 800a56c:	462b      	mov	r3, r5
 800a56e:	461d      	mov	r5, r3
 800a570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a574:	2a30      	cmp	r2, #48	; 0x30
 800a576:	d0fa      	beq.n	800a56e <_dtoa_r+0xb8e>
 800a578:	e6d7      	b.n	800a32a <_dtoa_r+0x94a>
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d184      	bne.n	800a48a <_dtoa_r+0xaaa>
 800a580:	9b00      	ldr	r3, [sp, #0]
 800a582:	3301      	adds	r3, #1
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	2331      	movs	r3, #49	; 0x31
 800a588:	7013      	strb	r3, [r2, #0]
 800a58a:	e6ce      	b.n	800a32a <_dtoa_r+0x94a>
 800a58c:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <_dtoa_r+0xbd4>)
 800a58e:	f7ff ba95 	b.w	8009abc <_dtoa_r+0xdc>
 800a592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a594:	2b00      	cmp	r3, #0
 800a596:	f47f aa6e 	bne.w	8009a76 <_dtoa_r+0x96>
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <_dtoa_r+0xbd8>)
 800a59c:	f7ff ba8e 	b.w	8009abc <_dtoa_r+0xdc>
 800a5a0:	9b02      	ldr	r3, [sp, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dcae      	bgt.n	800a504 <_dtoa_r+0xb24>
 800a5a6:	9b06      	ldr	r3, [sp, #24]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	f73f aea8 	bgt.w	800a2fe <_dtoa_r+0x91e>
 800a5ae:	e7a9      	b.n	800a504 <_dtoa_r+0xb24>
 800a5b0:	0800c0a3 	.word	0x0800c0a3
 800a5b4:	0800c000 	.word	0x0800c000
 800a5b8:	0800c024 	.word	0x0800c024

0800a5bc <_localeconv_r>:
 800a5bc:	4800      	ldr	r0, [pc, #0]	; (800a5c0 <_localeconv_r+0x4>)
 800a5be:	4770      	bx	lr
 800a5c0:	20000178 	.word	0x20000178

0800a5c4 <malloc>:
 800a5c4:	4b02      	ldr	r3, [pc, #8]	; (800a5d0 <malloc+0xc>)
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	f000 bc17 	b.w	800adfc <_malloc_r>
 800a5ce:	bf00      	nop
 800a5d0:	20000024 	.word	0x20000024

0800a5d4 <memcpy>:
 800a5d4:	440a      	add	r2, r1
 800a5d6:	4291      	cmp	r1, r2
 800a5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5dc:	d100      	bne.n	800a5e0 <memcpy+0xc>
 800a5de:	4770      	bx	lr
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ea:	4291      	cmp	r1, r2
 800a5ec:	d1f9      	bne.n	800a5e2 <memcpy+0xe>
 800a5ee:	bd10      	pop	{r4, pc}

0800a5f0 <_Balloc>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	b976      	cbnz	r6, 800a618 <_Balloc+0x28>
 800a5fa:	2010      	movs	r0, #16
 800a5fc:	f7ff ffe2 	bl	800a5c4 <malloc>
 800a600:	4602      	mov	r2, r0
 800a602:	6260      	str	r0, [r4, #36]	; 0x24
 800a604:	b920      	cbnz	r0, 800a610 <_Balloc+0x20>
 800a606:	4b18      	ldr	r3, [pc, #96]	; (800a668 <_Balloc+0x78>)
 800a608:	4818      	ldr	r0, [pc, #96]	; (800a66c <_Balloc+0x7c>)
 800a60a:	2166      	movs	r1, #102	; 0x66
 800a60c:	f000 fdd6 	bl	800b1bc <__assert_func>
 800a610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a614:	6006      	str	r6, [r0, #0]
 800a616:	60c6      	str	r6, [r0, #12]
 800a618:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a61a:	68f3      	ldr	r3, [r6, #12]
 800a61c:	b183      	cbz	r3, 800a640 <_Balloc+0x50>
 800a61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a626:	b9b8      	cbnz	r0, 800a658 <_Balloc+0x68>
 800a628:	2101      	movs	r1, #1
 800a62a:	fa01 f605 	lsl.w	r6, r1, r5
 800a62e:	1d72      	adds	r2, r6, #5
 800a630:	0092      	lsls	r2, r2, #2
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fb60 	bl	800acf8 <_calloc_r>
 800a638:	b160      	cbz	r0, 800a654 <_Balloc+0x64>
 800a63a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a63e:	e00e      	b.n	800a65e <_Balloc+0x6e>
 800a640:	2221      	movs	r2, #33	; 0x21
 800a642:	2104      	movs	r1, #4
 800a644:	4620      	mov	r0, r4
 800a646:	f000 fb57 	bl	800acf8 <_calloc_r>
 800a64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a64c:	60f0      	str	r0, [r6, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e4      	bne.n	800a61e <_Balloc+0x2e>
 800a654:	2000      	movs	r0, #0
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	6802      	ldr	r2, [r0, #0]
 800a65a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a65e:	2300      	movs	r3, #0
 800a660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a664:	e7f7      	b.n	800a656 <_Balloc+0x66>
 800a666:	bf00      	nop
 800a668:	0800c031 	.word	0x0800c031
 800a66c:	0800c0b4 	.word	0x0800c0b4

0800a670 <_Bfree>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a674:	4605      	mov	r5, r0
 800a676:	460c      	mov	r4, r1
 800a678:	b976      	cbnz	r6, 800a698 <_Bfree+0x28>
 800a67a:	2010      	movs	r0, #16
 800a67c:	f7ff ffa2 	bl	800a5c4 <malloc>
 800a680:	4602      	mov	r2, r0
 800a682:	6268      	str	r0, [r5, #36]	; 0x24
 800a684:	b920      	cbnz	r0, 800a690 <_Bfree+0x20>
 800a686:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <_Bfree+0x3c>)
 800a688:	4809      	ldr	r0, [pc, #36]	; (800a6b0 <_Bfree+0x40>)
 800a68a:	218a      	movs	r1, #138	; 0x8a
 800a68c:	f000 fd96 	bl	800b1bc <__assert_func>
 800a690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a694:	6006      	str	r6, [r0, #0]
 800a696:	60c6      	str	r6, [r0, #12]
 800a698:	b13c      	cbz	r4, 800a6aa <_Bfree+0x3a>
 800a69a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a69c:	6862      	ldr	r2, [r4, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6a4:	6021      	str	r1, [r4, #0]
 800a6a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	0800c031 	.word	0x0800c031
 800a6b0:	0800c0b4 	.word	0x0800c0b4

0800a6b4 <__multadd>:
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	690d      	ldr	r5, [r1, #16]
 800a6ba:	4607      	mov	r7, r0
 800a6bc:	460c      	mov	r4, r1
 800a6be:	461e      	mov	r6, r3
 800a6c0:	f101 0c14 	add.w	ip, r1, #20
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ca:	b299      	uxth	r1, r3
 800a6cc:	fb02 6101 	mla	r1, r2, r1, r6
 800a6d0:	0c1e      	lsrs	r6, r3, #16
 800a6d2:	0c0b      	lsrs	r3, r1, #16
 800a6d4:	fb02 3306 	mla	r3, r2, r6, r3
 800a6d8:	b289      	uxth	r1, r1
 800a6da:	3001      	adds	r0, #1
 800a6dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6e0:	4285      	cmp	r5, r0
 800a6e2:	f84c 1b04 	str.w	r1, [ip], #4
 800a6e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6ea:	dcec      	bgt.n	800a6c6 <__multadd+0x12>
 800a6ec:	b30e      	cbz	r6, 800a732 <__multadd+0x7e>
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dc19      	bgt.n	800a728 <__multadd+0x74>
 800a6f4:	6861      	ldr	r1, [r4, #4]
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	f7ff ff79 	bl	800a5f0 <_Balloc>
 800a6fe:	4680      	mov	r8, r0
 800a700:	b928      	cbnz	r0, 800a70e <__multadd+0x5a>
 800a702:	4602      	mov	r2, r0
 800a704:	4b0c      	ldr	r3, [pc, #48]	; (800a738 <__multadd+0x84>)
 800a706:	480d      	ldr	r0, [pc, #52]	; (800a73c <__multadd+0x88>)
 800a708:	21b5      	movs	r1, #181	; 0xb5
 800a70a:	f000 fd57 	bl	800b1bc <__assert_func>
 800a70e:	6922      	ldr	r2, [r4, #16]
 800a710:	3202      	adds	r2, #2
 800a712:	f104 010c 	add.w	r1, r4, #12
 800a716:	0092      	lsls	r2, r2, #2
 800a718:	300c      	adds	r0, #12
 800a71a:	f7ff ff5b 	bl	800a5d4 <memcpy>
 800a71e:	4621      	mov	r1, r4
 800a720:	4638      	mov	r0, r7
 800a722:	f7ff ffa5 	bl	800a670 <_Bfree>
 800a726:	4644      	mov	r4, r8
 800a728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a72c:	3501      	adds	r5, #1
 800a72e:	615e      	str	r6, [r3, #20]
 800a730:	6125      	str	r5, [r4, #16]
 800a732:	4620      	mov	r0, r4
 800a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a738:	0800c0a3 	.word	0x0800c0a3
 800a73c:	0800c0b4 	.word	0x0800c0b4

0800a740 <__hi0bits>:
 800a740:	0c03      	lsrs	r3, r0, #16
 800a742:	041b      	lsls	r3, r3, #16
 800a744:	b9d3      	cbnz	r3, 800a77c <__hi0bits+0x3c>
 800a746:	0400      	lsls	r0, r0, #16
 800a748:	2310      	movs	r3, #16
 800a74a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a74e:	bf04      	itt	eq
 800a750:	0200      	lsleq	r0, r0, #8
 800a752:	3308      	addeq	r3, #8
 800a754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a758:	bf04      	itt	eq
 800a75a:	0100      	lsleq	r0, r0, #4
 800a75c:	3304      	addeq	r3, #4
 800a75e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a762:	bf04      	itt	eq
 800a764:	0080      	lsleq	r0, r0, #2
 800a766:	3302      	addeq	r3, #2
 800a768:	2800      	cmp	r0, #0
 800a76a:	db05      	blt.n	800a778 <__hi0bits+0x38>
 800a76c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a770:	f103 0301 	add.w	r3, r3, #1
 800a774:	bf08      	it	eq
 800a776:	2320      	moveq	r3, #32
 800a778:	4618      	mov	r0, r3
 800a77a:	4770      	bx	lr
 800a77c:	2300      	movs	r3, #0
 800a77e:	e7e4      	b.n	800a74a <__hi0bits+0xa>

0800a780 <__lo0bits>:
 800a780:	6803      	ldr	r3, [r0, #0]
 800a782:	f013 0207 	ands.w	r2, r3, #7
 800a786:	4601      	mov	r1, r0
 800a788:	d00b      	beq.n	800a7a2 <__lo0bits+0x22>
 800a78a:	07da      	lsls	r2, r3, #31
 800a78c:	d423      	bmi.n	800a7d6 <__lo0bits+0x56>
 800a78e:	0798      	lsls	r0, r3, #30
 800a790:	bf49      	itett	mi
 800a792:	085b      	lsrmi	r3, r3, #1
 800a794:	089b      	lsrpl	r3, r3, #2
 800a796:	2001      	movmi	r0, #1
 800a798:	600b      	strmi	r3, [r1, #0]
 800a79a:	bf5c      	itt	pl
 800a79c:	600b      	strpl	r3, [r1, #0]
 800a79e:	2002      	movpl	r0, #2
 800a7a0:	4770      	bx	lr
 800a7a2:	b298      	uxth	r0, r3
 800a7a4:	b9a8      	cbnz	r0, 800a7d2 <__lo0bits+0x52>
 800a7a6:	0c1b      	lsrs	r3, r3, #16
 800a7a8:	2010      	movs	r0, #16
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	b90a      	cbnz	r2, 800a7b2 <__lo0bits+0x32>
 800a7ae:	3008      	adds	r0, #8
 800a7b0:	0a1b      	lsrs	r3, r3, #8
 800a7b2:	071a      	lsls	r2, r3, #28
 800a7b4:	bf04      	itt	eq
 800a7b6:	091b      	lsreq	r3, r3, #4
 800a7b8:	3004      	addeq	r0, #4
 800a7ba:	079a      	lsls	r2, r3, #30
 800a7bc:	bf04      	itt	eq
 800a7be:	089b      	lsreq	r3, r3, #2
 800a7c0:	3002      	addeq	r0, #2
 800a7c2:	07da      	lsls	r2, r3, #31
 800a7c4:	d403      	bmi.n	800a7ce <__lo0bits+0x4e>
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	f100 0001 	add.w	r0, r0, #1
 800a7cc:	d005      	beq.n	800a7da <__lo0bits+0x5a>
 800a7ce:	600b      	str	r3, [r1, #0]
 800a7d0:	4770      	bx	lr
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	e7e9      	b.n	800a7aa <__lo0bits+0x2a>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	4770      	bx	lr
 800a7da:	2020      	movs	r0, #32
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <__i2b>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	f7ff ff03 	bl	800a5f0 <_Balloc>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <__i2b+0x1a>
 800a7ee:	4b05      	ldr	r3, [pc, #20]	; (800a804 <__i2b+0x24>)
 800a7f0:	4805      	ldr	r0, [pc, #20]	; (800a808 <__i2b+0x28>)
 800a7f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7f6:	f000 fce1 	bl	800b1bc <__assert_func>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	6144      	str	r4, [r0, #20]
 800a7fe:	6103      	str	r3, [r0, #16]
 800a800:	bd10      	pop	{r4, pc}
 800a802:	bf00      	nop
 800a804:	0800c0a3 	.word	0x0800c0a3
 800a808:	0800c0b4 	.word	0x0800c0b4

0800a80c <__multiply>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	4691      	mov	r9, r2
 800a812:	690a      	ldr	r2, [r1, #16]
 800a814:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a818:	429a      	cmp	r2, r3
 800a81a:	bfb8      	it	lt
 800a81c:	460b      	movlt	r3, r1
 800a81e:	460c      	mov	r4, r1
 800a820:	bfbc      	itt	lt
 800a822:	464c      	movlt	r4, r9
 800a824:	4699      	movlt	r9, r3
 800a826:	6927      	ldr	r7, [r4, #16]
 800a828:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a82c:	68a3      	ldr	r3, [r4, #8]
 800a82e:	6861      	ldr	r1, [r4, #4]
 800a830:	eb07 060a 	add.w	r6, r7, sl
 800a834:	42b3      	cmp	r3, r6
 800a836:	b085      	sub	sp, #20
 800a838:	bfb8      	it	lt
 800a83a:	3101      	addlt	r1, #1
 800a83c:	f7ff fed8 	bl	800a5f0 <_Balloc>
 800a840:	b930      	cbnz	r0, 800a850 <__multiply+0x44>
 800a842:	4602      	mov	r2, r0
 800a844:	4b44      	ldr	r3, [pc, #272]	; (800a958 <__multiply+0x14c>)
 800a846:	4845      	ldr	r0, [pc, #276]	; (800a95c <__multiply+0x150>)
 800a848:	f240 115d 	movw	r1, #349	; 0x15d
 800a84c:	f000 fcb6 	bl	800b1bc <__assert_func>
 800a850:	f100 0514 	add.w	r5, r0, #20
 800a854:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a858:	462b      	mov	r3, r5
 800a85a:	2200      	movs	r2, #0
 800a85c:	4543      	cmp	r3, r8
 800a85e:	d321      	bcc.n	800a8a4 <__multiply+0x98>
 800a860:	f104 0314 	add.w	r3, r4, #20
 800a864:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a868:	f109 0314 	add.w	r3, r9, #20
 800a86c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a870:	9202      	str	r2, [sp, #8]
 800a872:	1b3a      	subs	r2, r7, r4
 800a874:	3a15      	subs	r2, #21
 800a876:	f022 0203 	bic.w	r2, r2, #3
 800a87a:	3204      	adds	r2, #4
 800a87c:	f104 0115 	add.w	r1, r4, #21
 800a880:	428f      	cmp	r7, r1
 800a882:	bf38      	it	cc
 800a884:	2204      	movcc	r2, #4
 800a886:	9201      	str	r2, [sp, #4]
 800a888:	9a02      	ldr	r2, [sp, #8]
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d80c      	bhi.n	800a8aa <__multiply+0x9e>
 800a890:	2e00      	cmp	r6, #0
 800a892:	dd03      	ble.n	800a89c <__multiply+0x90>
 800a894:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05a      	beq.n	800a952 <__multiply+0x146>
 800a89c:	6106      	str	r6, [r0, #16]
 800a89e:	b005      	add	sp, #20
 800a8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a4:	f843 2b04 	str.w	r2, [r3], #4
 800a8a8:	e7d8      	b.n	800a85c <__multiply+0x50>
 800a8aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8ae:	f1ba 0f00 	cmp.w	sl, #0
 800a8b2:	d024      	beq.n	800a8fe <__multiply+0xf2>
 800a8b4:	f104 0e14 	add.w	lr, r4, #20
 800a8b8:	46a9      	mov	r9, r5
 800a8ba:	f04f 0c00 	mov.w	ip, #0
 800a8be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8c2:	f8d9 1000 	ldr.w	r1, [r9]
 800a8c6:	fa1f fb82 	uxth.w	fp, r2
 800a8ca:	b289      	uxth	r1, r1
 800a8cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a8d8:	4461      	add	r1, ip
 800a8da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8de:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8e6:	b289      	uxth	r1, r1
 800a8e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8ec:	4577      	cmp	r7, lr
 800a8ee:	f849 1b04 	str.w	r1, [r9], #4
 800a8f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8f6:	d8e2      	bhi.n	800a8be <__multiply+0xb2>
 800a8f8:	9a01      	ldr	r2, [sp, #4]
 800a8fa:	f845 c002 	str.w	ip, [r5, r2]
 800a8fe:	9a03      	ldr	r2, [sp, #12]
 800a900:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a904:	3304      	adds	r3, #4
 800a906:	f1b9 0f00 	cmp.w	r9, #0
 800a90a:	d020      	beq.n	800a94e <__multiply+0x142>
 800a90c:	6829      	ldr	r1, [r5, #0]
 800a90e:	f104 0c14 	add.w	ip, r4, #20
 800a912:	46ae      	mov	lr, r5
 800a914:	f04f 0a00 	mov.w	sl, #0
 800a918:	f8bc b000 	ldrh.w	fp, [ip]
 800a91c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a920:	fb09 220b 	mla	r2, r9, fp, r2
 800a924:	4492      	add	sl, r2
 800a926:	b289      	uxth	r1, r1
 800a928:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a92c:	f84e 1b04 	str.w	r1, [lr], #4
 800a930:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a934:	f8be 1000 	ldrh.w	r1, [lr]
 800a938:	0c12      	lsrs	r2, r2, #16
 800a93a:	fb09 1102 	mla	r1, r9, r2, r1
 800a93e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a942:	4567      	cmp	r7, ip
 800a944:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a948:	d8e6      	bhi.n	800a918 <__multiply+0x10c>
 800a94a:	9a01      	ldr	r2, [sp, #4]
 800a94c:	50a9      	str	r1, [r5, r2]
 800a94e:	3504      	adds	r5, #4
 800a950:	e79a      	b.n	800a888 <__multiply+0x7c>
 800a952:	3e01      	subs	r6, #1
 800a954:	e79c      	b.n	800a890 <__multiply+0x84>
 800a956:	bf00      	nop
 800a958:	0800c0a3 	.word	0x0800c0a3
 800a95c:	0800c0b4 	.word	0x0800c0b4

0800a960 <__pow5mult>:
 800a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a964:	4615      	mov	r5, r2
 800a966:	f012 0203 	ands.w	r2, r2, #3
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	d007      	beq.n	800a980 <__pow5mult+0x20>
 800a970:	4c25      	ldr	r4, [pc, #148]	; (800aa08 <__pow5mult+0xa8>)
 800a972:	3a01      	subs	r2, #1
 800a974:	2300      	movs	r3, #0
 800a976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a97a:	f7ff fe9b 	bl	800a6b4 <__multadd>
 800a97e:	4607      	mov	r7, r0
 800a980:	10ad      	asrs	r5, r5, #2
 800a982:	d03d      	beq.n	800aa00 <__pow5mult+0xa0>
 800a984:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a986:	b97c      	cbnz	r4, 800a9a8 <__pow5mult+0x48>
 800a988:	2010      	movs	r0, #16
 800a98a:	f7ff fe1b 	bl	800a5c4 <malloc>
 800a98e:	4602      	mov	r2, r0
 800a990:	6270      	str	r0, [r6, #36]	; 0x24
 800a992:	b928      	cbnz	r0, 800a9a0 <__pow5mult+0x40>
 800a994:	4b1d      	ldr	r3, [pc, #116]	; (800aa0c <__pow5mult+0xac>)
 800a996:	481e      	ldr	r0, [pc, #120]	; (800aa10 <__pow5mult+0xb0>)
 800a998:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a99c:	f000 fc0e 	bl	800b1bc <__assert_func>
 800a9a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9a4:	6004      	str	r4, [r0, #0]
 800a9a6:	60c4      	str	r4, [r0, #12]
 800a9a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9b0:	b94c      	cbnz	r4, 800a9c6 <__pow5mult+0x66>
 800a9b2:	f240 2171 	movw	r1, #625	; 0x271
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7ff ff12 	bl	800a7e0 <__i2b>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	6003      	str	r3, [r0, #0]
 800a9c6:	f04f 0900 	mov.w	r9, #0
 800a9ca:	07eb      	lsls	r3, r5, #31
 800a9cc:	d50a      	bpl.n	800a9e4 <__pow5mult+0x84>
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ff1a 	bl	800a80c <__multiply>
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7ff fe47 	bl	800a670 <_Bfree>
 800a9e2:	4647      	mov	r7, r8
 800a9e4:	106d      	asrs	r5, r5, #1
 800a9e6:	d00b      	beq.n	800aa00 <__pow5mult+0xa0>
 800a9e8:	6820      	ldr	r0, [r4, #0]
 800a9ea:	b938      	cbnz	r0, 800a9fc <__pow5mult+0x9c>
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff ff0b 	bl	800a80c <__multiply>
 800a9f6:	6020      	str	r0, [r4, #0]
 800a9f8:	f8c0 9000 	str.w	r9, [r0]
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	e7e4      	b.n	800a9ca <__pow5mult+0x6a>
 800aa00:	4638      	mov	r0, r7
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	bf00      	nop
 800aa08:	0800c200 	.word	0x0800c200
 800aa0c:	0800c031 	.word	0x0800c031
 800aa10:	0800c0b4 	.word	0x0800c0b4

0800aa14 <__lshift>:
 800aa14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa18:	460c      	mov	r4, r1
 800aa1a:	6849      	ldr	r1, [r1, #4]
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	4607      	mov	r7, r0
 800aa26:	4691      	mov	r9, r2
 800aa28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa2c:	f108 0601 	add.w	r6, r8, #1
 800aa30:	42b3      	cmp	r3, r6
 800aa32:	db0b      	blt.n	800aa4c <__lshift+0x38>
 800aa34:	4638      	mov	r0, r7
 800aa36:	f7ff fddb 	bl	800a5f0 <_Balloc>
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	b948      	cbnz	r0, 800aa52 <__lshift+0x3e>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	4b2a      	ldr	r3, [pc, #168]	; (800aaec <__lshift+0xd8>)
 800aa42:	482b      	ldr	r0, [pc, #172]	; (800aaf0 <__lshift+0xdc>)
 800aa44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa48:	f000 fbb8 	bl	800b1bc <__assert_func>
 800aa4c:	3101      	adds	r1, #1
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	e7ee      	b.n	800aa30 <__lshift+0x1c>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f100 0114 	add.w	r1, r0, #20
 800aa58:	f100 0210 	add.w	r2, r0, #16
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	4553      	cmp	r3, sl
 800aa60:	db37      	blt.n	800aad2 <__lshift+0xbe>
 800aa62:	6920      	ldr	r0, [r4, #16]
 800aa64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa68:	f104 0314 	add.w	r3, r4, #20
 800aa6c:	f019 091f 	ands.w	r9, r9, #31
 800aa70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa78:	d02f      	beq.n	800aada <__lshift+0xc6>
 800aa7a:	f1c9 0e20 	rsb	lr, r9, #32
 800aa7e:	468a      	mov	sl, r1
 800aa80:	f04f 0c00 	mov.w	ip, #0
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	fa02 f209 	lsl.w	r2, r2, r9
 800aa8a:	ea42 020c 	orr.w	r2, r2, ip
 800aa8e:	f84a 2b04 	str.w	r2, [sl], #4
 800aa92:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa96:	4298      	cmp	r0, r3
 800aa98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa9c:	d8f2      	bhi.n	800aa84 <__lshift+0x70>
 800aa9e:	1b03      	subs	r3, r0, r4
 800aaa0:	3b15      	subs	r3, #21
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	f104 0215 	add.w	r2, r4, #21
 800aaac:	4290      	cmp	r0, r2
 800aaae:	bf38      	it	cc
 800aab0:	2304      	movcc	r3, #4
 800aab2:	f841 c003 	str.w	ip, [r1, r3]
 800aab6:	f1bc 0f00 	cmp.w	ip, #0
 800aaba:	d001      	beq.n	800aac0 <__lshift+0xac>
 800aabc:	f108 0602 	add.w	r6, r8, #2
 800aac0:	3e01      	subs	r6, #1
 800aac2:	4638      	mov	r0, r7
 800aac4:	612e      	str	r6, [r5, #16]
 800aac6:	4621      	mov	r1, r4
 800aac8:	f7ff fdd2 	bl	800a670 <_Bfree>
 800aacc:	4628      	mov	r0, r5
 800aace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aad6:	3301      	adds	r3, #1
 800aad8:	e7c1      	b.n	800aa5e <__lshift+0x4a>
 800aada:	3904      	subs	r1, #4
 800aadc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aae4:	4298      	cmp	r0, r3
 800aae6:	d8f9      	bhi.n	800aadc <__lshift+0xc8>
 800aae8:	e7ea      	b.n	800aac0 <__lshift+0xac>
 800aaea:	bf00      	nop
 800aaec:	0800c0a3 	.word	0x0800c0a3
 800aaf0:	0800c0b4 	.word	0x0800c0b4

0800aaf4 <__mcmp>:
 800aaf4:	b530      	push	{r4, r5, lr}
 800aaf6:	6902      	ldr	r2, [r0, #16]
 800aaf8:	690c      	ldr	r4, [r1, #16]
 800aafa:	1b12      	subs	r2, r2, r4
 800aafc:	d10e      	bne.n	800ab1c <__mcmp+0x28>
 800aafe:	f100 0314 	add.w	r3, r0, #20
 800ab02:	3114      	adds	r1, #20
 800ab04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab14:	42a5      	cmp	r5, r4
 800ab16:	d003      	beq.n	800ab20 <__mcmp+0x2c>
 800ab18:	d305      	bcc.n	800ab26 <__mcmp+0x32>
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	bd30      	pop	{r4, r5, pc}
 800ab20:	4283      	cmp	r3, r0
 800ab22:	d3f3      	bcc.n	800ab0c <__mcmp+0x18>
 800ab24:	e7fa      	b.n	800ab1c <__mcmp+0x28>
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2a:	e7f7      	b.n	800ab1c <__mcmp+0x28>

0800ab2c <__mdiff>:
 800ab2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	460c      	mov	r4, r1
 800ab32:	4606      	mov	r6, r0
 800ab34:	4611      	mov	r1, r2
 800ab36:	4620      	mov	r0, r4
 800ab38:	4690      	mov	r8, r2
 800ab3a:	f7ff ffdb 	bl	800aaf4 <__mcmp>
 800ab3e:	1e05      	subs	r5, r0, #0
 800ab40:	d110      	bne.n	800ab64 <__mdiff+0x38>
 800ab42:	4629      	mov	r1, r5
 800ab44:	4630      	mov	r0, r6
 800ab46:	f7ff fd53 	bl	800a5f0 <_Balloc>
 800ab4a:	b930      	cbnz	r0, 800ab5a <__mdiff+0x2e>
 800ab4c:	4b3a      	ldr	r3, [pc, #232]	; (800ac38 <__mdiff+0x10c>)
 800ab4e:	4602      	mov	r2, r0
 800ab50:	f240 2132 	movw	r1, #562	; 0x232
 800ab54:	4839      	ldr	r0, [pc, #228]	; (800ac3c <__mdiff+0x110>)
 800ab56:	f000 fb31 	bl	800b1bc <__assert_func>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab64:	bfa4      	itt	ge
 800ab66:	4643      	movge	r3, r8
 800ab68:	46a0      	movge	r8, r4
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab70:	bfa6      	itte	ge
 800ab72:	461c      	movge	r4, r3
 800ab74:	2500      	movge	r5, #0
 800ab76:	2501      	movlt	r5, #1
 800ab78:	f7ff fd3a 	bl	800a5f0 <_Balloc>
 800ab7c:	b920      	cbnz	r0, 800ab88 <__mdiff+0x5c>
 800ab7e:	4b2e      	ldr	r3, [pc, #184]	; (800ac38 <__mdiff+0x10c>)
 800ab80:	4602      	mov	r2, r0
 800ab82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab86:	e7e5      	b.n	800ab54 <__mdiff+0x28>
 800ab88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab8c:	6926      	ldr	r6, [r4, #16]
 800ab8e:	60c5      	str	r5, [r0, #12]
 800ab90:	f104 0914 	add.w	r9, r4, #20
 800ab94:	f108 0514 	add.w	r5, r8, #20
 800ab98:	f100 0e14 	add.w	lr, r0, #20
 800ab9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aba4:	f108 0210 	add.w	r2, r8, #16
 800aba8:	46f2      	mov	sl, lr
 800abaa:	2100      	movs	r1, #0
 800abac:	f859 3b04 	ldr.w	r3, [r9], #4
 800abb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abb4:	fa1f f883 	uxth.w	r8, r3
 800abb8:	fa11 f18b 	uxtah	r1, r1, fp
 800abbc:	0c1b      	lsrs	r3, r3, #16
 800abbe:	eba1 0808 	sub.w	r8, r1, r8
 800abc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abca:	fa1f f888 	uxth.w	r8, r8
 800abce:	1419      	asrs	r1, r3, #16
 800abd0:	454e      	cmp	r6, r9
 800abd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abd6:	f84a 3b04 	str.w	r3, [sl], #4
 800abda:	d8e7      	bhi.n	800abac <__mdiff+0x80>
 800abdc:	1b33      	subs	r3, r6, r4
 800abde:	3b15      	subs	r3, #21
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	3304      	adds	r3, #4
 800abe6:	3415      	adds	r4, #21
 800abe8:	42a6      	cmp	r6, r4
 800abea:	bf38      	it	cc
 800abec:	2304      	movcc	r3, #4
 800abee:	441d      	add	r5, r3
 800abf0:	4473      	add	r3, lr
 800abf2:	469e      	mov	lr, r3
 800abf4:	462e      	mov	r6, r5
 800abf6:	4566      	cmp	r6, ip
 800abf8:	d30e      	bcc.n	800ac18 <__mdiff+0xec>
 800abfa:	f10c 0203 	add.w	r2, ip, #3
 800abfe:	1b52      	subs	r2, r2, r5
 800ac00:	f022 0203 	bic.w	r2, r2, #3
 800ac04:	3d03      	subs	r5, #3
 800ac06:	45ac      	cmp	ip, r5
 800ac08:	bf38      	it	cc
 800ac0a:	2200      	movcc	r2, #0
 800ac0c:	441a      	add	r2, r3
 800ac0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac12:	b17b      	cbz	r3, 800ac34 <__mdiff+0x108>
 800ac14:	6107      	str	r7, [r0, #16]
 800ac16:	e7a3      	b.n	800ab60 <__mdiff+0x34>
 800ac18:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac1c:	fa11 f288 	uxtah	r2, r1, r8
 800ac20:	1414      	asrs	r4, r2, #16
 800ac22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac26:	b292      	uxth	r2, r2
 800ac28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac2c:	f84e 2b04 	str.w	r2, [lr], #4
 800ac30:	1421      	asrs	r1, r4, #16
 800ac32:	e7e0      	b.n	800abf6 <__mdiff+0xca>
 800ac34:	3f01      	subs	r7, #1
 800ac36:	e7ea      	b.n	800ac0e <__mdiff+0xe2>
 800ac38:	0800c0a3 	.word	0x0800c0a3
 800ac3c:	0800c0b4 	.word	0x0800c0b4

0800ac40 <__d2b>:
 800ac40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac44:	4689      	mov	r9, r1
 800ac46:	2101      	movs	r1, #1
 800ac48:	ec57 6b10 	vmov	r6, r7, d0
 800ac4c:	4690      	mov	r8, r2
 800ac4e:	f7ff fccf 	bl	800a5f0 <_Balloc>
 800ac52:	4604      	mov	r4, r0
 800ac54:	b930      	cbnz	r0, 800ac64 <__d2b+0x24>
 800ac56:	4602      	mov	r2, r0
 800ac58:	4b25      	ldr	r3, [pc, #148]	; (800acf0 <__d2b+0xb0>)
 800ac5a:	4826      	ldr	r0, [pc, #152]	; (800acf4 <__d2b+0xb4>)
 800ac5c:	f240 310a 	movw	r1, #778	; 0x30a
 800ac60:	f000 faac 	bl	800b1bc <__assert_func>
 800ac64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac6c:	bb35      	cbnz	r5, 800acbc <__d2b+0x7c>
 800ac6e:	2e00      	cmp	r6, #0
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	d028      	beq.n	800acc6 <__d2b+0x86>
 800ac74:	4668      	mov	r0, sp
 800ac76:	9600      	str	r6, [sp, #0]
 800ac78:	f7ff fd82 	bl	800a780 <__lo0bits>
 800ac7c:	9900      	ldr	r1, [sp, #0]
 800ac7e:	b300      	cbz	r0, 800acc2 <__d2b+0x82>
 800ac80:	9a01      	ldr	r2, [sp, #4]
 800ac82:	f1c0 0320 	rsb	r3, r0, #32
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	430b      	orrs	r3, r1
 800ac8c:	40c2      	lsrs	r2, r0
 800ac8e:	6163      	str	r3, [r4, #20]
 800ac90:	9201      	str	r2, [sp, #4]
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	61a3      	str	r3, [r4, #24]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bf14      	ite	ne
 800ac9a:	2202      	movne	r2, #2
 800ac9c:	2201      	moveq	r2, #1
 800ac9e:	6122      	str	r2, [r4, #16]
 800aca0:	b1d5      	cbz	r5, 800acd8 <__d2b+0x98>
 800aca2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aca6:	4405      	add	r5, r0
 800aca8:	f8c9 5000 	str.w	r5, [r9]
 800acac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acb0:	f8c8 0000 	str.w	r0, [r8]
 800acb4:	4620      	mov	r0, r4
 800acb6:	b003      	add	sp, #12
 800acb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acc0:	e7d5      	b.n	800ac6e <__d2b+0x2e>
 800acc2:	6161      	str	r1, [r4, #20]
 800acc4:	e7e5      	b.n	800ac92 <__d2b+0x52>
 800acc6:	a801      	add	r0, sp, #4
 800acc8:	f7ff fd5a 	bl	800a780 <__lo0bits>
 800accc:	9b01      	ldr	r3, [sp, #4]
 800acce:	6163      	str	r3, [r4, #20]
 800acd0:	2201      	movs	r2, #1
 800acd2:	6122      	str	r2, [r4, #16]
 800acd4:	3020      	adds	r0, #32
 800acd6:	e7e3      	b.n	800aca0 <__d2b+0x60>
 800acd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ace0:	f8c9 0000 	str.w	r0, [r9]
 800ace4:	6918      	ldr	r0, [r3, #16]
 800ace6:	f7ff fd2b 	bl	800a740 <__hi0bits>
 800acea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acee:	e7df      	b.n	800acb0 <__d2b+0x70>
 800acf0:	0800c0a3 	.word	0x0800c0a3
 800acf4:	0800c0b4 	.word	0x0800c0b4

0800acf8 <_calloc_r>:
 800acf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acfa:	fba1 2402 	umull	r2, r4, r1, r2
 800acfe:	b94c      	cbnz	r4, 800ad14 <_calloc_r+0x1c>
 800ad00:	4611      	mov	r1, r2
 800ad02:	9201      	str	r2, [sp, #4]
 800ad04:	f000 f87a 	bl	800adfc <_malloc_r>
 800ad08:	9a01      	ldr	r2, [sp, #4]
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	b930      	cbnz	r0, 800ad1c <_calloc_r+0x24>
 800ad0e:	4628      	mov	r0, r5
 800ad10:	b003      	add	sp, #12
 800ad12:	bd30      	pop	{r4, r5, pc}
 800ad14:	220c      	movs	r2, #12
 800ad16:	6002      	str	r2, [r0, #0]
 800ad18:	2500      	movs	r5, #0
 800ad1a:	e7f8      	b.n	800ad0e <_calloc_r+0x16>
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	f7fe f92b 	bl	8008f78 <memset>
 800ad22:	e7f4      	b.n	800ad0e <_calloc_r+0x16>

0800ad24 <_free_r>:
 800ad24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad26:	2900      	cmp	r1, #0
 800ad28:	d044      	beq.n	800adb4 <_free_r+0x90>
 800ad2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2e:	9001      	str	r0, [sp, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f1a1 0404 	sub.w	r4, r1, #4
 800ad36:	bfb8      	it	lt
 800ad38:	18e4      	addlt	r4, r4, r3
 800ad3a:	f000 fa9b 	bl	800b274 <__malloc_lock>
 800ad3e:	4a1e      	ldr	r2, [pc, #120]	; (800adb8 <_free_r+0x94>)
 800ad40:	9801      	ldr	r0, [sp, #4]
 800ad42:	6813      	ldr	r3, [r2, #0]
 800ad44:	b933      	cbnz	r3, 800ad54 <_free_r+0x30>
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	6014      	str	r4, [r2, #0]
 800ad4a:	b003      	add	sp, #12
 800ad4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad50:	f000 ba96 	b.w	800b280 <__malloc_unlock>
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	d908      	bls.n	800ad6a <_free_r+0x46>
 800ad58:	6825      	ldr	r5, [r4, #0]
 800ad5a:	1961      	adds	r1, r4, r5
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	bf01      	itttt	eq
 800ad60:	6819      	ldreq	r1, [r3, #0]
 800ad62:	685b      	ldreq	r3, [r3, #4]
 800ad64:	1949      	addeq	r1, r1, r5
 800ad66:	6021      	streq	r1, [r4, #0]
 800ad68:	e7ed      	b.n	800ad46 <_free_r+0x22>
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	b10b      	cbz	r3, 800ad74 <_free_r+0x50>
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	d9fa      	bls.n	800ad6a <_free_r+0x46>
 800ad74:	6811      	ldr	r1, [r2, #0]
 800ad76:	1855      	adds	r5, r2, r1
 800ad78:	42a5      	cmp	r5, r4
 800ad7a:	d10b      	bne.n	800ad94 <_free_r+0x70>
 800ad7c:	6824      	ldr	r4, [r4, #0]
 800ad7e:	4421      	add	r1, r4
 800ad80:	1854      	adds	r4, r2, r1
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	6011      	str	r1, [r2, #0]
 800ad86:	d1e0      	bne.n	800ad4a <_free_r+0x26>
 800ad88:	681c      	ldr	r4, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	6053      	str	r3, [r2, #4]
 800ad8e:	4421      	add	r1, r4
 800ad90:	6011      	str	r1, [r2, #0]
 800ad92:	e7da      	b.n	800ad4a <_free_r+0x26>
 800ad94:	d902      	bls.n	800ad9c <_free_r+0x78>
 800ad96:	230c      	movs	r3, #12
 800ad98:	6003      	str	r3, [r0, #0]
 800ad9a:	e7d6      	b.n	800ad4a <_free_r+0x26>
 800ad9c:	6825      	ldr	r5, [r4, #0]
 800ad9e:	1961      	adds	r1, r4, r5
 800ada0:	428b      	cmp	r3, r1
 800ada2:	bf04      	itt	eq
 800ada4:	6819      	ldreq	r1, [r3, #0]
 800ada6:	685b      	ldreq	r3, [r3, #4]
 800ada8:	6063      	str	r3, [r4, #4]
 800adaa:	bf04      	itt	eq
 800adac:	1949      	addeq	r1, r1, r5
 800adae:	6021      	streq	r1, [r4, #0]
 800adb0:	6054      	str	r4, [r2, #4]
 800adb2:	e7ca      	b.n	800ad4a <_free_r+0x26>
 800adb4:	b003      	add	sp, #12
 800adb6:	bd30      	pop	{r4, r5, pc}
 800adb8:	20000a1c 	.word	0x20000a1c

0800adbc <sbrk_aligned>:
 800adbc:	b570      	push	{r4, r5, r6, lr}
 800adbe:	4e0e      	ldr	r6, [pc, #56]	; (800adf8 <sbrk_aligned+0x3c>)
 800adc0:	460c      	mov	r4, r1
 800adc2:	6831      	ldr	r1, [r6, #0]
 800adc4:	4605      	mov	r5, r0
 800adc6:	b911      	cbnz	r1, 800adce <sbrk_aligned+0x12>
 800adc8:	f000 f9e8 	bl	800b19c <_sbrk_r>
 800adcc:	6030      	str	r0, [r6, #0]
 800adce:	4621      	mov	r1, r4
 800add0:	4628      	mov	r0, r5
 800add2:	f000 f9e3 	bl	800b19c <_sbrk_r>
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	d00a      	beq.n	800adf0 <sbrk_aligned+0x34>
 800adda:	1cc4      	adds	r4, r0, #3
 800addc:	f024 0403 	bic.w	r4, r4, #3
 800ade0:	42a0      	cmp	r0, r4
 800ade2:	d007      	beq.n	800adf4 <sbrk_aligned+0x38>
 800ade4:	1a21      	subs	r1, r4, r0
 800ade6:	4628      	mov	r0, r5
 800ade8:	f000 f9d8 	bl	800b19c <_sbrk_r>
 800adec:	3001      	adds	r0, #1
 800adee:	d101      	bne.n	800adf4 <sbrk_aligned+0x38>
 800adf0:	f04f 34ff 	mov.w	r4, #4294967295
 800adf4:	4620      	mov	r0, r4
 800adf6:	bd70      	pop	{r4, r5, r6, pc}
 800adf8:	20000a20 	.word	0x20000a20

0800adfc <_malloc_r>:
 800adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae00:	1ccd      	adds	r5, r1, #3
 800ae02:	f025 0503 	bic.w	r5, r5, #3
 800ae06:	3508      	adds	r5, #8
 800ae08:	2d0c      	cmp	r5, #12
 800ae0a:	bf38      	it	cc
 800ae0c:	250c      	movcc	r5, #12
 800ae0e:	2d00      	cmp	r5, #0
 800ae10:	4607      	mov	r7, r0
 800ae12:	db01      	blt.n	800ae18 <_malloc_r+0x1c>
 800ae14:	42a9      	cmp	r1, r5
 800ae16:	d905      	bls.n	800ae24 <_malloc_r+0x28>
 800ae18:	230c      	movs	r3, #12
 800ae1a:	603b      	str	r3, [r7, #0]
 800ae1c:	2600      	movs	r6, #0
 800ae1e:	4630      	mov	r0, r6
 800ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae24:	4e2e      	ldr	r6, [pc, #184]	; (800aee0 <_malloc_r+0xe4>)
 800ae26:	f000 fa25 	bl	800b274 <__malloc_lock>
 800ae2a:	6833      	ldr	r3, [r6, #0]
 800ae2c:	461c      	mov	r4, r3
 800ae2e:	bb34      	cbnz	r4, 800ae7e <_malloc_r+0x82>
 800ae30:	4629      	mov	r1, r5
 800ae32:	4638      	mov	r0, r7
 800ae34:	f7ff ffc2 	bl	800adbc <sbrk_aligned>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	d14d      	bne.n	800aeda <_malloc_r+0xde>
 800ae3e:	6834      	ldr	r4, [r6, #0]
 800ae40:	4626      	mov	r6, r4
 800ae42:	2e00      	cmp	r6, #0
 800ae44:	d140      	bne.n	800aec8 <_malloc_r+0xcc>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	4631      	mov	r1, r6
 800ae4a:	4638      	mov	r0, r7
 800ae4c:	eb04 0803 	add.w	r8, r4, r3
 800ae50:	f000 f9a4 	bl	800b19c <_sbrk_r>
 800ae54:	4580      	cmp	r8, r0
 800ae56:	d13a      	bne.n	800aece <_malloc_r+0xd2>
 800ae58:	6821      	ldr	r1, [r4, #0]
 800ae5a:	3503      	adds	r5, #3
 800ae5c:	1a6d      	subs	r5, r5, r1
 800ae5e:	f025 0503 	bic.w	r5, r5, #3
 800ae62:	3508      	adds	r5, #8
 800ae64:	2d0c      	cmp	r5, #12
 800ae66:	bf38      	it	cc
 800ae68:	250c      	movcc	r5, #12
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7ff ffa5 	bl	800adbc <sbrk_aligned>
 800ae72:	3001      	adds	r0, #1
 800ae74:	d02b      	beq.n	800aece <_malloc_r+0xd2>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	442b      	add	r3, r5
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	e00e      	b.n	800ae9c <_malloc_r+0xa0>
 800ae7e:	6822      	ldr	r2, [r4, #0]
 800ae80:	1b52      	subs	r2, r2, r5
 800ae82:	d41e      	bmi.n	800aec2 <_malloc_r+0xc6>
 800ae84:	2a0b      	cmp	r2, #11
 800ae86:	d916      	bls.n	800aeb6 <_malloc_r+0xba>
 800ae88:	1961      	adds	r1, r4, r5
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	6025      	str	r5, [r4, #0]
 800ae8e:	bf18      	it	ne
 800ae90:	6059      	strne	r1, [r3, #4]
 800ae92:	6863      	ldr	r3, [r4, #4]
 800ae94:	bf08      	it	eq
 800ae96:	6031      	streq	r1, [r6, #0]
 800ae98:	5162      	str	r2, [r4, r5]
 800ae9a:	604b      	str	r3, [r1, #4]
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f104 060b 	add.w	r6, r4, #11
 800aea2:	f000 f9ed 	bl	800b280 <__malloc_unlock>
 800aea6:	f026 0607 	bic.w	r6, r6, #7
 800aeaa:	1d23      	adds	r3, r4, #4
 800aeac:	1af2      	subs	r2, r6, r3
 800aeae:	d0b6      	beq.n	800ae1e <_malloc_r+0x22>
 800aeb0:	1b9b      	subs	r3, r3, r6
 800aeb2:	50a3      	str	r3, [r4, r2]
 800aeb4:	e7b3      	b.n	800ae1e <_malloc_r+0x22>
 800aeb6:	6862      	ldr	r2, [r4, #4]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	bf0c      	ite	eq
 800aebc:	6032      	streq	r2, [r6, #0]
 800aebe:	605a      	strne	r2, [r3, #4]
 800aec0:	e7ec      	b.n	800ae9c <_malloc_r+0xa0>
 800aec2:	4623      	mov	r3, r4
 800aec4:	6864      	ldr	r4, [r4, #4]
 800aec6:	e7b2      	b.n	800ae2e <_malloc_r+0x32>
 800aec8:	4634      	mov	r4, r6
 800aeca:	6876      	ldr	r6, [r6, #4]
 800aecc:	e7b9      	b.n	800ae42 <_malloc_r+0x46>
 800aece:	230c      	movs	r3, #12
 800aed0:	603b      	str	r3, [r7, #0]
 800aed2:	4638      	mov	r0, r7
 800aed4:	f000 f9d4 	bl	800b280 <__malloc_unlock>
 800aed8:	e7a1      	b.n	800ae1e <_malloc_r+0x22>
 800aeda:	6025      	str	r5, [r4, #0]
 800aedc:	e7de      	b.n	800ae9c <_malloc_r+0xa0>
 800aede:	bf00      	nop
 800aee0:	20000a1c 	.word	0x20000a1c

0800aee4 <__ssputs_r>:
 800aee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	688e      	ldr	r6, [r1, #8]
 800aeea:	429e      	cmp	r6, r3
 800aeec:	4682      	mov	sl, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	4690      	mov	r8, r2
 800aef2:	461f      	mov	r7, r3
 800aef4:	d838      	bhi.n	800af68 <__ssputs_r+0x84>
 800aef6:	898a      	ldrh	r2, [r1, #12]
 800aef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aefc:	d032      	beq.n	800af64 <__ssputs_r+0x80>
 800aefe:	6825      	ldr	r5, [r4, #0]
 800af00:	6909      	ldr	r1, [r1, #16]
 800af02:	eba5 0901 	sub.w	r9, r5, r1
 800af06:	6965      	ldr	r5, [r4, #20]
 800af08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af10:	3301      	adds	r3, #1
 800af12:	444b      	add	r3, r9
 800af14:	106d      	asrs	r5, r5, #1
 800af16:	429d      	cmp	r5, r3
 800af18:	bf38      	it	cc
 800af1a:	461d      	movcc	r5, r3
 800af1c:	0553      	lsls	r3, r2, #21
 800af1e:	d531      	bpl.n	800af84 <__ssputs_r+0xa0>
 800af20:	4629      	mov	r1, r5
 800af22:	f7ff ff6b 	bl	800adfc <_malloc_r>
 800af26:	4606      	mov	r6, r0
 800af28:	b950      	cbnz	r0, 800af40 <__ssputs_r+0x5c>
 800af2a:	230c      	movs	r3, #12
 800af2c:	f8ca 3000 	str.w	r3, [sl]
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295
 800af3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af40:	6921      	ldr	r1, [r4, #16]
 800af42:	464a      	mov	r2, r9
 800af44:	f7ff fb46 	bl	800a5d4 <memcpy>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	6126      	str	r6, [r4, #16]
 800af56:	6165      	str	r5, [r4, #20]
 800af58:	444e      	add	r6, r9
 800af5a:	eba5 0509 	sub.w	r5, r5, r9
 800af5e:	6026      	str	r6, [r4, #0]
 800af60:	60a5      	str	r5, [r4, #8]
 800af62:	463e      	mov	r6, r7
 800af64:	42be      	cmp	r6, r7
 800af66:	d900      	bls.n	800af6a <__ssputs_r+0x86>
 800af68:	463e      	mov	r6, r7
 800af6a:	6820      	ldr	r0, [r4, #0]
 800af6c:	4632      	mov	r2, r6
 800af6e:	4641      	mov	r1, r8
 800af70:	f000 f966 	bl	800b240 <memmove>
 800af74:	68a3      	ldr	r3, [r4, #8]
 800af76:	1b9b      	subs	r3, r3, r6
 800af78:	60a3      	str	r3, [r4, #8]
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	4433      	add	r3, r6
 800af7e:	6023      	str	r3, [r4, #0]
 800af80:	2000      	movs	r0, #0
 800af82:	e7db      	b.n	800af3c <__ssputs_r+0x58>
 800af84:	462a      	mov	r2, r5
 800af86:	f000 f981 	bl	800b28c <_realloc_r>
 800af8a:	4606      	mov	r6, r0
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d1e1      	bne.n	800af54 <__ssputs_r+0x70>
 800af90:	6921      	ldr	r1, [r4, #16]
 800af92:	4650      	mov	r0, sl
 800af94:	f7ff fec6 	bl	800ad24 <_free_r>
 800af98:	e7c7      	b.n	800af2a <__ssputs_r+0x46>
	...

0800af9c <_svfiprintf_r>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	4698      	mov	r8, r3
 800afa2:	898b      	ldrh	r3, [r1, #12]
 800afa4:	061b      	lsls	r3, r3, #24
 800afa6:	b09d      	sub	sp, #116	; 0x74
 800afa8:	4607      	mov	r7, r0
 800afaa:	460d      	mov	r5, r1
 800afac:	4614      	mov	r4, r2
 800afae:	d50e      	bpl.n	800afce <_svfiprintf_r+0x32>
 800afb0:	690b      	ldr	r3, [r1, #16]
 800afb2:	b963      	cbnz	r3, 800afce <_svfiprintf_r+0x32>
 800afb4:	2140      	movs	r1, #64	; 0x40
 800afb6:	f7ff ff21 	bl	800adfc <_malloc_r>
 800afba:	6028      	str	r0, [r5, #0]
 800afbc:	6128      	str	r0, [r5, #16]
 800afbe:	b920      	cbnz	r0, 800afca <_svfiprintf_r+0x2e>
 800afc0:	230c      	movs	r3, #12
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	f04f 30ff 	mov.w	r0, #4294967295
 800afc8:	e0d1      	b.n	800b16e <_svfiprintf_r+0x1d2>
 800afca:	2340      	movs	r3, #64	; 0x40
 800afcc:	616b      	str	r3, [r5, #20]
 800afce:	2300      	movs	r3, #0
 800afd0:	9309      	str	r3, [sp, #36]	; 0x24
 800afd2:	2320      	movs	r3, #32
 800afd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800afdc:	2330      	movs	r3, #48	; 0x30
 800afde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b188 <_svfiprintf_r+0x1ec>
 800afe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afe6:	f04f 0901 	mov.w	r9, #1
 800afea:	4623      	mov	r3, r4
 800afec:	469a      	mov	sl, r3
 800afee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aff2:	b10a      	cbz	r2, 800aff8 <_svfiprintf_r+0x5c>
 800aff4:	2a25      	cmp	r2, #37	; 0x25
 800aff6:	d1f9      	bne.n	800afec <_svfiprintf_r+0x50>
 800aff8:	ebba 0b04 	subs.w	fp, sl, r4
 800affc:	d00b      	beq.n	800b016 <_svfiprintf_r+0x7a>
 800affe:	465b      	mov	r3, fp
 800b000:	4622      	mov	r2, r4
 800b002:	4629      	mov	r1, r5
 800b004:	4638      	mov	r0, r7
 800b006:	f7ff ff6d 	bl	800aee4 <__ssputs_r>
 800b00a:	3001      	adds	r0, #1
 800b00c:	f000 80aa 	beq.w	800b164 <_svfiprintf_r+0x1c8>
 800b010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b012:	445a      	add	r2, fp
 800b014:	9209      	str	r2, [sp, #36]	; 0x24
 800b016:	f89a 3000 	ldrb.w	r3, [sl]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 80a2 	beq.w	800b164 <_svfiprintf_r+0x1c8>
 800b020:	2300      	movs	r3, #0
 800b022:	f04f 32ff 	mov.w	r2, #4294967295
 800b026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b02a:	f10a 0a01 	add.w	sl, sl, #1
 800b02e:	9304      	str	r3, [sp, #16]
 800b030:	9307      	str	r3, [sp, #28]
 800b032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b036:	931a      	str	r3, [sp, #104]	; 0x68
 800b038:	4654      	mov	r4, sl
 800b03a:	2205      	movs	r2, #5
 800b03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b040:	4851      	ldr	r0, [pc, #324]	; (800b188 <_svfiprintf_r+0x1ec>)
 800b042:	f7f5 f8ed 	bl	8000220 <memchr>
 800b046:	9a04      	ldr	r2, [sp, #16]
 800b048:	b9d8      	cbnz	r0, 800b082 <_svfiprintf_r+0xe6>
 800b04a:	06d0      	lsls	r0, r2, #27
 800b04c:	bf44      	itt	mi
 800b04e:	2320      	movmi	r3, #32
 800b050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b054:	0711      	lsls	r1, r2, #28
 800b056:	bf44      	itt	mi
 800b058:	232b      	movmi	r3, #43	; 0x2b
 800b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05e:	f89a 3000 	ldrb.w	r3, [sl]
 800b062:	2b2a      	cmp	r3, #42	; 0x2a
 800b064:	d015      	beq.n	800b092 <_svfiprintf_r+0xf6>
 800b066:	9a07      	ldr	r2, [sp, #28]
 800b068:	4654      	mov	r4, sl
 800b06a:	2000      	movs	r0, #0
 800b06c:	f04f 0c0a 	mov.w	ip, #10
 800b070:	4621      	mov	r1, r4
 800b072:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b076:	3b30      	subs	r3, #48	; 0x30
 800b078:	2b09      	cmp	r3, #9
 800b07a:	d94e      	bls.n	800b11a <_svfiprintf_r+0x17e>
 800b07c:	b1b0      	cbz	r0, 800b0ac <_svfiprintf_r+0x110>
 800b07e:	9207      	str	r2, [sp, #28]
 800b080:	e014      	b.n	800b0ac <_svfiprintf_r+0x110>
 800b082:	eba0 0308 	sub.w	r3, r0, r8
 800b086:	fa09 f303 	lsl.w	r3, r9, r3
 800b08a:	4313      	orrs	r3, r2
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	46a2      	mov	sl, r4
 800b090:	e7d2      	b.n	800b038 <_svfiprintf_r+0x9c>
 800b092:	9b03      	ldr	r3, [sp, #12]
 800b094:	1d19      	adds	r1, r3, #4
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	9103      	str	r1, [sp, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	bfbb      	ittet	lt
 800b09e:	425b      	neglt	r3, r3
 800b0a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a4:	9307      	strge	r3, [sp, #28]
 800b0a6:	9307      	strlt	r3, [sp, #28]
 800b0a8:	bfb8      	it	lt
 800b0aa:	9204      	strlt	r2, [sp, #16]
 800b0ac:	7823      	ldrb	r3, [r4, #0]
 800b0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b0:	d10c      	bne.n	800b0cc <_svfiprintf_r+0x130>
 800b0b2:	7863      	ldrb	r3, [r4, #1]
 800b0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b6:	d135      	bne.n	800b124 <_svfiprintf_r+0x188>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	9203      	str	r2, [sp, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	bfb8      	it	lt
 800b0c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0c8:	3402      	adds	r4, #2
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b198 <_svfiprintf_r+0x1fc>
 800b0d0:	7821      	ldrb	r1, [r4, #0]
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	4650      	mov	r0, sl
 800b0d6:	f7f5 f8a3 	bl	8000220 <memchr>
 800b0da:	b140      	cbz	r0, 800b0ee <_svfiprintf_r+0x152>
 800b0dc:	2340      	movs	r3, #64	; 0x40
 800b0de:	eba0 000a 	sub.w	r0, r0, sl
 800b0e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	4303      	orrs	r3, r0
 800b0ea:	3401      	adds	r4, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f2:	4826      	ldr	r0, [pc, #152]	; (800b18c <_svfiprintf_r+0x1f0>)
 800b0f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0f8:	2206      	movs	r2, #6
 800b0fa:	f7f5 f891 	bl	8000220 <memchr>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d038      	beq.n	800b174 <_svfiprintf_r+0x1d8>
 800b102:	4b23      	ldr	r3, [pc, #140]	; (800b190 <_svfiprintf_r+0x1f4>)
 800b104:	bb1b      	cbnz	r3, 800b14e <_svfiprintf_r+0x1b2>
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	3307      	adds	r3, #7
 800b10a:	f023 0307 	bic.w	r3, r3, #7
 800b10e:	3308      	adds	r3, #8
 800b110:	9303      	str	r3, [sp, #12]
 800b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b114:	4433      	add	r3, r6
 800b116:	9309      	str	r3, [sp, #36]	; 0x24
 800b118:	e767      	b.n	800afea <_svfiprintf_r+0x4e>
 800b11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b11e:	460c      	mov	r4, r1
 800b120:	2001      	movs	r0, #1
 800b122:	e7a5      	b.n	800b070 <_svfiprintf_r+0xd4>
 800b124:	2300      	movs	r3, #0
 800b126:	3401      	adds	r4, #1
 800b128:	9305      	str	r3, [sp, #20]
 800b12a:	4619      	mov	r1, r3
 800b12c:	f04f 0c0a 	mov.w	ip, #10
 800b130:	4620      	mov	r0, r4
 800b132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b136:	3a30      	subs	r2, #48	; 0x30
 800b138:	2a09      	cmp	r2, #9
 800b13a:	d903      	bls.n	800b144 <_svfiprintf_r+0x1a8>
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0c5      	beq.n	800b0cc <_svfiprintf_r+0x130>
 800b140:	9105      	str	r1, [sp, #20]
 800b142:	e7c3      	b.n	800b0cc <_svfiprintf_r+0x130>
 800b144:	fb0c 2101 	mla	r1, ip, r1, r2
 800b148:	4604      	mov	r4, r0
 800b14a:	2301      	movs	r3, #1
 800b14c:	e7f0      	b.n	800b130 <_svfiprintf_r+0x194>
 800b14e:	ab03      	add	r3, sp, #12
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	462a      	mov	r2, r5
 800b154:	4b0f      	ldr	r3, [pc, #60]	; (800b194 <_svfiprintf_r+0x1f8>)
 800b156:	a904      	add	r1, sp, #16
 800b158:	4638      	mov	r0, r7
 800b15a:	f7fd ffb5 	bl	80090c8 <_printf_float>
 800b15e:	1c42      	adds	r2, r0, #1
 800b160:	4606      	mov	r6, r0
 800b162:	d1d6      	bne.n	800b112 <_svfiprintf_r+0x176>
 800b164:	89ab      	ldrh	r3, [r5, #12]
 800b166:	065b      	lsls	r3, r3, #25
 800b168:	f53f af2c 	bmi.w	800afc4 <_svfiprintf_r+0x28>
 800b16c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b16e:	b01d      	add	sp, #116	; 0x74
 800b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b174:	ab03      	add	r3, sp, #12
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	462a      	mov	r2, r5
 800b17a:	4b06      	ldr	r3, [pc, #24]	; (800b194 <_svfiprintf_r+0x1f8>)
 800b17c:	a904      	add	r1, sp, #16
 800b17e:	4638      	mov	r0, r7
 800b180:	f7fe fa46 	bl	8009610 <_printf_i>
 800b184:	e7eb      	b.n	800b15e <_svfiprintf_r+0x1c2>
 800b186:	bf00      	nop
 800b188:	0800c20c 	.word	0x0800c20c
 800b18c:	0800c216 	.word	0x0800c216
 800b190:	080090c9 	.word	0x080090c9
 800b194:	0800aee5 	.word	0x0800aee5
 800b198:	0800c212 	.word	0x0800c212

0800b19c <_sbrk_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d06      	ldr	r5, [pc, #24]	; (800b1b8 <_sbrk_r+0x1c>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	602b      	str	r3, [r5, #0]
 800b1a8:	f7f7 fe66 	bl	8002e78 <_sbrk>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_sbrk_r+0x1a>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_sbrk_r+0x1a>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20000a24 	.word	0x20000a24

0800b1bc <__assert_func>:
 800b1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1be:	4614      	mov	r4, r2
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <__assert_func+0x2c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	68d8      	ldr	r0, [r3, #12]
 800b1ca:	b14c      	cbz	r4, 800b1e0 <__assert_func+0x24>
 800b1cc:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <__assert_func+0x30>)
 800b1ce:	9100      	str	r1, [sp, #0]
 800b1d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1d4:	4906      	ldr	r1, [pc, #24]	; (800b1f0 <__assert_func+0x34>)
 800b1d6:	462b      	mov	r3, r5
 800b1d8:	f000 f80e 	bl	800b1f8 <fiprintf>
 800b1dc:	f000 faac 	bl	800b738 <abort>
 800b1e0:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <__assert_func+0x38>)
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	e7f3      	b.n	800b1ce <__assert_func+0x12>
 800b1e6:	bf00      	nop
 800b1e8:	20000024 	.word	0x20000024
 800b1ec:	0800c21d 	.word	0x0800c21d
 800b1f0:	0800c22a 	.word	0x0800c22a
 800b1f4:	0800c258 	.word	0x0800c258

0800b1f8 <fiprintf>:
 800b1f8:	b40e      	push	{r1, r2, r3}
 800b1fa:	b503      	push	{r0, r1, lr}
 800b1fc:	4601      	mov	r1, r0
 800b1fe:	ab03      	add	r3, sp, #12
 800b200:	4805      	ldr	r0, [pc, #20]	; (800b218 <fiprintf+0x20>)
 800b202:	f853 2b04 	ldr.w	r2, [r3], #4
 800b206:	6800      	ldr	r0, [r0, #0]
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	f000 f897 	bl	800b33c <_vfiprintf_r>
 800b20e:	b002      	add	sp, #8
 800b210:	f85d eb04 	ldr.w	lr, [sp], #4
 800b214:	b003      	add	sp, #12
 800b216:	4770      	bx	lr
 800b218:	20000024 	.word	0x20000024

0800b21c <__ascii_mbtowc>:
 800b21c:	b082      	sub	sp, #8
 800b21e:	b901      	cbnz	r1, 800b222 <__ascii_mbtowc+0x6>
 800b220:	a901      	add	r1, sp, #4
 800b222:	b142      	cbz	r2, 800b236 <__ascii_mbtowc+0x1a>
 800b224:	b14b      	cbz	r3, 800b23a <__ascii_mbtowc+0x1e>
 800b226:	7813      	ldrb	r3, [r2, #0]
 800b228:	600b      	str	r3, [r1, #0]
 800b22a:	7812      	ldrb	r2, [r2, #0]
 800b22c:	1e10      	subs	r0, r2, #0
 800b22e:	bf18      	it	ne
 800b230:	2001      	movne	r0, #1
 800b232:	b002      	add	sp, #8
 800b234:	4770      	bx	lr
 800b236:	4610      	mov	r0, r2
 800b238:	e7fb      	b.n	800b232 <__ascii_mbtowc+0x16>
 800b23a:	f06f 0001 	mvn.w	r0, #1
 800b23e:	e7f8      	b.n	800b232 <__ascii_mbtowc+0x16>

0800b240 <memmove>:
 800b240:	4288      	cmp	r0, r1
 800b242:	b510      	push	{r4, lr}
 800b244:	eb01 0402 	add.w	r4, r1, r2
 800b248:	d902      	bls.n	800b250 <memmove+0x10>
 800b24a:	4284      	cmp	r4, r0
 800b24c:	4623      	mov	r3, r4
 800b24e:	d807      	bhi.n	800b260 <memmove+0x20>
 800b250:	1e43      	subs	r3, r0, #1
 800b252:	42a1      	cmp	r1, r4
 800b254:	d008      	beq.n	800b268 <memmove+0x28>
 800b256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b25a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b25e:	e7f8      	b.n	800b252 <memmove+0x12>
 800b260:	4402      	add	r2, r0
 800b262:	4601      	mov	r1, r0
 800b264:	428a      	cmp	r2, r1
 800b266:	d100      	bne.n	800b26a <memmove+0x2a>
 800b268:	bd10      	pop	{r4, pc}
 800b26a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b26e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b272:	e7f7      	b.n	800b264 <memmove+0x24>

0800b274 <__malloc_lock>:
 800b274:	4801      	ldr	r0, [pc, #4]	; (800b27c <__malloc_lock+0x8>)
 800b276:	f000 bc1f 	b.w	800bab8 <__retarget_lock_acquire_recursive>
 800b27a:	bf00      	nop
 800b27c:	20000a28 	.word	0x20000a28

0800b280 <__malloc_unlock>:
 800b280:	4801      	ldr	r0, [pc, #4]	; (800b288 <__malloc_unlock+0x8>)
 800b282:	f000 bc1a 	b.w	800baba <__retarget_lock_release_recursive>
 800b286:	bf00      	nop
 800b288:	20000a28 	.word	0x20000a28

0800b28c <_realloc_r>:
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4680      	mov	r8, r0
 800b292:	4614      	mov	r4, r2
 800b294:	460e      	mov	r6, r1
 800b296:	b921      	cbnz	r1, 800b2a2 <_realloc_r+0x16>
 800b298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	4611      	mov	r1, r2
 800b29e:	f7ff bdad 	b.w	800adfc <_malloc_r>
 800b2a2:	b92a      	cbnz	r2, 800b2b0 <_realloc_r+0x24>
 800b2a4:	f7ff fd3e 	bl	800ad24 <_free_r>
 800b2a8:	4625      	mov	r5, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b0:	f000 fc6a 	bl	800bb88 <_malloc_usable_size_r>
 800b2b4:	4284      	cmp	r4, r0
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	d802      	bhi.n	800b2c0 <_realloc_r+0x34>
 800b2ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2be:	d812      	bhi.n	800b2e6 <_realloc_r+0x5a>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	f7ff fd9a 	bl	800adfc <_malloc_r>
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d0ed      	beq.n	800b2aa <_realloc_r+0x1e>
 800b2ce:	42bc      	cmp	r4, r7
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	bf28      	it	cs
 800b2d6:	463a      	movcs	r2, r7
 800b2d8:	f7ff f97c 	bl	800a5d4 <memcpy>
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f7ff fd20 	bl	800ad24 <_free_r>
 800b2e4:	e7e1      	b.n	800b2aa <_realloc_r+0x1e>
 800b2e6:	4635      	mov	r5, r6
 800b2e8:	e7df      	b.n	800b2aa <_realloc_r+0x1e>

0800b2ea <__sfputc_r>:
 800b2ea:	6893      	ldr	r3, [r2, #8]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	b410      	push	{r4}
 800b2f2:	6093      	str	r3, [r2, #8]
 800b2f4:	da08      	bge.n	800b308 <__sfputc_r+0x1e>
 800b2f6:	6994      	ldr	r4, [r2, #24]
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	db01      	blt.n	800b300 <__sfputc_r+0x16>
 800b2fc:	290a      	cmp	r1, #10
 800b2fe:	d103      	bne.n	800b308 <__sfputc_r+0x1e>
 800b300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b304:	f000 b94a 	b.w	800b59c <__swbuf_r>
 800b308:	6813      	ldr	r3, [r2, #0]
 800b30a:	1c58      	adds	r0, r3, #1
 800b30c:	6010      	str	r0, [r2, #0]
 800b30e:	7019      	strb	r1, [r3, #0]
 800b310:	4608      	mov	r0, r1
 800b312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <__sfputs_r>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	4614      	mov	r4, r2
 800b320:	18d5      	adds	r5, r2, r3
 800b322:	42ac      	cmp	r4, r5
 800b324:	d101      	bne.n	800b32a <__sfputs_r+0x12>
 800b326:	2000      	movs	r0, #0
 800b328:	e007      	b.n	800b33a <__sfputs_r+0x22>
 800b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32e:	463a      	mov	r2, r7
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ffda 	bl	800b2ea <__sfputc_r>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	d1f3      	bne.n	800b322 <__sfputs_r+0xa>
 800b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b33c <_vfiprintf_r>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	460d      	mov	r5, r1
 800b342:	b09d      	sub	sp, #116	; 0x74
 800b344:	4614      	mov	r4, r2
 800b346:	4698      	mov	r8, r3
 800b348:	4606      	mov	r6, r0
 800b34a:	b118      	cbz	r0, 800b354 <_vfiprintf_r+0x18>
 800b34c:	6983      	ldr	r3, [r0, #24]
 800b34e:	b90b      	cbnz	r3, 800b354 <_vfiprintf_r+0x18>
 800b350:	f000 fb14 	bl	800b97c <__sinit>
 800b354:	4b89      	ldr	r3, [pc, #548]	; (800b57c <_vfiprintf_r+0x240>)
 800b356:	429d      	cmp	r5, r3
 800b358:	d11b      	bne.n	800b392 <_vfiprintf_r+0x56>
 800b35a:	6875      	ldr	r5, [r6, #4]
 800b35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35e:	07d9      	lsls	r1, r3, #31
 800b360:	d405      	bmi.n	800b36e <_vfiprintf_r+0x32>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	059a      	lsls	r2, r3, #22
 800b366:	d402      	bmi.n	800b36e <_vfiprintf_r+0x32>
 800b368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b36a:	f000 fba5 	bl	800bab8 <__retarget_lock_acquire_recursive>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	071b      	lsls	r3, r3, #28
 800b372:	d501      	bpl.n	800b378 <_vfiprintf_r+0x3c>
 800b374:	692b      	ldr	r3, [r5, #16]
 800b376:	b9eb      	cbnz	r3, 800b3b4 <_vfiprintf_r+0x78>
 800b378:	4629      	mov	r1, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f96e 	bl	800b65c <__swsetup_r>
 800b380:	b1c0      	cbz	r0, 800b3b4 <_vfiprintf_r+0x78>
 800b382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b384:	07dc      	lsls	r4, r3, #31
 800b386:	d50e      	bpl.n	800b3a6 <_vfiprintf_r+0x6a>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295
 800b38c:	b01d      	add	sp, #116	; 0x74
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	4b7b      	ldr	r3, [pc, #492]	; (800b580 <_vfiprintf_r+0x244>)
 800b394:	429d      	cmp	r5, r3
 800b396:	d101      	bne.n	800b39c <_vfiprintf_r+0x60>
 800b398:	68b5      	ldr	r5, [r6, #8]
 800b39a:	e7df      	b.n	800b35c <_vfiprintf_r+0x20>
 800b39c:	4b79      	ldr	r3, [pc, #484]	; (800b584 <_vfiprintf_r+0x248>)
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	bf08      	it	eq
 800b3a2:	68f5      	ldreq	r5, [r6, #12]
 800b3a4:	e7da      	b.n	800b35c <_vfiprintf_r+0x20>
 800b3a6:	89ab      	ldrh	r3, [r5, #12]
 800b3a8:	0598      	lsls	r0, r3, #22
 800b3aa:	d4ed      	bmi.n	800b388 <_vfiprintf_r+0x4c>
 800b3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ae:	f000 fb84 	bl	800baba <__retarget_lock_release_recursive>
 800b3b2:	e7e9      	b.n	800b388 <_vfiprintf_r+0x4c>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b8:	2320      	movs	r3, #32
 800b3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c2:	2330      	movs	r3, #48	; 0x30
 800b3c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b588 <_vfiprintf_r+0x24c>
 800b3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3cc:	f04f 0901 	mov.w	r9, #1
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	469a      	mov	sl, r3
 800b3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d8:	b10a      	cbz	r2, 800b3de <_vfiprintf_r+0xa2>
 800b3da:	2a25      	cmp	r2, #37	; 0x25
 800b3dc:	d1f9      	bne.n	800b3d2 <_vfiprintf_r+0x96>
 800b3de:	ebba 0b04 	subs.w	fp, sl, r4
 800b3e2:	d00b      	beq.n	800b3fc <_vfiprintf_r+0xc0>
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ff94 	bl	800b318 <__sfputs_r>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f000 80aa 	beq.w	800b54a <_vfiprintf_r+0x20e>
 800b3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f8:	445a      	add	r2, fp
 800b3fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80a2 	beq.w	800b54a <_vfiprintf_r+0x20e>
 800b406:	2300      	movs	r3, #0
 800b408:	f04f 32ff 	mov.w	r2, #4294967295
 800b40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b410:	f10a 0a01 	add.w	sl, sl, #1
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b41c:	931a      	str	r3, [sp, #104]	; 0x68
 800b41e:	4654      	mov	r4, sl
 800b420:	2205      	movs	r2, #5
 800b422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b426:	4858      	ldr	r0, [pc, #352]	; (800b588 <_vfiprintf_r+0x24c>)
 800b428:	f7f4 fefa 	bl	8000220 <memchr>
 800b42c:	9a04      	ldr	r2, [sp, #16]
 800b42e:	b9d8      	cbnz	r0, 800b468 <_vfiprintf_r+0x12c>
 800b430:	06d1      	lsls	r1, r2, #27
 800b432:	bf44      	itt	mi
 800b434:	2320      	movmi	r3, #32
 800b436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43a:	0713      	lsls	r3, r2, #28
 800b43c:	bf44      	itt	mi
 800b43e:	232b      	movmi	r3, #43	; 0x2b
 800b440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b444:	f89a 3000 	ldrb.w	r3, [sl]
 800b448:	2b2a      	cmp	r3, #42	; 0x2a
 800b44a:	d015      	beq.n	800b478 <_vfiprintf_r+0x13c>
 800b44c:	9a07      	ldr	r2, [sp, #28]
 800b44e:	4654      	mov	r4, sl
 800b450:	2000      	movs	r0, #0
 800b452:	f04f 0c0a 	mov.w	ip, #10
 800b456:	4621      	mov	r1, r4
 800b458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b45c:	3b30      	subs	r3, #48	; 0x30
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d94e      	bls.n	800b500 <_vfiprintf_r+0x1c4>
 800b462:	b1b0      	cbz	r0, 800b492 <_vfiprintf_r+0x156>
 800b464:	9207      	str	r2, [sp, #28]
 800b466:	e014      	b.n	800b492 <_vfiprintf_r+0x156>
 800b468:	eba0 0308 	sub.w	r3, r0, r8
 800b46c:	fa09 f303 	lsl.w	r3, r9, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	9304      	str	r3, [sp, #16]
 800b474:	46a2      	mov	sl, r4
 800b476:	e7d2      	b.n	800b41e <_vfiprintf_r+0xe2>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	1d19      	adds	r1, r3, #4
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	9103      	str	r1, [sp, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	bfbb      	ittet	lt
 800b484:	425b      	neglt	r3, r3
 800b486:	f042 0202 	orrlt.w	r2, r2, #2
 800b48a:	9307      	strge	r3, [sp, #28]
 800b48c:	9307      	strlt	r3, [sp, #28]
 800b48e:	bfb8      	it	lt
 800b490:	9204      	strlt	r2, [sp, #16]
 800b492:	7823      	ldrb	r3, [r4, #0]
 800b494:	2b2e      	cmp	r3, #46	; 0x2e
 800b496:	d10c      	bne.n	800b4b2 <_vfiprintf_r+0x176>
 800b498:	7863      	ldrb	r3, [r4, #1]
 800b49a:	2b2a      	cmp	r3, #42	; 0x2a
 800b49c:	d135      	bne.n	800b50a <_vfiprintf_r+0x1ce>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	9203      	str	r2, [sp, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bfb8      	it	lt
 800b4aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ae:	3402      	adds	r4, #2
 800b4b0:	9305      	str	r3, [sp, #20]
 800b4b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b598 <_vfiprintf_r+0x25c>
 800b4b6:	7821      	ldrb	r1, [r4, #0]
 800b4b8:	2203      	movs	r2, #3
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	f7f4 feb0 	bl	8000220 <memchr>
 800b4c0:	b140      	cbz	r0, 800b4d4 <_vfiprintf_r+0x198>
 800b4c2:	2340      	movs	r3, #64	; 0x40
 800b4c4:	eba0 000a 	sub.w	r0, r0, sl
 800b4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	4303      	orrs	r3, r0
 800b4d0:	3401      	adds	r4, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	482c      	ldr	r0, [pc, #176]	; (800b58c <_vfiprintf_r+0x250>)
 800b4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4de:	2206      	movs	r2, #6
 800b4e0:	f7f4 fe9e 	bl	8000220 <memchr>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d03f      	beq.n	800b568 <_vfiprintf_r+0x22c>
 800b4e8:	4b29      	ldr	r3, [pc, #164]	; (800b590 <_vfiprintf_r+0x254>)
 800b4ea:	bb1b      	cbnz	r3, 800b534 <_vfiprintf_r+0x1f8>
 800b4ec:	9b03      	ldr	r3, [sp, #12]
 800b4ee:	3307      	adds	r3, #7
 800b4f0:	f023 0307 	bic.w	r3, r3, #7
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fa:	443b      	add	r3, r7
 800b4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fe:	e767      	b.n	800b3d0 <_vfiprintf_r+0x94>
 800b500:	fb0c 3202 	mla	r2, ip, r2, r3
 800b504:	460c      	mov	r4, r1
 800b506:	2001      	movs	r0, #1
 800b508:	e7a5      	b.n	800b456 <_vfiprintf_r+0x11a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	3401      	adds	r4, #1
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	4619      	mov	r1, r3
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4620      	mov	r0, r4
 800b518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51c:	3a30      	subs	r2, #48	; 0x30
 800b51e:	2a09      	cmp	r2, #9
 800b520:	d903      	bls.n	800b52a <_vfiprintf_r+0x1ee>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0c5      	beq.n	800b4b2 <_vfiprintf_r+0x176>
 800b526:	9105      	str	r1, [sp, #20]
 800b528:	e7c3      	b.n	800b4b2 <_vfiprintf_r+0x176>
 800b52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b52e:	4604      	mov	r4, r0
 800b530:	2301      	movs	r3, #1
 800b532:	e7f0      	b.n	800b516 <_vfiprintf_r+0x1da>
 800b534:	ab03      	add	r3, sp, #12
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	462a      	mov	r2, r5
 800b53a:	4b16      	ldr	r3, [pc, #88]	; (800b594 <_vfiprintf_r+0x258>)
 800b53c:	a904      	add	r1, sp, #16
 800b53e:	4630      	mov	r0, r6
 800b540:	f7fd fdc2 	bl	80090c8 <_printf_float>
 800b544:	4607      	mov	r7, r0
 800b546:	1c78      	adds	r0, r7, #1
 800b548:	d1d6      	bne.n	800b4f8 <_vfiprintf_r+0x1bc>
 800b54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54c:	07d9      	lsls	r1, r3, #31
 800b54e:	d405      	bmi.n	800b55c <_vfiprintf_r+0x220>
 800b550:	89ab      	ldrh	r3, [r5, #12]
 800b552:	059a      	lsls	r2, r3, #22
 800b554:	d402      	bmi.n	800b55c <_vfiprintf_r+0x220>
 800b556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b558:	f000 faaf 	bl	800baba <__retarget_lock_release_recursive>
 800b55c:	89ab      	ldrh	r3, [r5, #12]
 800b55e:	065b      	lsls	r3, r3, #25
 800b560:	f53f af12 	bmi.w	800b388 <_vfiprintf_r+0x4c>
 800b564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b566:	e711      	b.n	800b38c <_vfiprintf_r+0x50>
 800b568:	ab03      	add	r3, sp, #12
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	462a      	mov	r2, r5
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <_vfiprintf_r+0x258>)
 800b570:	a904      	add	r1, sp, #16
 800b572:	4630      	mov	r0, r6
 800b574:	f7fe f84c 	bl	8009610 <_printf_i>
 800b578:	e7e4      	b.n	800b544 <_vfiprintf_r+0x208>
 800b57a:	bf00      	nop
 800b57c:	0800c384 	.word	0x0800c384
 800b580:	0800c3a4 	.word	0x0800c3a4
 800b584:	0800c364 	.word	0x0800c364
 800b588:	0800c20c 	.word	0x0800c20c
 800b58c:	0800c216 	.word	0x0800c216
 800b590:	080090c9 	.word	0x080090c9
 800b594:	0800b319 	.word	0x0800b319
 800b598:	0800c212 	.word	0x0800c212

0800b59c <__swbuf_r>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	460e      	mov	r6, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b118      	cbz	r0, 800b5ae <__swbuf_r+0x12>
 800b5a6:	6983      	ldr	r3, [r0, #24]
 800b5a8:	b90b      	cbnz	r3, 800b5ae <__swbuf_r+0x12>
 800b5aa:	f000 f9e7 	bl	800b97c <__sinit>
 800b5ae:	4b21      	ldr	r3, [pc, #132]	; (800b634 <__swbuf_r+0x98>)
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d12b      	bne.n	800b60c <__swbuf_r+0x70>
 800b5b4:	686c      	ldr	r4, [r5, #4]
 800b5b6:	69a3      	ldr	r3, [r4, #24]
 800b5b8:	60a3      	str	r3, [r4, #8]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	071a      	lsls	r2, r3, #28
 800b5be:	d52f      	bpl.n	800b620 <__swbuf_r+0x84>
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	b36b      	cbz	r3, 800b620 <__swbuf_r+0x84>
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	6820      	ldr	r0, [r4, #0]
 800b5c8:	1ac0      	subs	r0, r0, r3
 800b5ca:	6963      	ldr	r3, [r4, #20]
 800b5cc:	b2f6      	uxtb	r6, r6
 800b5ce:	4283      	cmp	r3, r0
 800b5d0:	4637      	mov	r7, r6
 800b5d2:	dc04      	bgt.n	800b5de <__swbuf_r+0x42>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f000 f93c 	bl	800b854 <_fflush_r>
 800b5dc:	bb30      	cbnz	r0, 800b62c <__swbuf_r+0x90>
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	60a3      	str	r3, [r4, #8]
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	701e      	strb	r6, [r3, #0]
 800b5ec:	6963      	ldr	r3, [r4, #20]
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	4283      	cmp	r3, r0
 800b5f2:	d004      	beq.n	800b5fe <__swbuf_r+0x62>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	07db      	lsls	r3, r3, #31
 800b5f8:	d506      	bpl.n	800b608 <__swbuf_r+0x6c>
 800b5fa:	2e0a      	cmp	r6, #10
 800b5fc:	d104      	bne.n	800b608 <__swbuf_r+0x6c>
 800b5fe:	4621      	mov	r1, r4
 800b600:	4628      	mov	r0, r5
 800b602:	f000 f927 	bl	800b854 <_fflush_r>
 800b606:	b988      	cbnz	r0, 800b62c <__swbuf_r+0x90>
 800b608:	4638      	mov	r0, r7
 800b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b60c:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <__swbuf_r+0x9c>)
 800b60e:	429c      	cmp	r4, r3
 800b610:	d101      	bne.n	800b616 <__swbuf_r+0x7a>
 800b612:	68ac      	ldr	r4, [r5, #8]
 800b614:	e7cf      	b.n	800b5b6 <__swbuf_r+0x1a>
 800b616:	4b09      	ldr	r3, [pc, #36]	; (800b63c <__swbuf_r+0xa0>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	bf08      	it	eq
 800b61c:	68ec      	ldreq	r4, [r5, #12]
 800b61e:	e7ca      	b.n	800b5b6 <__swbuf_r+0x1a>
 800b620:	4621      	mov	r1, r4
 800b622:	4628      	mov	r0, r5
 800b624:	f000 f81a 	bl	800b65c <__swsetup_r>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d0cb      	beq.n	800b5c4 <__swbuf_r+0x28>
 800b62c:	f04f 37ff 	mov.w	r7, #4294967295
 800b630:	e7ea      	b.n	800b608 <__swbuf_r+0x6c>
 800b632:	bf00      	nop
 800b634:	0800c384 	.word	0x0800c384
 800b638:	0800c3a4 	.word	0x0800c3a4
 800b63c:	0800c364 	.word	0x0800c364

0800b640 <__ascii_wctomb>:
 800b640:	b149      	cbz	r1, 800b656 <__ascii_wctomb+0x16>
 800b642:	2aff      	cmp	r2, #255	; 0xff
 800b644:	bf85      	ittet	hi
 800b646:	238a      	movhi	r3, #138	; 0x8a
 800b648:	6003      	strhi	r3, [r0, #0]
 800b64a:	700a      	strbls	r2, [r1, #0]
 800b64c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b650:	bf98      	it	ls
 800b652:	2001      	movls	r0, #1
 800b654:	4770      	bx	lr
 800b656:	4608      	mov	r0, r1
 800b658:	4770      	bx	lr
	...

0800b65c <__swsetup_r>:
 800b65c:	4b32      	ldr	r3, [pc, #200]	; (800b728 <__swsetup_r+0xcc>)
 800b65e:	b570      	push	{r4, r5, r6, lr}
 800b660:	681d      	ldr	r5, [r3, #0]
 800b662:	4606      	mov	r6, r0
 800b664:	460c      	mov	r4, r1
 800b666:	b125      	cbz	r5, 800b672 <__swsetup_r+0x16>
 800b668:	69ab      	ldr	r3, [r5, #24]
 800b66a:	b913      	cbnz	r3, 800b672 <__swsetup_r+0x16>
 800b66c:	4628      	mov	r0, r5
 800b66e:	f000 f985 	bl	800b97c <__sinit>
 800b672:	4b2e      	ldr	r3, [pc, #184]	; (800b72c <__swsetup_r+0xd0>)
 800b674:	429c      	cmp	r4, r3
 800b676:	d10f      	bne.n	800b698 <__swsetup_r+0x3c>
 800b678:	686c      	ldr	r4, [r5, #4]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b680:	0719      	lsls	r1, r3, #28
 800b682:	d42c      	bmi.n	800b6de <__swsetup_r+0x82>
 800b684:	06dd      	lsls	r5, r3, #27
 800b686:	d411      	bmi.n	800b6ac <__swsetup_r+0x50>
 800b688:	2309      	movs	r3, #9
 800b68a:	6033      	str	r3, [r6, #0]
 800b68c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	f04f 30ff 	mov.w	r0, #4294967295
 800b696:	e03e      	b.n	800b716 <__swsetup_r+0xba>
 800b698:	4b25      	ldr	r3, [pc, #148]	; (800b730 <__swsetup_r+0xd4>)
 800b69a:	429c      	cmp	r4, r3
 800b69c:	d101      	bne.n	800b6a2 <__swsetup_r+0x46>
 800b69e:	68ac      	ldr	r4, [r5, #8]
 800b6a0:	e7eb      	b.n	800b67a <__swsetup_r+0x1e>
 800b6a2:	4b24      	ldr	r3, [pc, #144]	; (800b734 <__swsetup_r+0xd8>)
 800b6a4:	429c      	cmp	r4, r3
 800b6a6:	bf08      	it	eq
 800b6a8:	68ec      	ldreq	r4, [r5, #12]
 800b6aa:	e7e6      	b.n	800b67a <__swsetup_r+0x1e>
 800b6ac:	0758      	lsls	r0, r3, #29
 800b6ae:	d512      	bpl.n	800b6d6 <__swsetup_r+0x7a>
 800b6b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6b2:	b141      	cbz	r1, 800b6c6 <__swsetup_r+0x6a>
 800b6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	d002      	beq.n	800b6c2 <__swsetup_r+0x66>
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff fb31 	bl	800ad24 <_free_r>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	6063      	str	r3, [r4, #4]
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f043 0308 	orr.w	r3, r3, #8
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	b94b      	cbnz	r3, 800b6f6 <__swsetup_r+0x9a>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ec:	d003      	beq.n	800b6f6 <__swsetup_r+0x9a>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f000 fa09 	bl	800bb08 <__smakebuf_r>
 800b6f6:	89a0      	ldrh	r0, [r4, #12]
 800b6f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6fc:	f010 0301 	ands.w	r3, r0, #1
 800b700:	d00a      	beq.n	800b718 <__swsetup_r+0xbc>
 800b702:	2300      	movs	r3, #0
 800b704:	60a3      	str	r3, [r4, #8]
 800b706:	6963      	ldr	r3, [r4, #20]
 800b708:	425b      	negs	r3, r3
 800b70a:	61a3      	str	r3, [r4, #24]
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	b943      	cbnz	r3, 800b722 <__swsetup_r+0xc6>
 800b710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b714:	d1ba      	bne.n	800b68c <__swsetup_r+0x30>
 800b716:	bd70      	pop	{r4, r5, r6, pc}
 800b718:	0781      	lsls	r1, r0, #30
 800b71a:	bf58      	it	pl
 800b71c:	6963      	ldrpl	r3, [r4, #20]
 800b71e:	60a3      	str	r3, [r4, #8]
 800b720:	e7f4      	b.n	800b70c <__swsetup_r+0xb0>
 800b722:	2000      	movs	r0, #0
 800b724:	e7f7      	b.n	800b716 <__swsetup_r+0xba>
 800b726:	bf00      	nop
 800b728:	20000024 	.word	0x20000024
 800b72c:	0800c384 	.word	0x0800c384
 800b730:	0800c3a4 	.word	0x0800c3a4
 800b734:	0800c364 	.word	0x0800c364

0800b738 <abort>:
 800b738:	b508      	push	{r3, lr}
 800b73a:	2006      	movs	r0, #6
 800b73c:	f000 fa54 	bl	800bbe8 <raise>
 800b740:	2001      	movs	r0, #1
 800b742:	f7f7 fb21 	bl	8002d88 <_exit>
	...

0800b748 <__sflush_r>:
 800b748:	898a      	ldrh	r2, [r1, #12]
 800b74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74e:	4605      	mov	r5, r0
 800b750:	0710      	lsls	r0, r2, #28
 800b752:	460c      	mov	r4, r1
 800b754:	d458      	bmi.n	800b808 <__sflush_r+0xc0>
 800b756:	684b      	ldr	r3, [r1, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dc05      	bgt.n	800b768 <__sflush_r+0x20>
 800b75c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b75e:	2b00      	cmp	r3, #0
 800b760:	dc02      	bgt.n	800b768 <__sflush_r+0x20>
 800b762:	2000      	movs	r0, #0
 800b764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b76a:	2e00      	cmp	r6, #0
 800b76c:	d0f9      	beq.n	800b762 <__sflush_r+0x1a>
 800b76e:	2300      	movs	r3, #0
 800b770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b774:	682f      	ldr	r7, [r5, #0]
 800b776:	602b      	str	r3, [r5, #0]
 800b778:	d032      	beq.n	800b7e0 <__sflush_r+0x98>
 800b77a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	075a      	lsls	r2, r3, #29
 800b780:	d505      	bpl.n	800b78e <__sflush_r+0x46>
 800b782:	6863      	ldr	r3, [r4, #4]
 800b784:	1ac0      	subs	r0, r0, r3
 800b786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b788:	b10b      	cbz	r3, 800b78e <__sflush_r+0x46>
 800b78a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b78c:	1ac0      	subs	r0, r0, r3
 800b78e:	2300      	movs	r3, #0
 800b790:	4602      	mov	r2, r0
 800b792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b794:	6a21      	ldr	r1, [r4, #32]
 800b796:	4628      	mov	r0, r5
 800b798:	47b0      	blx	r6
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	d106      	bne.n	800b7ae <__sflush_r+0x66>
 800b7a0:	6829      	ldr	r1, [r5, #0]
 800b7a2:	291d      	cmp	r1, #29
 800b7a4:	d82c      	bhi.n	800b800 <__sflush_r+0xb8>
 800b7a6:	4a2a      	ldr	r2, [pc, #168]	; (800b850 <__sflush_r+0x108>)
 800b7a8:	40ca      	lsrs	r2, r1
 800b7aa:	07d6      	lsls	r6, r2, #31
 800b7ac:	d528      	bpl.n	800b800 <__sflush_r+0xb8>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	6062      	str	r2, [r4, #4]
 800b7b2:	04d9      	lsls	r1, r3, #19
 800b7b4:	6922      	ldr	r2, [r4, #16]
 800b7b6:	6022      	str	r2, [r4, #0]
 800b7b8:	d504      	bpl.n	800b7c4 <__sflush_r+0x7c>
 800b7ba:	1c42      	adds	r2, r0, #1
 800b7bc:	d101      	bne.n	800b7c2 <__sflush_r+0x7a>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	b903      	cbnz	r3, 800b7c4 <__sflush_r+0x7c>
 800b7c2:	6560      	str	r0, [r4, #84]	; 0x54
 800b7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7c6:	602f      	str	r7, [r5, #0]
 800b7c8:	2900      	cmp	r1, #0
 800b7ca:	d0ca      	beq.n	800b762 <__sflush_r+0x1a>
 800b7cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d0:	4299      	cmp	r1, r3
 800b7d2:	d002      	beq.n	800b7da <__sflush_r+0x92>
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f7ff faa5 	bl	800ad24 <_free_r>
 800b7da:	2000      	movs	r0, #0
 800b7dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b7de:	e7c1      	b.n	800b764 <__sflush_r+0x1c>
 800b7e0:	6a21      	ldr	r1, [r4, #32]
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	47b0      	blx	r6
 800b7e8:	1c41      	adds	r1, r0, #1
 800b7ea:	d1c7      	bne.n	800b77c <__sflush_r+0x34>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0c4      	beq.n	800b77c <__sflush_r+0x34>
 800b7f2:	2b1d      	cmp	r3, #29
 800b7f4:	d001      	beq.n	800b7fa <__sflush_r+0xb2>
 800b7f6:	2b16      	cmp	r3, #22
 800b7f8:	d101      	bne.n	800b7fe <__sflush_r+0xb6>
 800b7fa:	602f      	str	r7, [r5, #0]
 800b7fc:	e7b1      	b.n	800b762 <__sflush_r+0x1a>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	e7ad      	b.n	800b764 <__sflush_r+0x1c>
 800b808:	690f      	ldr	r7, [r1, #16]
 800b80a:	2f00      	cmp	r7, #0
 800b80c:	d0a9      	beq.n	800b762 <__sflush_r+0x1a>
 800b80e:	0793      	lsls	r3, r2, #30
 800b810:	680e      	ldr	r6, [r1, #0]
 800b812:	bf08      	it	eq
 800b814:	694b      	ldreq	r3, [r1, #20]
 800b816:	600f      	str	r7, [r1, #0]
 800b818:	bf18      	it	ne
 800b81a:	2300      	movne	r3, #0
 800b81c:	eba6 0807 	sub.w	r8, r6, r7
 800b820:	608b      	str	r3, [r1, #8]
 800b822:	f1b8 0f00 	cmp.w	r8, #0
 800b826:	dd9c      	ble.n	800b762 <__sflush_r+0x1a>
 800b828:	6a21      	ldr	r1, [r4, #32]
 800b82a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b82c:	4643      	mov	r3, r8
 800b82e:	463a      	mov	r2, r7
 800b830:	4628      	mov	r0, r5
 800b832:	47b0      	blx	r6
 800b834:	2800      	cmp	r0, #0
 800b836:	dc06      	bgt.n	800b846 <__sflush_r+0xfe>
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b83e:	81a3      	strh	r3, [r4, #12]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	e78e      	b.n	800b764 <__sflush_r+0x1c>
 800b846:	4407      	add	r7, r0
 800b848:	eba8 0800 	sub.w	r8, r8, r0
 800b84c:	e7e9      	b.n	800b822 <__sflush_r+0xda>
 800b84e:	bf00      	nop
 800b850:	20400001 	.word	0x20400001

0800b854 <_fflush_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	690b      	ldr	r3, [r1, #16]
 800b858:	4605      	mov	r5, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	b913      	cbnz	r3, 800b864 <_fflush_r+0x10>
 800b85e:	2500      	movs	r5, #0
 800b860:	4628      	mov	r0, r5
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	b118      	cbz	r0, 800b86e <_fflush_r+0x1a>
 800b866:	6983      	ldr	r3, [r0, #24]
 800b868:	b90b      	cbnz	r3, 800b86e <_fflush_r+0x1a>
 800b86a:	f000 f887 	bl	800b97c <__sinit>
 800b86e:	4b14      	ldr	r3, [pc, #80]	; (800b8c0 <_fflush_r+0x6c>)
 800b870:	429c      	cmp	r4, r3
 800b872:	d11b      	bne.n	800b8ac <_fflush_r+0x58>
 800b874:	686c      	ldr	r4, [r5, #4]
 800b876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0ef      	beq.n	800b85e <_fflush_r+0xa>
 800b87e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b880:	07d0      	lsls	r0, r2, #31
 800b882:	d404      	bmi.n	800b88e <_fflush_r+0x3a>
 800b884:	0599      	lsls	r1, r3, #22
 800b886:	d402      	bmi.n	800b88e <_fflush_r+0x3a>
 800b888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b88a:	f000 f915 	bl	800bab8 <__retarget_lock_acquire_recursive>
 800b88e:	4628      	mov	r0, r5
 800b890:	4621      	mov	r1, r4
 800b892:	f7ff ff59 	bl	800b748 <__sflush_r>
 800b896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b898:	07da      	lsls	r2, r3, #31
 800b89a:	4605      	mov	r5, r0
 800b89c:	d4e0      	bmi.n	800b860 <_fflush_r+0xc>
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	059b      	lsls	r3, r3, #22
 800b8a2:	d4dd      	bmi.n	800b860 <_fflush_r+0xc>
 800b8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8a6:	f000 f908 	bl	800baba <__retarget_lock_release_recursive>
 800b8aa:	e7d9      	b.n	800b860 <_fflush_r+0xc>
 800b8ac:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <_fflush_r+0x70>)
 800b8ae:	429c      	cmp	r4, r3
 800b8b0:	d101      	bne.n	800b8b6 <_fflush_r+0x62>
 800b8b2:	68ac      	ldr	r4, [r5, #8]
 800b8b4:	e7df      	b.n	800b876 <_fflush_r+0x22>
 800b8b6:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <_fflush_r+0x74>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	bf08      	it	eq
 800b8bc:	68ec      	ldreq	r4, [r5, #12]
 800b8be:	e7da      	b.n	800b876 <_fflush_r+0x22>
 800b8c0:	0800c384 	.word	0x0800c384
 800b8c4:	0800c3a4 	.word	0x0800c3a4
 800b8c8:	0800c364 	.word	0x0800c364

0800b8cc <std>:
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8da:	6083      	str	r3, [r0, #8]
 800b8dc:	8181      	strh	r1, [r0, #12]
 800b8de:	6643      	str	r3, [r0, #100]	; 0x64
 800b8e0:	81c2      	strh	r2, [r0, #14]
 800b8e2:	6183      	str	r3, [r0, #24]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	2208      	movs	r2, #8
 800b8e8:	305c      	adds	r0, #92	; 0x5c
 800b8ea:	f7fd fb45 	bl	8008f78 <memset>
 800b8ee:	4b05      	ldr	r3, [pc, #20]	; (800b904 <std+0x38>)
 800b8f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b8f2:	4b05      	ldr	r3, [pc, #20]	; (800b908 <std+0x3c>)
 800b8f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8f6:	4b05      	ldr	r3, [pc, #20]	; (800b90c <std+0x40>)
 800b8f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8fa:	4b05      	ldr	r3, [pc, #20]	; (800b910 <std+0x44>)
 800b8fc:	6224      	str	r4, [r4, #32]
 800b8fe:	6323      	str	r3, [r4, #48]	; 0x30
 800b900:	bd10      	pop	{r4, pc}
 800b902:	bf00      	nop
 800b904:	0800bc21 	.word	0x0800bc21
 800b908:	0800bc43 	.word	0x0800bc43
 800b90c:	0800bc7b 	.word	0x0800bc7b
 800b910:	0800bc9f 	.word	0x0800bc9f

0800b914 <_cleanup_r>:
 800b914:	4901      	ldr	r1, [pc, #4]	; (800b91c <_cleanup_r+0x8>)
 800b916:	f000 b8af 	b.w	800ba78 <_fwalk_reent>
 800b91a:	bf00      	nop
 800b91c:	0800b855 	.word	0x0800b855

0800b920 <__sfmoreglue>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	2268      	movs	r2, #104	; 0x68
 800b924:	1e4d      	subs	r5, r1, #1
 800b926:	4355      	muls	r5, r2
 800b928:	460e      	mov	r6, r1
 800b92a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b92e:	f7ff fa65 	bl	800adfc <_malloc_r>
 800b932:	4604      	mov	r4, r0
 800b934:	b140      	cbz	r0, 800b948 <__sfmoreglue+0x28>
 800b936:	2100      	movs	r1, #0
 800b938:	e9c0 1600 	strd	r1, r6, [r0]
 800b93c:	300c      	adds	r0, #12
 800b93e:	60a0      	str	r0, [r4, #8]
 800b940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b944:	f7fd fb18 	bl	8008f78 <memset>
 800b948:	4620      	mov	r0, r4
 800b94a:	bd70      	pop	{r4, r5, r6, pc}

0800b94c <__sfp_lock_acquire>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__sfp_lock_acquire+0x8>)
 800b94e:	f000 b8b3 	b.w	800bab8 <__retarget_lock_acquire_recursive>
 800b952:	bf00      	nop
 800b954:	20000a29 	.word	0x20000a29

0800b958 <__sfp_lock_release>:
 800b958:	4801      	ldr	r0, [pc, #4]	; (800b960 <__sfp_lock_release+0x8>)
 800b95a:	f000 b8ae 	b.w	800baba <__retarget_lock_release_recursive>
 800b95e:	bf00      	nop
 800b960:	20000a29 	.word	0x20000a29

0800b964 <__sinit_lock_acquire>:
 800b964:	4801      	ldr	r0, [pc, #4]	; (800b96c <__sinit_lock_acquire+0x8>)
 800b966:	f000 b8a7 	b.w	800bab8 <__retarget_lock_acquire_recursive>
 800b96a:	bf00      	nop
 800b96c:	20000a2a 	.word	0x20000a2a

0800b970 <__sinit_lock_release>:
 800b970:	4801      	ldr	r0, [pc, #4]	; (800b978 <__sinit_lock_release+0x8>)
 800b972:	f000 b8a2 	b.w	800baba <__retarget_lock_release_recursive>
 800b976:	bf00      	nop
 800b978:	20000a2a 	.word	0x20000a2a

0800b97c <__sinit>:
 800b97c:	b510      	push	{r4, lr}
 800b97e:	4604      	mov	r4, r0
 800b980:	f7ff fff0 	bl	800b964 <__sinit_lock_acquire>
 800b984:	69a3      	ldr	r3, [r4, #24]
 800b986:	b11b      	cbz	r3, 800b990 <__sinit+0x14>
 800b988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b98c:	f7ff bff0 	b.w	800b970 <__sinit_lock_release>
 800b990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b994:	6523      	str	r3, [r4, #80]	; 0x50
 800b996:	4b13      	ldr	r3, [pc, #76]	; (800b9e4 <__sinit+0x68>)
 800b998:	4a13      	ldr	r2, [pc, #76]	; (800b9e8 <__sinit+0x6c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	bf04      	itt	eq
 800b9a2:	2301      	moveq	r3, #1
 800b9a4:	61a3      	streq	r3, [r4, #24]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 f820 	bl	800b9ec <__sfp>
 800b9ac:	6060      	str	r0, [r4, #4]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 f81c 	bl	800b9ec <__sfp>
 800b9b4:	60a0      	str	r0, [r4, #8]
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 f818 	bl	800b9ec <__sfp>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	60e0      	str	r0, [r4, #12]
 800b9c0:	2104      	movs	r1, #4
 800b9c2:	6860      	ldr	r0, [r4, #4]
 800b9c4:	f7ff ff82 	bl	800b8cc <std>
 800b9c8:	68a0      	ldr	r0, [r4, #8]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	2109      	movs	r1, #9
 800b9ce:	f7ff ff7d 	bl	800b8cc <std>
 800b9d2:	68e0      	ldr	r0, [r4, #12]
 800b9d4:	2202      	movs	r2, #2
 800b9d6:	2112      	movs	r1, #18
 800b9d8:	f7ff ff78 	bl	800b8cc <std>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	61a3      	str	r3, [r4, #24]
 800b9e0:	e7d2      	b.n	800b988 <__sinit+0xc>
 800b9e2:	bf00      	nop
 800b9e4:	0800bfec 	.word	0x0800bfec
 800b9e8:	0800b915 	.word	0x0800b915

0800b9ec <__sfp>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	f7ff ffac 	bl	800b94c <__sfp_lock_acquire>
 800b9f4:	4b1e      	ldr	r3, [pc, #120]	; (800ba70 <__sfp+0x84>)
 800b9f6:	681e      	ldr	r6, [r3, #0]
 800b9f8:	69b3      	ldr	r3, [r6, #24]
 800b9fa:	b913      	cbnz	r3, 800ba02 <__sfp+0x16>
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff ffbd 	bl	800b97c <__sinit>
 800ba02:	3648      	adds	r6, #72	; 0x48
 800ba04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	d503      	bpl.n	800ba14 <__sfp+0x28>
 800ba0c:	6833      	ldr	r3, [r6, #0]
 800ba0e:	b30b      	cbz	r3, 800ba54 <__sfp+0x68>
 800ba10:	6836      	ldr	r6, [r6, #0]
 800ba12:	e7f7      	b.n	800ba04 <__sfp+0x18>
 800ba14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba18:	b9d5      	cbnz	r5, 800ba50 <__sfp+0x64>
 800ba1a:	4b16      	ldr	r3, [pc, #88]	; (800ba74 <__sfp+0x88>)
 800ba1c:	60e3      	str	r3, [r4, #12]
 800ba1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba22:	6665      	str	r5, [r4, #100]	; 0x64
 800ba24:	f000 f847 	bl	800bab6 <__retarget_lock_init_recursive>
 800ba28:	f7ff ff96 	bl	800b958 <__sfp_lock_release>
 800ba2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba34:	6025      	str	r5, [r4, #0]
 800ba36:	61a5      	str	r5, [r4, #24]
 800ba38:	2208      	movs	r2, #8
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba40:	f7fd fa9a 	bl	8008f78 <memset>
 800ba44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba50:	3468      	adds	r4, #104	; 0x68
 800ba52:	e7d9      	b.n	800ba08 <__sfp+0x1c>
 800ba54:	2104      	movs	r1, #4
 800ba56:	4638      	mov	r0, r7
 800ba58:	f7ff ff62 	bl	800b920 <__sfmoreglue>
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	6030      	str	r0, [r6, #0]
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1d5      	bne.n	800ba10 <__sfp+0x24>
 800ba64:	f7ff ff78 	bl	800b958 <__sfp_lock_release>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	e7ee      	b.n	800ba4c <__sfp+0x60>
 800ba6e:	bf00      	nop
 800ba70:	0800bfec 	.word	0x0800bfec
 800ba74:	ffff0001 	.word	0xffff0001

0800ba78 <_fwalk_reent>:
 800ba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	4688      	mov	r8, r1
 800ba80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba84:	2700      	movs	r7, #0
 800ba86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba8e:	d505      	bpl.n	800ba9c <_fwalk_reent+0x24>
 800ba90:	6824      	ldr	r4, [r4, #0]
 800ba92:	2c00      	cmp	r4, #0
 800ba94:	d1f7      	bne.n	800ba86 <_fwalk_reent+0xe>
 800ba96:	4638      	mov	r0, r7
 800ba98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9c:	89ab      	ldrh	r3, [r5, #12]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d907      	bls.n	800bab2 <_fwalk_reent+0x3a>
 800baa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baa6:	3301      	adds	r3, #1
 800baa8:	d003      	beq.n	800bab2 <_fwalk_reent+0x3a>
 800baaa:	4629      	mov	r1, r5
 800baac:	4630      	mov	r0, r6
 800baae:	47c0      	blx	r8
 800bab0:	4307      	orrs	r7, r0
 800bab2:	3568      	adds	r5, #104	; 0x68
 800bab4:	e7e9      	b.n	800ba8a <_fwalk_reent+0x12>

0800bab6 <__retarget_lock_init_recursive>:
 800bab6:	4770      	bx	lr

0800bab8 <__retarget_lock_acquire_recursive>:
 800bab8:	4770      	bx	lr

0800baba <__retarget_lock_release_recursive>:
 800baba:	4770      	bx	lr

0800babc <__swhatbuf_r>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	460e      	mov	r6, r1
 800bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac4:	2900      	cmp	r1, #0
 800bac6:	b096      	sub	sp, #88	; 0x58
 800bac8:	4614      	mov	r4, r2
 800baca:	461d      	mov	r5, r3
 800bacc:	da08      	bge.n	800bae0 <__swhatbuf_r+0x24>
 800bace:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	061a      	lsls	r2, r3, #24
 800bad8:	d410      	bmi.n	800bafc <__swhatbuf_r+0x40>
 800bada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bade:	e00e      	b.n	800bafe <__swhatbuf_r+0x42>
 800bae0:	466a      	mov	r2, sp
 800bae2:	f000 f903 	bl	800bcec <_fstat_r>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	dbf1      	blt.n	800bace <__swhatbuf_r+0x12>
 800baea:	9a01      	ldr	r2, [sp, #4]
 800baec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baf4:	425a      	negs	r2, r3
 800baf6:	415a      	adcs	r2, r3
 800baf8:	602a      	str	r2, [r5, #0]
 800bafa:	e7ee      	b.n	800bada <__swhatbuf_r+0x1e>
 800bafc:	2340      	movs	r3, #64	; 0x40
 800bafe:	2000      	movs	r0, #0
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	b016      	add	sp, #88	; 0x58
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb08 <__smakebuf_r>:
 800bb08:	898b      	ldrh	r3, [r1, #12]
 800bb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb0c:	079d      	lsls	r5, r3, #30
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	d507      	bpl.n	800bb24 <__smakebuf_r+0x1c>
 800bb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	b002      	add	sp, #8
 800bb22:	bd70      	pop	{r4, r5, r6, pc}
 800bb24:	ab01      	add	r3, sp, #4
 800bb26:	466a      	mov	r2, sp
 800bb28:	f7ff ffc8 	bl	800babc <__swhatbuf_r>
 800bb2c:	9900      	ldr	r1, [sp, #0]
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7ff f963 	bl	800adfc <_malloc_r>
 800bb36:	b948      	cbnz	r0, 800bb4c <__smakebuf_r+0x44>
 800bb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb3c:	059a      	lsls	r2, r3, #22
 800bb3e:	d4ef      	bmi.n	800bb20 <__smakebuf_r+0x18>
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	f043 0302 	orr.w	r3, r3, #2
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	e7e3      	b.n	800bb14 <__smakebuf_r+0xc>
 800bb4c:	4b0d      	ldr	r3, [pc, #52]	; (800bb84 <__smakebuf_r+0x7c>)
 800bb4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	6020      	str	r0, [r4, #0]
 800bb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	9b00      	ldr	r3, [sp, #0]
 800bb5c:	6163      	str	r3, [r4, #20]
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	6120      	str	r0, [r4, #16]
 800bb62:	b15b      	cbz	r3, 800bb7c <__smakebuf_r+0x74>
 800bb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f000 f8d1 	bl	800bd10 <_isatty_r>
 800bb6e:	b128      	cbz	r0, 800bb7c <__smakebuf_r+0x74>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f023 0303 	bic.w	r3, r3, #3
 800bb76:	f043 0301 	orr.w	r3, r3, #1
 800bb7a:	81a3      	strh	r3, [r4, #12]
 800bb7c:	89a0      	ldrh	r0, [r4, #12]
 800bb7e:	4305      	orrs	r5, r0
 800bb80:	81a5      	strh	r5, [r4, #12]
 800bb82:	e7cd      	b.n	800bb20 <__smakebuf_r+0x18>
 800bb84:	0800b915 	.word	0x0800b915

0800bb88 <_malloc_usable_size_r>:
 800bb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb8c:	1f18      	subs	r0, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bfbc      	itt	lt
 800bb92:	580b      	ldrlt	r3, [r1, r0]
 800bb94:	18c0      	addlt	r0, r0, r3
 800bb96:	4770      	bx	lr

0800bb98 <_raise_r>:
 800bb98:	291f      	cmp	r1, #31
 800bb9a:	b538      	push	{r3, r4, r5, lr}
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	d904      	bls.n	800bbac <_raise_r+0x14>
 800bba2:	2316      	movs	r3, #22
 800bba4:	6003      	str	r3, [r0, #0]
 800bba6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbae:	b112      	cbz	r2, 800bbb6 <_raise_r+0x1e>
 800bbb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbb4:	b94b      	cbnz	r3, 800bbca <_raise_r+0x32>
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 f830 	bl	800bc1c <_getpid_r>
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc6:	f000 b817 	b.w	800bbf8 <_kill_r>
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d00a      	beq.n	800bbe4 <_raise_r+0x4c>
 800bbce:	1c59      	adds	r1, r3, #1
 800bbd0:	d103      	bne.n	800bbda <_raise_r+0x42>
 800bbd2:	2316      	movs	r3, #22
 800bbd4:	6003      	str	r3, [r0, #0]
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	e7e7      	b.n	800bbaa <_raise_r+0x12>
 800bbda:	2400      	movs	r4, #0
 800bbdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	4798      	blx	r3
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	e7e0      	b.n	800bbaa <_raise_r+0x12>

0800bbe8 <raise>:
 800bbe8:	4b02      	ldr	r3, [pc, #8]	; (800bbf4 <raise+0xc>)
 800bbea:	4601      	mov	r1, r0
 800bbec:	6818      	ldr	r0, [r3, #0]
 800bbee:	f7ff bfd3 	b.w	800bb98 <_raise_r>
 800bbf2:	bf00      	nop
 800bbf4:	20000024 	.word	0x20000024

0800bbf8 <_kill_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d07      	ldr	r5, [pc, #28]	; (800bc18 <_kill_r+0x20>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	4611      	mov	r1, r2
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f7f7 f8af 	bl	8002d68 <_kill>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d102      	bne.n	800bc14 <_kill_r+0x1c>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	b103      	cbz	r3, 800bc14 <_kill_r+0x1c>
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	bd38      	pop	{r3, r4, r5, pc}
 800bc16:	bf00      	nop
 800bc18:	20000a24 	.word	0x20000a24

0800bc1c <_getpid_r>:
 800bc1c:	f7f7 b89c 	b.w	8002d58 <_getpid>

0800bc20 <__sread>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	f000 f894 	bl	800bd54 <_read_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	bfab      	itete	ge
 800bc30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc32:	89a3      	ldrhlt	r3, [r4, #12]
 800bc34:	181b      	addge	r3, r3, r0
 800bc36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc3a:	bfac      	ite	ge
 800bc3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc3e:	81a3      	strhlt	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__swrite>:
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	461f      	mov	r7, r3
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	05db      	lsls	r3, r3, #23
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	4616      	mov	r6, r2
 800bc52:	d505      	bpl.n	800bc60 <__swrite+0x1e>
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	2302      	movs	r3, #2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f000 f868 	bl	800bd30 <_lseek_r>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	463b      	mov	r3, r7
 800bc70:	4628      	mov	r0, r5
 800bc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	f000 b817 	b.w	800bca8 <_write_r>

0800bc7a <__sseek>:
 800bc7a:	b510      	push	{r4, lr}
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc82:	f000 f855 	bl	800bd30 <_lseek_r>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	bf15      	itete	ne
 800bc8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc96:	81a3      	strheq	r3, [r4, #12]
 800bc98:	bf18      	it	ne
 800bc9a:	81a3      	strhne	r3, [r4, #12]
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <__sclose>:
 800bc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca2:	f000 b813 	b.w	800bccc <_close_r>
	...

0800bca8 <_write_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	; (800bcc8 <_write_r+0x20>)
 800bcac:	4604      	mov	r4, r0
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	602a      	str	r2, [r5, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f7f7 f88d 	bl	8002dd6 <_write>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_write_r+0x1e>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_write_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20000a24 	.word	0x20000a24

0800bccc <_close_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d06      	ldr	r5, [pc, #24]	; (800bce8 <_close_r+0x1c>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f7 f899 	bl	8002e0e <_close>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_close_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_close_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	20000a24 	.word	0x20000a24

0800bcec <_fstat_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	; (800bd0c <_fstat_r+0x20>)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	f7f7 f894 	bl	8002e26 <_fstat>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d102      	bne.n	800bd08 <_fstat_r+0x1c>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b103      	cbz	r3, 800bd08 <_fstat_r+0x1c>
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	bd38      	pop	{r3, r4, r5, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20000a24 	.word	0x20000a24

0800bd10 <_isatty_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	; (800bd2c <_isatty_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7f7 f893 	bl	8002e46 <_isatty>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_isatty_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_isatty_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20000a24 	.word	0x20000a24

0800bd30 <_lseek_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	; (800bd50 <_lseek_r+0x20>)
 800bd34:	4604      	mov	r4, r0
 800bd36:	4608      	mov	r0, r1
 800bd38:	4611      	mov	r1, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	602a      	str	r2, [r5, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f7f7 f88c 	bl	8002e5c <_lseek>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_lseek_r+0x1e>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_lseek_r+0x1e>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	20000a24 	.word	0x20000a24

0800bd54 <_read_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d07      	ldr	r5, [pc, #28]	; (800bd74 <_read_r+0x20>)
 800bd58:	4604      	mov	r4, r0
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	2200      	movs	r2, #0
 800bd60:	602a      	str	r2, [r5, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	f7f7 f81a 	bl	8002d9c <_read>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_read_r+0x1e>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_read_r+0x1e>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	20000a24 	.word	0x20000a24

0800bd78 <_init>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr

0800bd84 <_fini>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	bf00      	nop
 800bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd8a:	bc08      	pop	{r3}
 800bd8c:	469e      	mov	lr, r3
 800bd8e:	4770      	bx	lr
